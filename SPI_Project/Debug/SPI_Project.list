
SPI_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008660  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080087e8  080087e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008804  08008804  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800880c  0800880c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800880c  0800880c  0001880c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000081c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008ac  200008ac  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a2ba  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aaa  00000000  00000000  0003a37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  0003de28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  0003ef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a73  00000000  00000000  0003ff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170ad  00000000  00000000  0006398b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb73b  00000000  00000000  0007aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146173  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048f8  00000000  00000000  001461c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087d0 	.word	0x080087d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080087d0 	.word	0x080087d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <SPI_LIS3DSH_Tx>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t SPI_LIS3DSH_Tx(uint8_t adr,uint8_t data){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]


HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);//to start communication set SPI CS PIN(E3) low
 80004d0:	2200      	movs	r2, #0
 80004d2:	2108      	movs	r1, #8
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <SPI_LIS3DSH_Tx+0x48>)
 80004d6:	f001 f807 	bl	80014e8 <HAL_GPIO_WritePin>

HAL_SPI_Transmit(&hspi1, &adr, 1, 10);
 80004da:	1df9      	adds	r1, r7, #7
 80004dc:	230a      	movs	r3, #10
 80004de:	2201      	movs	r2, #1
 80004e0:	480a      	ldr	r0, [pc, #40]	; (800050c <SPI_LIS3DSH_Tx+0x4c>)
 80004e2:	f004 f998 	bl	8004816 <HAL_SPI_Transmit>
HAL_SPI_Transmit(&hspi1, &data, 1, 10);
 80004e6:	1db9      	adds	r1, r7, #6
 80004e8:	230a      	movs	r3, #10
 80004ea:	2201      	movs	r2, #1
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <SPI_LIS3DSH_Tx+0x4c>)
 80004ee:	f004 f992 	bl	8004816 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);//to end communication set SPI CS PIN(E3) high
 80004f2:	2201      	movs	r2, #1
 80004f4:	2108      	movs	r1, #8
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <SPI_LIS3DSH_Tx+0x48>)
 80004f8:	f000 fff6 	bl	80014e8 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	4618      	mov	r0, r3
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000
 800050c:	2000011c 	.word	0x2000011c

08000510 <SPI_LIS3DSH_Rx>:


uint8_t SPI_LIS3DSH_Rx(uint8_t adr){
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	uint8_t rx=0;
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]
//when you read from spi your address data's MSB have to
	adr|=0x80;
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000524:	b2db      	uxtb	r3, r3
 8000526:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);//to start communication set SPI CS PIN(E3) low
 8000528:	2200      	movs	r2, #0
 800052a:	2108      	movs	r1, #8
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <SPI_LIS3DSH_Rx+0x50>)
 800052e:	f000 ffdb 	bl	80014e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &adr, 1, 10);
 8000532:	1df9      	adds	r1, r7, #7
 8000534:	230a      	movs	r3, #10
 8000536:	2201      	movs	r2, #1
 8000538:	480a      	ldr	r0, [pc, #40]	; (8000564 <SPI_LIS3DSH_Rx+0x54>)
 800053a:	f004 f96c 	bl	8004816 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &rx, 1, 10);
 800053e:	f107 010f 	add.w	r1, r7, #15
 8000542:	230a      	movs	r3, #10
 8000544:	2201      	movs	r2, #1
 8000546:	4807      	ldr	r0, [pc, #28]	; (8000564 <SPI_LIS3DSH_Rx+0x54>)
 8000548:	f004 faa1 	bl	8004a8e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);//to end communication set SPI CS PIN(E3) high
 800054c:	2201      	movs	r2, #1
 800054e:	2108      	movs	r1, #8
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <SPI_LIS3DSH_Rx+0x50>)
 8000552:	f000 ffc9 	bl	80014e8 <HAL_GPIO_WritePin>
return rx;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	2000011c 	.word	0x2000011c

08000568 <LIS3DSH_Init>:


void LIS3DSH_Init(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

SPI_LIS3DSH_Tx(CTRL_REG6, 0x80);//enable boot
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	2025      	movs	r0, #37	; 0x25
 8000570:	f7ff ffa6 	bl	80004c0 <SPI_LIS3DSH_Tx>
SPI_LIS3DSH_Tx(CTRL_REG3, 0x01);//reset the sensor
 8000574:	2101      	movs	r1, #1
 8000576:	2023      	movs	r0, #35	; 0x23
 8000578:	f7ff ffa2 	bl	80004c0 <SPI_LIS3DSH_Tx>
HAL_Delay(100);
 800057c:	2064      	movs	r0, #100	; 0x64
 800057e:	f000 fce1 	bl	8000f44 <HAL_Delay>
if(SPI_LIS3DSH_Rx(WHO_AM_I)==0x3f){//we check the sensor work or not
 8000582:	200f      	movs	r0, #15
 8000584:	f7ff ffc4 	bl	8000510 <SPI_LIS3DSH_Rx>
 8000588:	4603      	mov	r3, r0
 800058a:	2b3f      	cmp	r3, #63	; 0x3f
 800058c:	d10f      	bne.n	80005ae <LIS3DSH_Init+0x46>
	SPI_LIS3DSH_Tx(CTRL_REG3, 0x48);//set interrrupt signal polarity is high and interrupt 1 enable
 800058e:	2148      	movs	r1, #72	; 0x48
 8000590:	2023      	movs	r0, #35	; 0x23
 8000592:	f7ff ff95 	bl	80004c0 <SPI_LIS3DSH_Tx>
	SPI_LIS3DSH_Tx(CTRL_REG4, 0x47);//set x,y,z axis enable and output clock is 25 Hz
 8000596:	2147      	movs	r1, #71	; 0x47
 8000598:	2020      	movs	r0, #32
 800059a:	f7ff ff91 	bl	80004c0 <SPI_LIS3DSH_Tx>
	SPI_LIS3DSH_Tx(CTRL_REG6, 0x64);//activate fifo, fifo watermark(WTM_EN) and FIFO watermark interrupt
 800059e:	2164      	movs	r1, #100	; 0x64
 80005a0:	2025      	movs	r0, #37	; 0x25
 80005a2:	f7ff ff8d 	bl	80004c0 <SPI_LIS3DSH_Tx>
	SPI_LIS3DSH_Tx(FIFO_CTRL, 0x41);//stream mode
 80005a6:	2141      	movs	r1, #65	; 0x41
 80005a8:	202e      	movs	r0, #46	; 0x2e
 80005aa:	f7ff ff89 	bl	80004c0 <SPI_LIS3DSH_Tx>
}
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <EXTI0_IRQHandler>:
int x,y,z;
void EXTI0_IRQHandler(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	//this interrupts generates by pina0 so we clear line 0
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <EXTI0_IRQHandler+0xa0>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	615a      	str	r2, [r3, #20]
x=SPI_LIS3DSH_Rx(OUT_X_H);
 80005be:	2029      	movs	r0, #41	; 0x29
 80005c0:	f7ff ffa6 	bl	8000510 <SPI_LIS3DSH_Rx>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <EXTI0_IRQHandler+0xa4>)
 80005ca:	601a      	str	r2, [r3, #0]
y=SPI_LIS3DSH_Rx(OUT_Y_H);
 80005cc:	202b      	movs	r0, #43	; 0x2b
 80005ce:	f7ff ff9f 	bl	8000510 <SPI_LIS3DSH_Rx>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <EXTI0_IRQHandler+0xa8>)
 80005d8:	601a      	str	r2, [r3, #0]
z=SPI_LIS3DSH_Rx(OUT_Z_H);
 80005da:	202d      	movs	r0, #45	; 0x2d
 80005dc:	f7ff ff98 	bl	8000510 <SPI_LIS3DSH_Rx>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <EXTI0_IRQHandler+0xac>)
 80005e6:	601a      	str	r2, [r3, #0]


if(x>20){
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <EXTI0_IRQHandler+0xa4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b14      	cmp	r3, #20
 80005ee:	dd06      	ble.n	80005fe <EXTI0_IRQHandler+0x4a>

HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET );
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f6:	481b      	ldr	r0, [pc, #108]	; (8000664 <EXTI0_IRQHandler+0xb0>)
 80005f8:	f000 ff76 	bl	80014e8 <HAL_GPIO_WritePin>
 80005fc:	e005      	b.n	800060a <EXTI0_IRQHandler+0x56>

}
else{

HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET );
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000604:	4817      	ldr	r0, [pc, #92]	; (8000664 <EXTI0_IRQHandler+0xb0>)
 8000606:	f000 ff6f 	bl	80014e8 <HAL_GPIO_WritePin>

}


if(y>20){
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <EXTI0_IRQHandler+0xa8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b14      	cmp	r3, #20
 8000610:	dd06      	ble.n	8000620 <EXTI0_IRQHandler+0x6c>

HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET );
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <EXTI0_IRQHandler+0xb0>)
 800061a:	f000 ff65 	bl	80014e8 <HAL_GPIO_WritePin>
 800061e:	e005      	b.n	800062c <EXTI0_IRQHandler+0x78>

}
else{

HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET );
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	480f      	ldr	r0, [pc, #60]	; (8000664 <EXTI0_IRQHandler+0xb0>)
 8000628:	f000 ff5e 	bl	80014e8 <HAL_GPIO_WritePin>

}


if(z>20){
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <EXTI0_IRQHandler+0xac>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b14      	cmp	r3, #20
 8000632:	dd06      	ble.n	8000642 <EXTI0_IRQHandler+0x8e>

HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET );
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	480a      	ldr	r0, [pc, #40]	; (8000664 <EXTI0_IRQHandler+0xb0>)
 800063c:	f000 ff54 	bl	80014e8 <HAL_GPIO_WritePin>
}




}
 8000640:	e005      	b.n	800064e <EXTI0_IRQHandler+0x9a>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET );
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <EXTI0_IRQHandler+0xb0>)
 800064a:	f000 ff4d 	bl	80014e8 <HAL_GPIO_WritePin>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40013c00 	.word	0x40013c00
 8000658:	200000bc 	.word	0x200000bc
 800065c:	20000118 	.word	0x20000118
 8000660:	20000114 	.word	0x20000114
 8000664:	40020c00 	.word	0x40020c00

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fbf8 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f810 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 f90c 	bl	8000890 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000678:	f000 f876 	bl	8000768 <MX_I2C1_Init>
  MX_I2S3_Init();
 800067c:	f000 f8a2 	bl	80007c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000680:	f000 f8d0 	bl	8000824 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000684:	f007 fc92 	bl	8007fac <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

LIS3DSH_Init();
 8000688:	f7ff ff6e 	bl	8000568 <LIS3DSH_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800068c:	f007 fcb4 	bl	8007ff8 <MX_USB_HOST_Process>
 8000690:	e7fc      	b.n	800068c <main+0x24>
	...

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 ffc4 	bl	8008630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000708:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000712:	2307      	movs	r3, #7
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fa52 	bl	8003bc4 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000726:	f000 f9b7 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f003 fcb3 	bl	80040b4 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000754:	f000 f9a0 	bl	8000a98 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_I2C1_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x58>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a6:	f002 fc29 	bl	8002ffc <HAL_I2C_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 f972 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000c0 	.word	0x200000c0
 80007bc:	40005400 	.word	0x40005400
 80007c0:	000186a0 	.word	0x000186a0

080007c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <MX_I2S3_Init+0x58>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <MX_I2S3_Init+0x5c>)
 80007ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_I2S3_Init+0x54>)
 8000804:	f002 fd3e 	bl	8003284 <HAL_I2S_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800080e:	f000 f943 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000174 	.word	0x20000174
 800081c:	40003c00 	.word	0x40003c00
 8000820:	00017700 	.word	0x00017700

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_SPI1_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_SPI1_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x64>)
 8000858:	2218      	movs	r2, #24
 800085a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_SPI1_Init+0x64>)
 8000876:	f003 ff45 	bl	8004704 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 f90a 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000011c 	.word	0x2000011c
 800088c:	40013000 	.word	0x40013000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b76      	ldr	r3, [pc, #472]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a75      	ldr	r2, [pc, #468]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b73      	ldr	r3, [pc, #460]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b6f      	ldr	r3, [pc, #444]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a6e      	ldr	r2, [pc, #440]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b6c      	ldr	r3, [pc, #432]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b68      	ldr	r3, [pc, #416]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a67      	ldr	r2, [pc, #412]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b65      	ldr	r3, [pc, #404]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b61      	ldr	r3, [pc, #388]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a60      	ldr	r2, [pc, #384]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b5e      	ldr	r3, [pc, #376]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a59      	ldr	r2, [pc, #356]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b57      	ldr	r3, [pc, #348]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a52      	ldr	r2, [pc, #328]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b50      	ldr	r3, [pc, #320]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	484d      	ldr	r0, [pc, #308]	; (8000a88 <MX_GPIO_Init+0x1f8>)
 8000954:	f000 fdc8 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	484b      	ldr	r0, [pc, #300]	; (8000a8c <MX_GPIO_Init+0x1fc>)
 800095e:	f000 fdc3 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000962:	2200      	movs	r2, #0
 8000964:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000968:	4849      	ldr	r0, [pc, #292]	; (8000a90 <MX_GPIO_Init+0x200>)
 800096a:	f000 fdbd 	bl	80014e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800096e:	2308      	movs	r3, #8
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4840      	ldr	r0, [pc, #256]	; (8000a88 <MX_GPIO_Init+0x1f8>)
 8000986:	f000 fc13 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	483a      	ldr	r0, [pc, #232]	; (8000a8c <MX_GPIO_Init+0x1fc>)
 80009a2:	f000 fc05 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009a6:	2308      	movs	r3, #8
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b6:	2305      	movs	r3, #5
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4832      	ldr	r0, [pc, #200]	; (8000a8c <MX_GPIO_Init+0x1fc>)
 80009c2:	f000 fbf5 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009c6:	2304      	movs	r3, #4
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	482e      	ldr	r0, [pc, #184]	; (8000a94 <MX_GPIO_Init+0x204>)
 80009da:	f000 fbe9 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f0:	2305      	movs	r3, #5
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4826      	ldr	r0, [pc, #152]	; (8000a94 <MX_GPIO_Init+0x204>)
 80009fc:	f000 fbd8 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a00:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a04:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481d      	ldr	r0, [pc, #116]	; (8000a90 <MX_GPIO_Init+0x200>)
 8000a1a:	f000 fbc9 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a1e:	2320      	movs	r3, #32
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4817      	ldr	r0, [pc, #92]	; (8000a90 <MX_GPIO_Init+0x200>)
 8000a32:	f000 fbbd 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <MX_GPIO_Init+0x1f8>)
 8000a4c:	f000 fbb0 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a54:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <MX_GPIO_Init+0x1f8>)
 8000a66:	f000 fba3 	bl	80011b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2006      	movs	r0, #6
 8000a70:	f000 fb67 	bl	8001142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a74:	2006      	movs	r0, #6
 8000a76:	f000 fb80 	bl	800117a <HAL_NVIC_EnableIRQ>

}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40020400 	.word	0x40020400

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fb22 	bl	800112c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12c      	bne.n	8000b70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b50:	f000 fb2e 	bl	80011b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <HAL_I2S_MspInit+0xf0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d15a      	bne.n	8000c6a <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bb8:	23c0      	movs	r3, #192	; 0xc0
 8000bba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 fc5d 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bd0:	f7ff ff62 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c38:	2306      	movs	r3, #6
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	; (8000c7c <HAL_I2S_MspInit+0xf8>)
 8000c44:	f000 fab4 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c48:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <HAL_I2S_MspInit+0xfc>)
 8000c66:	f000 faa3 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	; 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40003c00 	.word	0x40003c00
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020800 	.word	0x40020800

08000c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12b      	bne.n	8000cfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cde:	23e0      	movs	r3, #224	; 0xe0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_SPI_MspInit+0x8c>)
 8000cfa:	f000 fa59 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f8d0 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <OTG_FS_IRQHandler+0x10>)
 8000d6e:	f000 fe3f 	bl	80019f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000598 	.word	0x20000598

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f007 fc06 	bl	80085bc <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20020000 	.word	0x20020000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	200000ac 	.word	0x200000ac
 8000de4:	200008b0 	.word	0x200008b0

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e28:	4c0b      	ldr	r4, [pc, #44]	; (8000e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e36:	f7ff ffd7 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f007 fbc5 	bl	80085c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fc13 	bl	8000668 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e50:	08008814 	.word	0x08008814
  ldr r2, =_sbss
 8000e54:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e58:	200008ac 	.word	0x200008ac

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f94f 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fe06 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f967 	bl	8001196 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f92f 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	200001bc 	.word	0x200001bc

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200001bc 	.word	0x200001bc

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff29 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff3e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff31 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	e16b      	b.n	80014a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f040 815a 	bne.w	800149e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d005      	beq.n	8001202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d130      	bne.n	8001264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001238:	2201      	movs	r2, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 0201 	and.w	r2, r3, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b03      	cmp	r3, #3
 800126e:	d017      	beq.n	80012a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d123      	bne.n	80012f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	69b9      	ldr	r1, [r7, #24]
 80012f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80b4 	beq.w	800149e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b60      	ldr	r3, [pc, #384]	; (80014bc <HAL_GPIO_Init+0x30c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a5f      	ldr	r2, [pc, #380]	; (80014bc <HAL_GPIO_Init+0x30c>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b5d      	ldr	r3, [pc, #372]	; (80014bc <HAL_GPIO_Init+0x30c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001352:	4a5b      	ldr	r2, [pc, #364]	; (80014c0 <HAL_GPIO_Init+0x310>)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a52      	ldr	r2, [pc, #328]	; (80014c4 <HAL_GPIO_Init+0x314>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d02b      	beq.n	80013d6 <HAL_GPIO_Init+0x226>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a51      	ldr	r2, [pc, #324]	; (80014c8 <HAL_GPIO_Init+0x318>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d025      	beq.n	80013d2 <HAL_GPIO_Init+0x222>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a50      	ldr	r2, [pc, #320]	; (80014cc <HAL_GPIO_Init+0x31c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d01f      	beq.n	80013ce <HAL_GPIO_Init+0x21e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4f      	ldr	r2, [pc, #316]	; (80014d0 <HAL_GPIO_Init+0x320>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d019      	beq.n	80013ca <HAL_GPIO_Init+0x21a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4e      	ldr	r2, [pc, #312]	; (80014d4 <HAL_GPIO_Init+0x324>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0x216>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4d      	ldr	r2, [pc, #308]	; (80014d8 <HAL_GPIO_Init+0x328>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_Init+0x212>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4c      	ldr	r2, [pc, #304]	; (80014dc <HAL_GPIO_Init+0x32c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x20e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4b      	ldr	r2, [pc, #300]	; (80014e0 <HAL_GPIO_Init+0x330>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_GPIO_Init+0x20a>
 80013b6:	2307      	movs	r3, #7
 80013b8:	e00e      	b.n	80013d8 <HAL_GPIO_Init+0x228>
 80013ba:	2308      	movs	r3, #8
 80013bc:	e00c      	b.n	80013d8 <HAL_GPIO_Init+0x228>
 80013be:	2306      	movs	r3, #6
 80013c0:	e00a      	b.n	80013d8 <HAL_GPIO_Init+0x228>
 80013c2:	2305      	movs	r3, #5
 80013c4:	e008      	b.n	80013d8 <HAL_GPIO_Init+0x228>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x228>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x228>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x228>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x228>
 80013d6:	2300      	movs	r3, #0
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f002 0203 	and.w	r2, r2, #3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4093      	lsls	r3, r2
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e8:	4935      	ldr	r1, [pc, #212]	; (80014c0 <HAL_GPIO_Init+0x310>)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_GPIO_Init+0x334>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141a:	4a32      	ldr	r2, [pc, #200]	; (80014e4 <HAL_GPIO_Init+0x334>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_GPIO_Init+0x334>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_GPIO_Init+0x334>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_GPIO_Init+0x334>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_GPIO_Init+0x334>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_GPIO_Init+0x334>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <HAL_GPIO_Init+0x334>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	f67f ae90 	bls.w	80011cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021800 	.word	0x40021800
 80014e0:	40021c00 	.word	0x40021c00
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800151a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151c:	b08f      	sub	sp, #60	; 0x3c
 800151e:	af0a      	add	r7, sp, #40	; 0x28
 8001520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e054      	b.n	80015d6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f006 fd8e 	bl	8008068 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2203      	movs	r2, #3
 8001550:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fee4 	bl	8005338 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	687e      	ldr	r6, [r7, #4]
 8001578:	466d      	mov	r5, sp
 800157a:	f106 0410 	add.w	r4, r6, #16
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001586:	e894 0003 	ldmia.w	r4, {r0, r1}
 800158a:	e885 0003 	stmia.w	r5, {r0, r1}
 800158e:	1d33      	adds	r3, r6, #4
 8001590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	f003 fe5e 	bl	8005254 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2101      	movs	r1, #1
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fedb 	bl	800535a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	687e      	ldr	r6, [r7, #4]
 80015ac:	466d      	mov	r5, sp
 80015ae:	f106 0410 	add.w	r4, r6, #16
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015be:	e885 0003 	stmia.w	r5, {r0, r1}
 80015c2:	1d33      	adds	r3, r6, #4
 80015c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f004 f842 	bl	8005650 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015de <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015de:	b590      	push	{r4, r7, lr}
 80015e0:	b089      	sub	sp, #36	; 0x24
 80015e2:	af04      	add	r7, sp, #16
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	4608      	mov	r0, r1
 80015e8:	4611      	mov	r1, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	4603      	mov	r3, r0
 80015ee:	70fb      	strb	r3, [r7, #3]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70bb      	strb	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_HCD_HC_Init+0x28>
 8001602:	2302      	movs	r3, #2
 8001604:	e076      	b.n	80016f4 <HAL_HCD_HC_Init+0x116>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	212c      	movs	r1, #44	; 0x2c
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	333d      	adds	r3, #61	; 0x3d
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	3338      	adds	r3, #56	; 0x38
 800162e:	787a      	ldrb	r2, [r7, #1]
 8001630:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	212c      	movs	r1, #44	; 0x2c
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	3340      	adds	r3, #64	; 0x40
 8001640:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001642:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	212c      	movs	r1, #44	; 0x2c
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	3339      	adds	r3, #57	; 0x39
 8001652:	78fa      	ldrb	r2, [r7, #3]
 8001654:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	212c      	movs	r1, #44	; 0x2c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	333f      	adds	r3, #63	; 0x3f
 8001664:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001668:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	78ba      	ldrb	r2, [r7, #2]
 800166e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001672:	b2d0      	uxtb	r0, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	212c      	movs	r1, #44	; 0x2c
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	333a      	adds	r3, #58	; 0x3a
 8001680:	4602      	mov	r2, r0
 8001682:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001684:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da09      	bge.n	80016a0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	212c      	movs	r1, #44	; 0x2c
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	333b      	adds	r3, #59	; 0x3b
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e008      	b.n	80016b2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	212c      	movs	r1, #44	; 0x2c
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	333b      	adds	r3, #59	; 0x3b
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	333c      	adds	r3, #60	; 0x3c
 80016c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016c4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	787c      	ldrb	r4, [r7, #1]
 80016cc:	78ba      	ldrb	r2, [r7, #2]
 80016ce:	78f9      	ldrb	r1, [r7, #3]
 80016d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4623      	mov	r3, r4
 80016e2:	f004 f92f 	bl	8005944 <USB_HC_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd90      	pop	{r4, r7, pc}

080016fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_HCD_HC_Halt+0x1e>
 8001716:	2302      	movs	r3, #2
 8001718:	e00f      	b.n	800173a <HAL_HCD_HC_Halt+0x3e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	78fa      	ldrb	r2, [r7, #3]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f004 fb6b 	bl	8005e06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	70fb      	strb	r3, [r7, #3]
 8001756:	460b      	mov	r3, r1
 8001758:	70bb      	strb	r3, [r7, #2]
 800175a:	4613      	mov	r3, r2
 800175c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	333b      	adds	r3, #59	; 0x3b
 800176c:	78ba      	ldrb	r2, [r7, #2]
 800176e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	212c      	movs	r1, #44	; 0x2c
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	4413      	add	r3, r2
 800177c:	333f      	adds	r3, #63	; 0x3f
 800177e:	787a      	ldrb	r2, [r7, #1]
 8001780:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001782:	7c3b      	ldrb	r3, [r7, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d112      	bne.n	80017ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	212c      	movs	r1, #44	; 0x2c
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	3342      	adds	r3, #66	; 0x42
 8001796:	2203      	movs	r2, #3
 8001798:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	212c      	movs	r1, #44	; 0x2c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	333d      	adds	r3, #61	; 0x3d
 80017a8:	7f3a      	ldrb	r2, [r7, #28]
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e008      	b.n	80017c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2202      	movs	r2, #2
 80017be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017c0:	787b      	ldrb	r3, [r7, #1]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	f200 80c6 	bhi.w	8001954 <HAL_HCD_HC_SubmitRequest+0x210>
 80017c8:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	08001941 	.word	0x08001941
 80017d8:	08001845 	.word	0x08001845
 80017dc:	080018c3 	.word	0x080018c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017e0:	7c3b      	ldrb	r3, [r7, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	f040 80b8 	bne.w	8001958 <HAL_HCD_HC_SubmitRequest+0x214>
 80017e8:	78bb      	ldrb	r3, [r7, #2]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 80b4 	bne.w	8001958 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017f0:	8b3b      	ldrh	r3, [r7, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	3355      	adds	r3, #85	; 0x55
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	212c      	movs	r1, #44	; 0x2c
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3355      	adds	r3, #85	; 0x55
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3342      	adds	r3, #66	; 0x42
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800182e:	e093      	b.n	8001958 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3342      	adds	r3, #66	; 0x42
 800183e:	2202      	movs	r2, #2
 8001840:	701a      	strb	r2, [r3, #0]
      break;
 8001842:	e089      	b.n	8001958 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001844:	78bb      	ldrb	r3, [r7, #2]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d11d      	bne.n	8001886 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3355      	adds	r3, #85	; 0x55
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	3342      	adds	r3, #66	; 0x42
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001870:	e073      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	3342      	adds	r3, #66	; 0x42
 8001880:	2202      	movs	r2, #2
 8001882:	701a      	strb	r2, [r3, #0]
      break;
 8001884:	e069      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	212c      	movs	r1, #44	; 0x2c
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4413      	add	r3, r2
 8001892:	3354      	adds	r3, #84	; 0x54
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3342      	adds	r3, #66	; 0x42
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
      break;
 80018ac:	e055      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3342      	adds	r3, #66	; 0x42
 80018bc:	2202      	movs	r2, #2
 80018be:	701a      	strb	r2, [r3, #0]
      break;
 80018c0:	e04b      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018c2:	78bb      	ldrb	r3, [r7, #2]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d11d      	bne.n	8001904 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	3355      	adds	r3, #85	; 0x55
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3342      	adds	r3, #66	; 0x42
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018ee:	e034      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3342      	adds	r3, #66	; 0x42
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
      break;
 8001902:	e02a      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	3354      	adds	r3, #84	; 0x54
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	3342      	adds	r3, #66	; 0x42
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
      break;
 800192a:	e016      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3342      	adds	r3, #66	; 0x42
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
      break;
 800193e:	e00c      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3342      	adds	r3, #66	; 0x42
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
      break;
 8001952:	e002      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001958:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3344      	adds	r3, #68	; 0x44
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	8b3a      	ldrh	r2, [r7, #24]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	202c      	movs	r0, #44	; 0x2c
 8001974:	fb00 f303 	mul.w	r3, r0, r3
 8001978:	440b      	add	r3, r1
 800197a:	334c      	adds	r3, #76	; 0x4c
 800197c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	212c      	movs	r1, #44	; 0x2c
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	3360      	adds	r3, #96	; 0x60
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	212c      	movs	r1, #44	; 0x2c
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	4413      	add	r3, r2
 800199c:	3350      	adds	r3, #80	; 0x50
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3339      	adds	r3, #57	; 0x39
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3361      	adds	r3, #97	; 0x61
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	222c      	movs	r2, #44	; 0x2c
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	3338      	adds	r3, #56	; 0x38
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	18d1      	adds	r1, r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	f004 f8be 	bl	8005b60 <USB_HC_StartXfer>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop

080019f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fde1 	bl	80055ce <USB_GetMode>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	f040 80f6 	bne.w	8001c00 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fdc5 	bl	80055a8 <USB_ReadInterrupts>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80ec 	beq.w	8001bfe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fdbc 	bl	80055a8 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a3a:	d104      	bne.n	8001a46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 fdac 	bl	80055a8 <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a5a:	d104      	bne.n	8001a66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 fd9c 	bl	80055a8 <USB_ReadInterrupts>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a7a:	d104      	bne.n	8001a86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fd8c 	bl	80055a8 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d103      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fd7e 	bl	80055a8 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ab6:	d11c      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ac0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10f      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	6938      	ldr	r0, [r7, #16]
 8001ad6:	f003 fc8d 	bl	80053f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ada:	6938      	ldr	r0, [r7, #16]
 8001adc:	f003 fcae 	bl	800543c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fe66 	bl	80057b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f006 fb39 	bl	8008164 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fd56 	bl	80055a8 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b06:	d102      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f001 fa03 	bl	8002f14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fd48 	bl	80055a8 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d106      	bne.n	8001b30 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f006 fb02 	bl	800812c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 fd37 	bl	80055a8 <USB_ReadInterrupts>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d101      	bne.n	8001b48 <HAL_HCD_IRQHandler+0x158>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_HCD_IRQHandler+0x15a>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d012      	beq.n	8001b74 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0210 	bic.w	r2, r2, #16
 8001b5c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f001 f906 	bl	8002d70 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0210 	orr.w	r2, r2, #16
 8001b72:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fd15 	bl	80055a8 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b88:	d13a      	bne.n	8001c00 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 f928 	bl	8005de4 <USB_HC_ReadInterrupt>
 8001b94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e025      	b.n	8001be8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d018      	beq.n	8001be2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8ab 	bl	8001d2a <HCD_HC_IN_IRQHandler>
 8001bd4:	e005      	b.n	8001be2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fcc6 	bl	800256e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3d4      	bcc.n	8001b9c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	e000      	b.n	8001c00 <HAL_HCD_IRQHandler+0x210>
      return;
 8001bfe:	bf00      	nop
    }
  }
}
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_HCD_Start+0x16>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e013      	b.n	8001c44 <HAL_HCD_Start+0x3e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fe28 	bl	8005880 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f003 fb6e 	bl	8005316 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_HCD_Stop+0x16>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e00d      	b.n	8001c7e <HAL_HCD_Stop+0x32>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fa22 	bl	80060b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fdca 	bl	800582c <USB_ResetPort>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3360      	adds	r3, #96	; 0x60
 8001cbc:	781b      	ldrb	r3, [r3, #0]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	212c      	movs	r1, #44	; 0x2c
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3350      	adds	r3, #80	; 0x50
 8001ce4:	681b      	ldr	r3, [r3, #0]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fe0e 	bl	8005920 <USB_GetCurrentFrame>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 fde9 	bl	80058f2 <USB_GetHostSpeed>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d119      	bne.n	8001d8e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	461a      	mov	r2, r3
 8001d68:	2304      	movs	r3, #4
 8001d6a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	0151      	lsls	r1, r2, #5
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	440a      	add	r2, r1
 8001d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	60d3      	str	r3, [r2, #12]
 8001d8c:	e101      	b.n	8001f92 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da4:	d12b      	bne.n	8001dfe <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	461a      	mov	r2, r3
 8001db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3361      	adds	r3, #97	; 0x61
 8001dc8:	2207      	movs	r2, #7
 8001dca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	0151      	lsls	r1, r2, #5
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	440a      	add	r2, r1
 8001de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 f805 	bl	8005e06 <USB_HC_Halt>
 8001dfc:	e0c9      	b.n	8001f92 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d109      	bne.n	8001e28 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	2320      	movs	r3, #32
 8001e24:	6093      	str	r3, [r2, #8]
 8001e26:	e0b4      	b.n	8001f92 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d133      	bne.n	8001ea6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	0151      	lsls	r1, r2, #5
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	440a      	add	r2, r1
 8001e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3361      	adds	r3, #97	; 0x61
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2310      	movs	r3, #16
 8001e80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2308      	movs	r3, #8
 8001e92:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 ffb1 	bl	8005e06 <USB_HC_Halt>
 8001ea4:	e075      	b.n	8001f92 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebc:	d134      	bne.n	8001f28 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	0151      	lsls	r1, r2, #5
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	440a      	add	r2, r1
 8001ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3361      	adds	r3, #97	; 0x61
 8001eec:	2208      	movs	r2, #8
 8001eee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	461a      	mov	r2, r3
 8001efe:	2310      	movs	r3, #16
 8001f00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f14:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 ff70 	bl	8005e06 <USB_HC_Halt>
 8001f26:	e034      	b.n	8001f92 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b80      	cmp	r3, #128	; 0x80
 8001f3c:	d129      	bne.n	8001f92 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	0151      	lsls	r1, r2, #5
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	440a      	add	r2, r1
 8001f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3361      	adds	r3, #97	; 0x61
 8001f6c:	2206      	movs	r2, #6
 8001f6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 ff43 	bl	8005e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa8:	d122      	bne.n	8001ff0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	0151      	lsls	r1, r2, #5
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	440a      	add	r2, r1
 8001fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 ff16 	bl	8005e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fec:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fee:	e2ba      	b.n	8002566 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	f040 811b 	bne.w	800223e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d019      	beq.n	8002044 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3348      	adds	r3, #72	; 0x48
 800201e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	0159      	lsls	r1, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	440b      	add	r3, r1
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002032:	1ad2      	subs	r2, r2, r3
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	202c      	movs	r0, #44	; 0x2c
 800203a:	fb00 f303 	mul.w	r3, r0, r3
 800203e:	440b      	add	r3, r1
 8002040:	3350      	adds	r3, #80	; 0x50
 8002042:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3361      	adds	r3, #97	; 0x61
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	335c      	adds	r3, #92	; 0x5c
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002074:	461a      	mov	r2, r3
 8002076:	2301      	movs	r3, #1
 8002078:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	333f      	adds	r3, #63	; 0x3f
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	333f      	adds	r3, #63	; 0x3f
 800209c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d121      	bne.n	80020e6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	0151      	lsls	r1, r2, #5
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	440a      	add	r2, r1
 80020b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fe9a 	bl	8005e06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	461a      	mov	r2, r3
 80020e0:	2310      	movs	r3, #16
 80020e2:	6093      	str	r3, [r2, #8]
 80020e4:	e066      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	333f      	adds	r3, #63	; 0x3f
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d127      	bne.n	800214a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	0151      	lsls	r1, r2, #5
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	440a      	add	r2, r1
 8002110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002114:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002118:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3360      	adds	r3, #96	; 0x60
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	b2d9      	uxtb	r1, r3
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	202c      	movs	r0, #44	; 0x2c
 8002136:	fb00 f303 	mul.w	r3, r0, r3
 800213a:	4413      	add	r3, r2
 800213c:	3360      	adds	r3, #96	; 0x60
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f006 f81c 	bl	8008180 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002148:	e034      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	333f      	adds	r3, #63	; 0x3f
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d12a      	bne.n	80021b4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3360      	adds	r3, #96	; 0x60
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3354      	adds	r3, #84	; 0x54
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2d8      	uxtb	r0, r3
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3354      	adds	r3, #84	; 0x54
 8002194:	4602      	mov	r2, r0
 8002196:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	b2d9      	uxtb	r1, r3
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	202c      	movs	r0, #44	; 0x2c
 80021a2:	fb00 f303 	mul.w	r3, r0, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3360      	adds	r3, #96	; 0x60
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f005 ffe6 	bl	8008180 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d12b      	bne.n	8002214 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3348      	adds	r3, #72	; 0x48
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	202c      	movs	r0, #44	; 0x2c
 80021d2:	fb00 f202 	mul.w	r2, r0, r2
 80021d6:	440a      	add	r2, r1
 80021d8:	3240      	adds	r2, #64	; 0x40
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 81be 	beq.w	8002566 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3354      	adds	r3, #84	; 0x54
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	f083 0301 	eor.w	r3, r3, #1
 80021fe:	b2d8      	uxtb	r0, r3
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3354      	adds	r3, #84	; 0x54
 800220e:	4602      	mov	r2, r0
 8002210:	701a      	strb	r2, [r3, #0]
}
 8002212:	e1a8      	b.n	8002566 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	3354      	adds	r3, #84	; 0x54
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	f083 0301 	eor.w	r3, r3, #1
 8002228:	b2d8      	uxtb	r0, r3
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3354      	adds	r3, #84	; 0x54
 8002238:	4602      	mov	r2, r0
 800223a:	701a      	strb	r2, [r3, #0]
}
 800223c:	e193      	b.n	8002566 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b02      	cmp	r3, #2
 8002252:	f040 8106 	bne.w	8002462 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	0151      	lsls	r1, r2, #5
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	440a      	add	r2, r1
 800226c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002270:	f023 0302 	bic.w	r3, r3, #2
 8002274:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3361      	adds	r3, #97	; 0x61
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d109      	bne.n	800229e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	3360      	adds	r3, #96	; 0x60
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	e0c9      	b.n	8002432 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3361      	adds	r3, #97	; 0x61
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d109      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3360      	adds	r3, #96	; 0x60
 80022c0:	2205      	movs	r2, #5
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e0b5      	b.n	8002432 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3361      	adds	r3, #97	; 0x61
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b06      	cmp	r3, #6
 80022d8:	d009      	beq.n	80022ee <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3361      	adds	r3, #97	; 0x61
 80022e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d150      	bne.n	8002390 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	335c      	adds	r3, #92	; 0x5c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	202c      	movs	r0, #44	; 0x2c
 8002306:	fb00 f303 	mul.w	r3, r0, r3
 800230a:	440b      	add	r3, r1
 800230c:	335c      	adds	r3, #92	; 0x5c
 800230e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	335c      	adds	r3, #92	; 0x5c
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d912      	bls.n	800234a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	335c      	adds	r3, #92	; 0x5c
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	3360      	adds	r3, #96	; 0x60
 8002344:	2204      	movs	r2, #4
 8002346:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002348:	e073      	b.n	8002432 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3360      	adds	r3, #96	; 0x60
 8002358:	2202      	movs	r2, #2
 800235a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002372:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800237a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800238e:	e050      	b.n	8002432 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3361      	adds	r3, #97	; 0x61
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d122      	bne.n	80023ea <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3360      	adds	r3, #96	; 0x60
 80023b2:	2202      	movs	r2, #2
 80023b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e023      	b.n	8002432 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	3361      	adds	r3, #97	; 0x61
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b07      	cmp	r3, #7
 80023fc:	d119      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	335c      	adds	r3, #92	; 0x5c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	202c      	movs	r0, #44	; 0x2c
 8002416:	fb00 f303 	mul.w	r3, r0, r3
 800241a:	440b      	add	r3, r1
 800241c:	335c      	adds	r3, #92	; 0x5c
 800241e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3360      	adds	r3, #96	; 0x60
 800242e:	2204      	movs	r2, #4
 8002430:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	2302      	movs	r3, #2
 8002442:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	b2d9      	uxtb	r1, r3
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	202c      	movs	r0, #44	; 0x2c
 800244e:	fb00 f303 	mul.w	r3, r0, r3
 8002452:	4413      	add	r3, r2
 8002454:	3360      	adds	r3, #96	; 0x60
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f005 fe90 	bl	8008180 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002460:	e081      	b.n	8002566 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b10      	cmp	r3, #16
 8002476:	d176      	bne.n	8002566 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	333f      	adds	r3, #63	; 0x3f
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d121      	bne.n	80024d0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	335c      	adds	r3, #92	; 0x5c
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	0151      	lsls	r1, r2, #5
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	440a      	add	r2, r1
 80024b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 fc9c 	bl	8005e06 <USB_HC_Halt>
 80024ce:	e041      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	333f      	adds	r3, #63	; 0x3f
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	333f      	adds	r3, #63	; 0x3f
 80024f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d12d      	bne.n	8002554 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	335c      	adds	r3, #92	; 0x5c
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d120      	bne.n	8002554 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	3361      	adds	r3, #97	; 0x61
 8002520:	2203      	movs	r2, #3
 8002522:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	0151      	lsls	r1, r2, #5
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	440a      	add	r2, r1
 800253a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800253e:	f043 0302 	orr.w	r3, r3, #2
 8002542:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fc59 	bl	8005e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	461a      	mov	r2, r3
 8002562:	2310      	movs	r3, #16
 8002564:	6093      	str	r3, [r2, #8]
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b088      	sub	sp, #32
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d119      	bne.n	80025d2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	2304      	movs	r3, #4
 80025ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	0151      	lsls	r1, r2, #5
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	440a      	add	r2, r1
 80025c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025d0:	e3ca      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d13e      	bne.n	8002666 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	461a      	mov	r2, r3
 80025f6:	2320      	movs	r3, #32
 80025f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	333d      	adds	r3, #61	; 0x3d
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	f040 83ac 	bne.w	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	333d      	adds	r3, #61	; 0x3d
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	3360      	adds	r3, #96	; 0x60
 8002630:	2202      	movs	r2, #2
 8002632:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	0151      	lsls	r1, r2, #5
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	440a      	add	r2, r1
 800264a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fbd1 	bl	8005e06 <USB_HC_Halt>
}
 8002664:	e380      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267c:	d122      	bne.n	80026c4 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	0151      	lsls	r1, r2, #5
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	440a      	add	r2, r1
 8002694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 fbac 	bl	8005e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	461a      	mov	r2, r3
 80026bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c0:	6093      	str	r3, [r2, #8]
}
 80026c2:	e351      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d150      	bne.n	800277c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d111      	bne.n	8002726 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333d      	adds	r3, #61	; 0x3d
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	2340      	movs	r3, #64	; 0x40
 8002724:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	0151      	lsls	r1, r2, #5
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	440a      	add	r2, r1
 800273c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fb58 	bl	8005e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	461a      	mov	r2, r3
 8002764:	2301      	movs	r3, #1
 8002766:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3361      	adds	r3, #97	; 0x61
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
}
 800277a:	e2f5      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b40      	cmp	r3, #64	; 0x40
 8002790:	d13c      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3361      	adds	r3, #97	; 0x61
 80027a0:	2204      	movs	r2, #4
 80027a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	333d      	adds	r3, #61	; 0x3d
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	0151      	lsls	r1, r2, #5
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	440a      	add	r2, r1
 80027de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fb07 	bl	8005e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	6093      	str	r3, [r2, #8]
}
 800280a:	e2ad      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b08      	cmp	r3, #8
 8002820:	d12a      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	461a      	mov	r2, r3
 8002830:	2308      	movs	r3, #8
 8002832:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	0151      	lsls	r1, r2, #5
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	440a      	add	r2, r1
 800284a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800284e:	f043 0302 	orr.w	r3, r3, #2
 8002852:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fad1 	bl	8005e06 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3361      	adds	r3, #97	; 0x61
 8002872:	2205      	movs	r2, #5
 8002874:	701a      	strb	r2, [r3, #0]
}
 8002876:	e277      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b10      	cmp	r3, #16
 800288c:	d150      	bne.n	8002930 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	335c      	adds	r3, #92	; 0x5c
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3361      	adds	r3, #97	; 0x61
 80028ae:	2203      	movs	r2, #3
 80028b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	333d      	adds	r3, #61	; 0x3d
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d112      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	333c      	adds	r3, #60	; 0x3c
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d108      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	333d      	adds	r3, #61	; 0x3d
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	0151      	lsls	r1, r2, #5
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	440a      	add	r2, r1
 8002902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fa75 	bl	8005e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2310      	movs	r3, #16
 800292c:	6093      	str	r3, [r2, #8]
}
 800292e:	e21b      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d174      	bne.n	8002a30 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d121      	bne.n	8002992 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3361      	adds	r3, #97	; 0x61
 800295c:	2206      	movs	r2, #6
 800295e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	0151      	lsls	r1, r2, #5
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	440a      	add	r2, r1
 8002976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f003 fa3b 	bl	8005e06 <USB_HC_Halt>
 8002990:	e044      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	335c      	adds	r3, #92	; 0x5c
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	202c      	movs	r0, #44	; 0x2c
 80029aa:	fb00 f303 	mul.w	r3, r0, r3
 80029ae:	440b      	add	r3, r1
 80029b0:	335c      	adds	r3, #92	; 0x5c
 80029b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	335c      	adds	r3, #92	; 0x5c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d920      	bls.n	8002a0a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	335c      	adds	r3, #92	; 0x5c
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3360      	adds	r3, #96	; 0x60
 80029e8:	2204      	movs	r2, #4
 80029ea:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	b2d9      	uxtb	r1, r3
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	202c      	movs	r0, #44	; 0x2c
 80029f6:	fb00 f303 	mul.w	r3, r0, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3360      	adds	r3, #96	; 0x60
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f005 fbbc 	bl	8008180 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a08:	e008      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3360      	adds	r3, #96	; 0x60
 8002a18:	2202      	movs	r2, #2
 8002a1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	6093      	str	r3, [r2, #8]
}
 8002a2e:	e19b      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a46:	d134      	bne.n	8002ab2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	0151      	lsls	r1, r2, #5
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	440a      	add	r2, r1
 8002a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 f9c7 	bl	8005e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	2310      	movs	r3, #16
 8002a88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3361      	adds	r3, #97	; 0x61
 8002aac:	2208      	movs	r2, #8
 8002aae:	701a      	strb	r2, [r3, #0]
}
 8002ab0:	e15a      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f040 814f 	bne.w	8002d68 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	0151      	lsls	r1, r2, #5
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	440a      	add	r2, r1
 8002ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae4:	f023 0302 	bic.w	r3, r3, #2
 8002ae8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3361      	adds	r3, #97	; 0x61
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d17d      	bne.n	8002bfa <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3360      	adds	r3, #96	; 0x60
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	333f      	adds	r3, #63	; 0x3f
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d00a      	beq.n	8002b3a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	333f      	adds	r3, #63	; 0x3f
 8002b32:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	f040 8100 	bne.w	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d113      	bne.n	8002b6a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3355      	adds	r3, #85	; 0x55
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	f083 0301 	eor.w	r3, r3, #1
 8002b56:	b2d8      	uxtb	r0, r3
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3355      	adds	r3, #85	; 0x55
 8002b66:	4602      	mov	r2, r0
 8002b68:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	f040 80e3 	bne.w	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	334c      	adds	r3, #76	; 0x4c
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80d8 	beq.w	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	334c      	adds	r3, #76	; 0x4c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	202c      	movs	r0, #44	; 0x2c
 8002ba0:	fb00 f202 	mul.w	r2, r0, r2
 8002ba4:	440a      	add	r2, r1
 8002ba6:	3240      	adds	r2, #64	; 0x40
 8002ba8:	8812      	ldrh	r2, [r2, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	3b01      	subs	r3, #1
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	202c      	movs	r0, #44	; 0x2c
 8002bb4:	fb00 f202 	mul.w	r2, r0, r2
 8002bb8:	440a      	add	r2, r1
 8002bba:	3240      	adds	r2, #64	; 0x40
 8002bbc:	8812      	ldrh	r2, [r2, #0]
 8002bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80b5 	beq.w	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3355      	adds	r3, #85	; 0x55
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f083 0301 	eor.w	r3, r3, #1
 8002be4:	b2d8      	uxtb	r0, r3
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3355      	adds	r3, #85	; 0x55
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	e09f      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3361      	adds	r3, #97	; 0x61
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d109      	bne.n	8002c22 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3360      	adds	r3, #96	; 0x60
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e08b      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3361      	adds	r3, #97	; 0x61
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d109      	bne.n	8002c4a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3360      	adds	r3, #96	; 0x60
 8002c44:	2202      	movs	r2, #2
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e077      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3361      	adds	r3, #97	; 0x61
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d109      	bne.n	8002c72 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3360      	adds	r3, #96	; 0x60
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e063      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3361      	adds	r3, #97	; 0x61
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d009      	beq.n	8002c9a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3361      	adds	r3, #97	; 0x61
 8002c94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d14f      	bne.n	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	335c      	adds	r3, #92	; 0x5c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	202c      	movs	r0, #44	; 0x2c
 8002cb2:	fb00 f303 	mul.w	r3, r0, r3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	335c      	adds	r3, #92	; 0x5c
 8002cba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	335c      	adds	r3, #92	; 0x5c
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d912      	bls.n	8002cf6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	335c      	adds	r3, #92	; 0x5c
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3360      	adds	r3, #96	; 0x60
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e021      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3360      	adds	r3, #96	; 0x60
 8002d04:	2202      	movs	r2, #2
 8002d06:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d1e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d26:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	461a      	mov	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2302      	movs	r3, #2
 8002d4a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	b2d9      	uxtb	r1, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	202c      	movs	r0, #44	; 0x2c
 8002d56:	fb00 f303 	mul.w	r3, r0, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3360      	adds	r3, #96	; 0x60
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f005 fa0c 	bl	8008180 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	0c5b      	lsrs	r3, r3, #17
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d004      	beq.n	8002db6 <HCD_RXQLVL_IRQHandler+0x46>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	f000 80a9 	beq.w	8002f06 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002db4:	e0aa      	b.n	8002f0c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80a6 	beq.w	8002f0a <HCD_RXQLVL_IRQHandler+0x19a>
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3344      	adds	r3, #68	; 0x44
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 809b 	beq.w	8002f0a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3350      	adds	r3, #80	; 0x50
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	441a      	add	r2, r3
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	202c      	movs	r0, #44	; 0x2c
 8002dee:	fb00 f303 	mul.w	r3, r0, r3
 8002df2:	440b      	add	r3, r1
 8002df4:	334c      	adds	r3, #76	; 0x4c
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d87a      	bhi.n	8002ef2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3344      	adds	r3, #68	; 0x44
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	b292      	uxth	r2, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	f002 fb6f 	bl	80054f8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3344      	adds	r3, #68	; 0x44
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	441a      	add	r2, r3
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	202c      	movs	r0, #44	; 0x2c
 8002e34:	fb00 f303 	mul.w	r3, r0, r3
 8002e38:	440b      	add	r3, r1
 8002e3a:	3344      	adds	r3, #68	; 0x44
 8002e3c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3350      	adds	r3, #80	; 0x50
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	441a      	add	r2, r3
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	202c      	movs	r0, #44	; 0x2c
 8002e58:	fb00 f303 	mul.w	r3, r0, r3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3350      	adds	r3, #80	; 0x50
 8002e60:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	0cdb      	lsrs	r3, r3, #19
 8002e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e76:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3340      	adds	r3, #64	; 0x40
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d13c      	bne.n	8002f0a <HCD_RXQLVL_IRQHandler+0x19a>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d039      	beq.n	8002f0a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eac:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eb4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3354      	adds	r3, #84	; 0x54
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f083 0301 	eor.w	r3, r3, #1
 8002edc:	b2d8      	uxtb	r0, r3
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3354      	adds	r3, #84	; 0x54
 8002eec:	4602      	mov	r2, r0
 8002eee:	701a      	strb	r2, [r3, #0]
      break;
 8002ef0:	e00b      	b.n	8002f0a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3360      	adds	r3, #96	; 0x60
 8002f00:	2204      	movs	r2, #4
 8002f02:	701a      	strb	r2, [r3, #0]
      break;
 8002f04:	e001      	b.n	8002f0a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f0a:	bf00      	nop
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d10b      	bne.n	8002f64 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f005 f8f6 	bl	8008148 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d132      	bne.n	8002fd4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d126      	bne.n	8002fce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d113      	bne.n	8002fb0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f92:	d106      	bne.n	8002fa2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2102      	movs	r1, #2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fc0c 	bl	80057b8 <USB_InitFSLSPClkSel>
 8002fa0:	e011      	b.n	8002fc6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fc05 	bl	80057b8 <USB_InitFSLSPClkSel>
 8002fae:	e00a      	b.n	8002fc6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d106      	bne.n	8002fc6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fc4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f005 f8e8 	bl	800819c <HAL_HCD_PortEnabled_Callback>
 8002fcc:	e002      	b.n	8002fd4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f005 f8f2 	bl	80081b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d103      	bne.n	8002fe6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f043 0320 	orr.w	r3, r3, #32
 8002fe4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fec:	461a      	mov	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e12b      	b.n	8003266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fd66 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800305e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003060:	f001 f9fc 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 8003064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4a81      	ldr	r2, [pc, #516]	; (8003270 <HAL_I2C_Init+0x274>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d807      	bhi.n	8003080 <HAL_I2C_Init+0x84>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a80      	ldr	r2, [pc, #512]	; (8003274 <HAL_I2C_Init+0x278>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e006      	b.n	800308e <HAL_I2C_Init+0x92>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a7d      	ldr	r2, [pc, #500]	; (8003278 <HAL_I2C_Init+0x27c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0e7      	b.n	8003266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a78      	ldr	r2, [pc, #480]	; (800327c <HAL_I2C_Init+0x280>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0c9b      	lsrs	r3, r3, #18
 80030a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a6a      	ldr	r2, [pc, #424]	; (8003270 <HAL_I2C_Init+0x274>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d802      	bhi.n	80030d0 <HAL_I2C_Init+0xd4>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3301      	adds	r3, #1
 80030ce:	e009      	b.n	80030e4 <HAL_I2C_Init+0xe8>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	4a69      	ldr	r2, [pc, #420]	; (8003280 <HAL_I2C_Init+0x284>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	3301      	adds	r3, #1
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	495c      	ldr	r1, [pc, #368]	; (8003270 <HAL_I2C_Init+0x274>)
 8003100:	428b      	cmp	r3, r1
 8003102:	d819      	bhi.n	8003138 <HAL_I2C_Init+0x13c>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e59      	subs	r1, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003112:	1c59      	adds	r1, r3, #1
 8003114:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003118:	400b      	ands	r3, r1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_I2C_Init+0x138>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1e59      	subs	r1, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fbb1 f3f3 	udiv	r3, r1, r3
 800312c:	3301      	adds	r3, #1
 800312e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003132:	e051      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003134:	2304      	movs	r3, #4
 8003136:	e04f      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d111      	bne.n	8003164 <HAL_I2C_Init+0x168>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1e58      	subs	r0, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e012      	b.n	800318a <HAL_I2C_Init+0x18e>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Init+0x196>
 800318e:	2301      	movs	r3, #1
 8003190:	e022      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10e      	bne.n	80031b8 <HAL_I2C_Init+0x1bc>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e58      	subs	r0, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	440b      	add	r3, r1
 80031a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b6:	e00f      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	0099      	lsls	r1, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	6809      	ldr	r1, [r1, #0]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6911      	ldr	r1, [r2, #16]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68d2      	ldr	r2, [r2, #12]
 8003212:	4311      	orrs	r1, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	000186a0 	.word	0x000186a0
 8003274:	001e847f 	.word	0x001e847f
 8003278:	003d08ff 	.word	0x003d08ff
 800327c:	431bde83 	.word	0x431bde83
 8003280:	10624dd3 	.word	0x10624dd3

08003284 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e128      	b.n	80034e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a90      	ldr	r2, [pc, #576]	; (80034f0 <HAL_I2S_Init+0x26c>)
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fd fc67 	bl	8000b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032cc:	f023 030f 	bic.w	r3, r3, #15
 80032d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2202      	movs	r2, #2
 80032d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d060      	beq.n	80033a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032ea:	2310      	movs	r3, #16
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e001      	b.n	80032f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032f0:	2320      	movs	r3, #32
 80032f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d802      	bhi.n	8003302 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003302:	2001      	movs	r0, #1
 8003304:	f001 f9a0 	bl	8004648 <HAL_RCCEx_GetPeriphCLKFreq>
 8003308:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003312:	d125      	bne.n	8003360 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	fbb2 f2f3 	udiv	r2, r2, r3
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	3305      	adds	r3, #5
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	e01f      	b.n	800337e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	fbb2 f2f3 	udiv	r2, r2, r3
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	461a      	mov	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	3305      	adds	r3, #5
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	e00e      	b.n	800337e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	fbb2 f2f3 	udiv	r2, r2, r3
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	461a      	mov	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	3305      	adds	r3, #5
 800337c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4a5c      	ldr	r2, [pc, #368]	; (80034f4 <HAL_I2S_Init+0x270>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	08db      	lsrs	r3, r3, #3
 8003388:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	e003      	b.n	80033ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033a4:	2302      	movs	r3, #2
 80033a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d902      	bls.n	80033b8 <HAL_I2S_Init+0x134>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2bff      	cmp	r3, #255	; 0xff
 80033b6:	d907      	bls.n	80033c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	f043 0210 	orr.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e08f      	b.n	80034e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	ea42 0103 	orr.w	r1, r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	430a      	orrs	r2, r1
 80033da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033e6:	f023 030f 	bic.w	r3, r3, #15
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6851      	ldr	r1, [r2, #4]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6892      	ldr	r2, [r2, #8]
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68d2      	ldr	r2, [r2, #12]
 80033f8:	4311      	orrs	r1, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6992      	ldr	r2, [r2, #24]
 80033fe:	430a      	orrs	r2, r1
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800340a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d161      	bne.n	80034d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a38      	ldr	r2, [pc, #224]	; (80034f8 <HAL_I2S_Init+0x274>)
 8003418:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a37      	ldr	r2, [pc, #220]	; (80034fc <HAL_I2S_Init+0x278>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d101      	bne.n	8003428 <HAL_I2S_Init+0x1a4>
 8003424:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_I2S_Init+0x27c>)
 8003426:	e001      	b.n	800342c <HAL_I2S_Init+0x1a8>
 8003428:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4932      	ldr	r1, [pc, #200]	; (80034fc <HAL_I2S_Init+0x278>)
 8003434:	428a      	cmp	r2, r1
 8003436:	d101      	bne.n	800343c <HAL_I2S_Init+0x1b8>
 8003438:	4a31      	ldr	r2, [pc, #196]	; (8003500 <HAL_I2S_Init+0x27c>)
 800343a:	e001      	b.n	8003440 <HAL_I2S_Init+0x1bc>
 800343c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003440:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003444:	f023 030f 	bic.w	r3, r3, #15
 8003448:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <HAL_I2S_Init+0x278>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_I2S_Init+0x1d4>
 8003454:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_I2S_Init+0x27c>)
 8003456:	e001      	b.n	800345c <HAL_I2S_Init+0x1d8>
 8003458:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800345c:	2202      	movs	r2, #2
 800345e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a25      	ldr	r2, [pc, #148]	; (80034fc <HAL_I2S_Init+0x278>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_I2S_Init+0x1ea>
 800346a:	4b25      	ldr	r3, [pc, #148]	; (8003500 <HAL_I2S_Init+0x27c>)
 800346c:	e001      	b.n	8003472 <HAL_I2S_Init+0x1ee>
 800346e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347e:	d003      	beq.n	8003488 <HAL_I2S_Init+0x204>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	e001      	b.n	8003494 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800349e:	4313      	orrs	r3, r2
 80034a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034b2:	4313      	orrs	r3, r2
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	897b      	ldrh	r3, [r7, #10]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <HAL_I2S_Init+0x278>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_I2S_Init+0x24c>
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <HAL_I2S_Init+0x27c>)
 80034ce:	e001      	b.n	80034d4 <HAL_I2S_Init+0x250>
 80034d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d4:	897a      	ldrh	r2, [r7, #10]
 80034d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	080035fb 	.word	0x080035fb
 80034f4:	cccccccd 	.word	0xcccccccd
 80034f8:	08003711 	.word	0x08003711
 80034fc:	40003800 	.word	0x40003800
 8003500:	40003400 	.word	0x40003400

08003504 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	881a      	ldrh	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	1c9a      	adds	r2, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10e      	bne.n	8003594 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003584:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ffb8 	bl	8003504 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	b292      	uxth	r2, r2
 80035b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	1c9a      	adds	r2, r3, #2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10e      	bne.n	80035f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ff93 	bl	8003518 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b04      	cmp	r3, #4
 8003614:	d13a      	bne.n	800368c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d109      	bne.n	8003634 <I2S_IRQHandler+0x3a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d102      	bne.n	8003634 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffb4 	bl	800359c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d126      	bne.n	800368c <I2S_IRQHandler+0x92>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b20      	cmp	r3, #32
 800364a:	d11f      	bne.n	800368c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800365a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ff50 	bl	800352c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b03      	cmp	r3, #3
 8003696:	d136      	bne.n	8003706 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d109      	bne.n	80036b6 <I2S_IRQHandler+0xbc>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ac:	2b80      	cmp	r3, #128	; 0x80
 80036ae:	d102      	bne.n	80036b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff45 	bl	8003540 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d122      	bne.n	8003706 <I2S_IRQHandler+0x10c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d11b      	bne.n	8003706 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff13 	bl	800352c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003706:	bf00      	nop
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4aa2      	ldr	r2, [pc, #648]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d101      	bne.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800372a:	4ba2      	ldr	r3, [pc, #648]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800372c:	e001      	b.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800372e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a9b      	ldr	r2, [pc, #620]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003748:	4b9a      	ldr	r3, [pc, #616]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800374a:	e001      	b.n	8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800374c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375c:	d004      	beq.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f040 8099 	bne.w	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d107      	bne.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f925 	bl	80039cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9c8 	bl	8003b2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d13a      	bne.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d035      	beq.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a7e      	ldr	r2, [pc, #504]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037ba:	4b7e      	ldr	r3, [pc, #504]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037bc:	e001      	b.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4979      	ldr	r1, [pc, #484]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ca:	428b      	cmp	r3, r1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037ce:	4b79      	ldr	r3, [pc, #484]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037d0:	e001      	b.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0202 	orr.w	r2, r3, #2
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fe88 	bl	800352c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	f040 80be 	bne.w	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80b8 	beq.w	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003842:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a59      	ldr	r2, [pc, #356]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800384e:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003850:	e001      	b.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4954      	ldr	r1, [pc, #336]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800385e:	428b      	cmp	r3, r1
 8003860:	d101      	bne.n	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003862:	4b54      	ldr	r3, [pc, #336]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003864:	e001      	b.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003866:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800386a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800386e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f043 0204 	orr.w	r2, r3, #4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fe4a 	bl	800352c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003898:	e084      	b.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d107      	bne.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8be 	bl	8003a30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d107      	bne.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8fd 	bl	8003ac8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d12f      	bne.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d02a      	beq.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2e      	ldr	r2, [pc, #184]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038fc:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038fe:	e001      	b.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4929      	ldr	r1, [pc, #164]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800390c:	428b      	cmp	r3, r1
 800390e:	d101      	bne.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003910:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003912:	e001      	b.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800391c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f043 0202 	orr.w	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fdfa 	bl	800352c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b08      	cmp	r3, #8
 8003940:	d131      	bne.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02c      	beq.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003958:	e001      	b.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800395a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4912      	ldr	r1, [pc, #72]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003966:	428b      	cmp	r3, r1
 8003968:	d101      	bne.n	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800396c:	e001      	b.n	8003972 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800396e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003972:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003976:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003986:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f043 0204 	orr.w	r2, r3, #4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fdc5 	bl	800352c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039a2:	e000      	b.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039a4:	bf00      	nop
}
 80039a6:	bf00      	nop
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40003800 	.word	0x40003800
 80039b4:	40003400 	.word	0x40003400

080039b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c99      	adds	r1, r3, #2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6251      	str	r1, [r2, #36]	; 0x24
 80039de:	881a      	ldrh	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d113      	bne.n	8003a26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ffc9 	bl	80039b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	1c99      	adds	r1, r3, #2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6251      	str	r1, [r2, #36]	; 0x24
 8003a42:	8819      	ldrh	r1, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <I2SEx_TxISR_I2SExt+0x22>
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a50:	e001      	b.n	8003a56 <I2SEx_TxISR_I2SExt+0x26>
 8003a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a56:	460a      	mov	r2, r1
 8003a58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d121      	bne.n	8003ab6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a12      	ldr	r2, [pc, #72]	; (8003ac0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <I2SEx_TxISR_I2SExt+0x50>
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a7e:	e001      	b.n	8003a84 <I2SEx_TxISR_I2SExt+0x54>
 8003a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	490d      	ldr	r1, [pc, #52]	; (8003ac0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	d101      	bne.n	8003a94 <I2SEx_TxISR_I2SExt+0x64>
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a92:	e001      	b.n	8003a98 <I2SEx_TxISR_I2SExt+0x68>
 8003a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff81 	bl	80039b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40003800 	.word	0x40003800
 8003ac4:	40003400 	.word	0x40003400

08003ac8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68d8      	ldr	r0, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	1c99      	adds	r1, r3, #2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ae0:	b282      	uxth	r2, r0
 8003ae2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d113      	bne.n	8003b24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ff4a 	bl	80039b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <I2SEx_RxISR_I2SExt+0x90>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <I2SEx_RxISR_I2SExt+0x16>
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b40:	e001      	b.n	8003b46 <I2SEx_RxISR_I2SExt+0x1a>
 8003b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b46:	68d8      	ldr	r0, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	1c99      	adds	r1, r3, #2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b52:	b282      	uxth	r2, r0
 8003b54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d121      	bne.n	8003bb2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <I2SEx_RxISR_I2SExt+0x90>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <I2SEx_RxISR_I2SExt+0x50>
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b7a:	e001      	b.n	8003b80 <I2SEx_RxISR_I2SExt+0x54>
 8003b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	490d      	ldr	r1, [pc, #52]	; (8003bbc <I2SEx_RxISR_I2SExt+0x90>)
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d101      	bne.n	8003b90 <I2SEx_RxISR_I2SExt+0x64>
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b8e:	e001      	b.n	8003b94 <I2SEx_RxISR_I2SExt+0x68>
 8003b90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff03 	bl	80039b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40003800 	.word	0x40003800
 8003bc0:	40003400 	.word	0x40003400

08003bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e264      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d075      	beq.n	8003cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be2:	4ba3      	ldr	r3, [pc, #652]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d00c      	beq.n	8003c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bee:	4ba0      	ldr	r3, [pc, #640]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d112      	bne.n	8003c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4b9d      	ldr	r3, [pc, #628]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	4b99      	ldr	r3, [pc, #612]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d05b      	beq.n	8003ccc <HAL_RCC_OscConfig+0x108>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d157      	bne.n	8003ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e23f      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d106      	bne.n	8003c38 <HAL_RCC_OscConfig+0x74>
 8003c2a:	4b91      	ldr	r3, [pc, #580]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a90      	ldr	r2, [pc, #576]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e01d      	b.n	8003c74 <HAL_RCC_OscConfig+0xb0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x98>
 8003c42:	4b8b      	ldr	r3, [pc, #556]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a8a      	ldr	r2, [pc, #552]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a87      	ldr	r2, [pc, #540]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0xb0>
 8003c5c:	4b84      	ldr	r3, [pc, #528]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a83      	ldr	r2, [pc, #524]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b81      	ldr	r3, [pc, #516]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a80      	ldr	r2, [pc, #512]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fd f956 	bl	8000f2c <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fd f952 	bl	8000f2c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e204      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0xc0>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd f942 	bl	8000f2c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fd f93e 	bl	8000f2c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1f0      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0xe8>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d063      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cda:	4b65      	ldr	r3, [pc, #404]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d11c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b5f      	ldr	r3, [pc, #380]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	4b5c      	ldr	r3, [pc, #368]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x152>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1c4      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b56      	ldr	r3, [pc, #344]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4952      	ldr	r1, [pc, #328]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	e03a      	b.n	8003da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <HAL_RCC_OscConfig+0x2b0>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fd f8f7 	bl	8000f2c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fd f8f3 	bl	8000f2c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1a5      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4940      	ldr	r1, [pc, #256]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
 8003d74:	e015      	b.n	8003da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <HAL_RCC_OscConfig+0x2b0>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd f8d6 	bl	8000f2c <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d84:	f7fd f8d2 	bl	8000f2c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e184      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d030      	beq.n	8003e10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db6:	4b30      	ldr	r3, [pc, #192]	; (8003e78 <HAL_RCC_OscConfig+0x2b4>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fd f8b6 	bl	8000f2c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fd f8b2 	bl	8000f2c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e164      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x200>
 8003de2:	e015      	b.n	8003e10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de4:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_OscConfig+0x2b4>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dea:	f7fd f89f 	bl	8000f2c <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fd f89b 	bl	8000f2c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e14d      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a0 	beq.w	8003f5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a0e      	ldr	r2, [pc, #56]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_OscConfig+0x2b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d121      	bne.n	8003e9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_RCC_OscConfig+0x2b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_RCC_OscConfig+0x2b8>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fd f861 	bl	8000f2c <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e011      	b.n	8003e92 <HAL_RCC_OscConfig+0x2ce>
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	42470000 	.word	0x42470000
 8003e78:	42470e80 	.word	0x42470e80
 8003e7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e80:	f7fd f854 	bl	8000f2c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e106      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e92:	4b85      	ldr	r3, [pc, #532]	; (80040a8 <HAL_RCC_OscConfig+0x4e4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2f0>
 8003ea6:	4b81      	ldr	r3, [pc, #516]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a80      	ldr	r2, [pc, #512]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	e01c      	b.n	8003eee <HAL_RCC_OscConfig+0x32a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d10c      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x312>
 8003ebc:	4b7b      	ldr	r3, [pc, #492]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a7a      	ldr	r2, [pc, #488]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003ec2:	f043 0304 	orr.w	r3, r3, #4
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	4b78      	ldr	r3, [pc, #480]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a77      	ldr	r2, [pc, #476]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	e00b      	b.n	8003eee <HAL_RCC_OscConfig+0x32a>
 8003ed6:	4b75      	ldr	r3, [pc, #468]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a74      	ldr	r2, [pc, #464]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	4b72      	ldr	r3, [pc, #456]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a71      	ldr	r2, [pc, #452]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003ee8:	f023 0304 	bic.w	r3, r3, #4
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d015      	beq.n	8003f22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fd f819 	bl	8000f2c <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fd f815 	bl	8000f2c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0c5      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	4b65      	ldr	r3, [pc, #404]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ee      	beq.n	8003efe <HAL_RCC_OscConfig+0x33a>
 8003f20:	e014      	b.n	8003f4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f22:	f7fd f803 	bl	8000f2c <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fc ffff 	bl	8000f2c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0af      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f40:	4b5a      	ldr	r3, [pc, #360]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ee      	bne.n	8003f2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f52:	4b56      	ldr	r3, [pc, #344]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4a55      	ldr	r2, [pc, #340]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 809b 	beq.w	800409e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f68:	4b50      	ldr	r3, [pc, #320]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d05c      	beq.n	800402e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d141      	bne.n	8004000 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b4c      	ldr	r3, [pc, #304]	; (80040b0 <HAL_RCC_OscConfig+0x4ec>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f82:	f7fc ffd3 	bl	8000f2c <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fc ffcf 	bl	8000f2c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e081      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9c:	4b43      	ldr	r3, [pc, #268]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	019b      	lsls	r3, r3, #6
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	061b      	lsls	r3, r3, #24
 8003fcc:	4937      	ldr	r1, [pc, #220]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd2:	4b37      	ldr	r3, [pc, #220]	; (80040b0 <HAL_RCC_OscConfig+0x4ec>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7fc ffa8 	bl	8000f2c <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fc ffa4 	bl	8000f2c <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e056      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x41c>
 8003ffe:	e04e      	b.n	800409e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004000:	4b2b      	ldr	r3, [pc, #172]	; (80040b0 <HAL_RCC_OscConfig+0x4ec>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fc ff91 	bl	8000f2c <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400e:	f7fc ff8d 	bl	8000f2c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e03f      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004020:	4b22      	ldr	r3, [pc, #136]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x44a>
 800402c:	e037      	b.n	800409e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e032      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800403a:	4b1c      	ldr	r3, [pc, #112]	; (80040ac <HAL_RCC_OscConfig+0x4e8>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d028      	beq.n	800409a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d121      	bne.n	800409a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d11a      	bne.n	800409a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800406a:	4013      	ands	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004070:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004072:	4293      	cmp	r3, r2
 8004074:	d111      	bne.n	800409a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	3b01      	subs	r3, #1
 8004084:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d107      	bne.n	800409a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40007000 	.word	0x40007000
 80040ac:	40023800 	.word	0x40023800
 80040b0:	42470060 	.word	0x42470060

080040b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0cc      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b68      	ldr	r3, [pc, #416]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d90c      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b65      	ldr	r3, [pc, #404]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b63      	ldr	r3, [pc, #396]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0b8      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d020      	beq.n	800413e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004108:	4b59      	ldr	r3, [pc, #356]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a58      	ldr	r2, [pc, #352]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004120:	4b53      	ldr	r3, [pc, #332]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a52      	ldr	r2, [pc, #328]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800412a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412c:	4b50      	ldr	r3, [pc, #320]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	494d      	ldr	r1, [pc, #308]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d044      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d119      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e07f      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d003      	beq.n	8004172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	2b03      	cmp	r3, #3
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004172:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e06f      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004182:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e067      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004192:	4b37      	ldr	r3, [pc, #220]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 0203 	bic.w	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	4934      	ldr	r1, [pc, #208]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a4:	f7fc fec2 	bl	8000f2c <HAL_GetTick>
 80041a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041aa:	e00a      	b.n	80041c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ac:	f7fc febe 	bl	8000f2c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e04f      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 020c 	and.w	r2, r3, #12
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d1eb      	bne.n	80041ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d4:	4b25      	ldr	r3, [pc, #148]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d20c      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b22      	ldr	r3, [pc, #136]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b20      	ldr	r3, [pc, #128]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e032      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4916      	ldr	r1, [pc, #88]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	490e      	ldr	r1, [pc, #56]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800423a:	f000 f821 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 800423e:	4602      	mov	r2, r0
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	490a      	ldr	r1, [pc, #40]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 800424c:	5ccb      	ldrb	r3, [r1, r3]
 800424e:	fa22 f303 	lsr.w	r3, r2, r3
 8004252:	4a09      	ldr	r2, [pc, #36]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_RCC_ClockConfig+0x1c8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fc fe22 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023c00 	.word	0x40023c00
 8004270:	40023800 	.word	0x40023800
 8004274:	080087ec 	.word	0x080087ec
 8004278:	20000000 	.word	0x20000000
 800427c:	20000004 	.word	0x20000004

08004280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	607b      	str	r3, [r7, #4]
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	2300      	movs	r3, #0
 8004292:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004298:	4b67      	ldr	r3, [pc, #412]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d00d      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x40>
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	f200 80bd 	bhi.w	8004424 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x34>
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0x3a>
 80042b2:	e0b7      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b4:	4b61      	ldr	r3, [pc, #388]	; (800443c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042b6:	60bb      	str	r3, [r7, #8]
       break;
 80042b8:	e0b7      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ba:	4b61      	ldr	r3, [pc, #388]	; (8004440 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042bc:	60bb      	str	r3, [r7, #8]
      break;
 80042be:	e0b4      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c0:	4b5d      	ldr	r3, [pc, #372]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ca:	4b5b      	ldr	r3, [pc, #364]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04d      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d6:	4b58      	ldr	r3, [pc, #352]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	461a      	mov	r2, r3
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042e6:	f04f 0100 	mov.w	r1, #0
 80042ea:	ea02 0800 	and.w	r8, r2, r0
 80042ee:	ea03 0901 	and.w	r9, r3, r1
 80042f2:	4640      	mov	r0, r8
 80042f4:	4649      	mov	r1, r9
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	014b      	lsls	r3, r1, #5
 8004300:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004304:	0142      	lsls	r2, r0, #5
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	ebb0 0008 	subs.w	r0, r0, r8
 800430e:	eb61 0109 	sbc.w	r1, r1, r9
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	018b      	lsls	r3, r1, #6
 800431c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004320:	0182      	lsls	r2, r0, #6
 8004322:	1a12      	subs	r2, r2, r0
 8004324:	eb63 0301 	sbc.w	r3, r3, r1
 8004328:	f04f 0000 	mov.w	r0, #0
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	00d9      	lsls	r1, r3, #3
 8004332:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004336:	00d0      	lsls	r0, r2, #3
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	eb12 0208 	adds.w	r2, r2, r8
 8004340:	eb43 0309 	adc.w	r3, r3, r9
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	0259      	lsls	r1, r3, #9
 800434e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004352:	0250      	lsls	r0, r2, #9
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4610      	mov	r0, r2
 800435a:	4619      	mov	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	461a      	mov	r2, r3
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f7fb ff30 	bl	80001c8 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	e04a      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	461a      	mov	r2, r3
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	ea02 0400 	and.w	r4, r2, r0
 800438a:	ea03 0501 	and.w	r5, r3, r1
 800438e:	4620      	mov	r0, r4
 8004390:	4629      	mov	r1, r5
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	014b      	lsls	r3, r1, #5
 800439c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043a0:	0142      	lsls	r2, r0, #5
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	1b00      	subs	r0, r0, r4
 80043a8:	eb61 0105 	sbc.w	r1, r1, r5
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	018b      	lsls	r3, r1, #6
 80043b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ba:	0182      	lsls	r2, r0, #6
 80043bc:	1a12      	subs	r2, r2, r0
 80043be:	eb63 0301 	sbc.w	r3, r3, r1
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	00d9      	lsls	r1, r3, #3
 80043cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043d0:	00d0      	lsls	r0, r2, #3
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	1912      	adds	r2, r2, r4
 80043d8:	eb45 0303 	adc.w	r3, r5, r3
 80043dc:	f04f 0000 	mov.w	r0, #0
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	0299      	lsls	r1, r3, #10
 80043e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ea:	0290      	lsls	r0, r2, #10
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	f7fb fee4 	bl	80001c8 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	3301      	adds	r3, #1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	60bb      	str	r3, [r7, #8]
      break;
 8004422:	e002      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004426:	60bb      	str	r3, [r7, #8]
      break;
 8004428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442a:	68bb      	ldr	r3, [r7, #8]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	00f42400 	.word	0x00f42400
 8004440:	007a1200 	.word	0x007a1200

08004444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_GetHCLKFreq+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000000 	.word	0x20000000

0800445c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004460:	f7ff fff0 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0a9b      	lsrs	r3, r3, #10
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	080087fc 	.word	0x080087fc

08004484 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d105      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d035      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044ac:	4b62      	ldr	r3, [pc, #392]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044b2:	f7fc fd3b 	bl	8000f2c <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044ba:	f7fc fd37 	bl	8000f2c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e0b0      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044cc:	4b5b      	ldr	r3, [pc, #364]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f0      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	019a      	lsls	r2, r3, #6
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	071b      	lsls	r3, r3, #28
 80044e4:	4955      	ldr	r1, [pc, #340]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ec:	4b52      	ldr	r3, [pc, #328]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044f2:	f7fc fd1b 	bl	8000f2c <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044fa:	f7fc fd17 	bl	8000f2c <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e090      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800450c:	4b4b      	ldr	r3, [pc, #300]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8083 	beq.w	800462c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	4b44      	ldr	r3, [pc, #272]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	4a43      	ldr	r2, [pc, #268]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004534:	6413      	str	r3, [r2, #64]	; 0x40
 8004536:	4b41      	ldr	r3, [pc, #260]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004542:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3e      	ldr	r2, [pc, #248]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800454e:	f7fc fced 	bl	8000f2c <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004556:	f7fc fce9 	bl	8000f2c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e062      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004568:	4b35      	ldr	r3, [pc, #212]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004574:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02f      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	429a      	cmp	r2, r3
 8004590:	d028      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004592:	4b2a      	ldr	r3, [pc, #168]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800459c:	4b29      	ldr	r3, [pc, #164]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045a2:	4b28      	ldr	r3, [pc, #160]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045a8:	4a24      	ldr	r2, [pc, #144]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045ae:	4b23      	ldr	r3, [pc, #140]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d114      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fc fcb7 	bl	8000f2c <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fc fcb3 	bl	8000f2c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e02a      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	4b18      	ldr	r3, [pc, #96]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ee      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f0:	d10d      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004606:	490d      	ldr	r1, [pc, #52]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]
 800460c:	e005      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004614:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004618:	6093      	str	r3, [r2, #8]
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004626:	4905      	ldr	r1, [pc, #20]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	42470068 	.word	0x42470068
 800463c:	40023800 	.word	0x40023800
 8004640:	40007000 	.word	0x40007000
 8004644:	42470e40 	.word	0x42470e40

08004648 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d13e      	bne.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004666:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d12f      	bne.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800467c:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800467e:	617b      	str	r3, [r7, #20]
          break;
 8004680:	e02f      	b.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468e:	d108      	bne.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004698:	4a18      	ldr	r2, [pc, #96]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	e007      	b.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046aa:	4a15      	ldr	r2, [pc, #84]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	099b      	lsrs	r3, r3, #6
 80046ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046cc:	0f1b      	lsrs	r3, r3, #28
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]
          break;
 80046da:	e002      	b.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
          break;
 80046e0:	bf00      	nop
        }
      }
      break;
 80046e2:	bf00      	nop
    }
  }
  return frequency;
 80046e4:	697b      	ldr	r3, [r7, #20]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800
 80046f8:	00bb8000 	.word	0x00bb8000
 80046fc:	007a1200 	.word	0x007a1200
 8004700:	00f42400 	.word	0x00f42400

08004704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e07b      	b.n	800480e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d108      	bne.n	8004730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d009      	beq.n	800473c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	61da      	str	r2, [r3, #28]
 800472e:	e005      	b.n	800473c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc fa94 	bl	8000c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004772:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c0:	ea42 0103 	orr.w	r1, r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	f003 0104 	and.w	r1, r3, #4
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0210 	and.w	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b088      	sub	sp, #32
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_SPI_Transmit+0x22>
 8004834:	2302      	movs	r3, #2
 8004836:	e126      	b.n	8004a86 <HAL_SPI_Transmit+0x270>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004840:	f7fc fb74 	bl	8000f2c <HAL_GetTick>
 8004844:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b01      	cmp	r3, #1
 8004854:	d002      	beq.n	800485c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
    goto error;
 800485a:	e10b      	b.n	8004a74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_SPI_Transmit+0x52>
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800486c:	e102      	b.n	8004a74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2203      	movs	r2, #3
 8004872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	d10f      	bne.n	80048d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d007      	beq.n	80048f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fc:	d14b      	bne.n	8004996 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_SPI_Transmit+0xf6>
 8004906:	8afb      	ldrh	r3, [r7, #22]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d13e      	bne.n	800498a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	881a      	ldrh	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	1c9a      	adds	r2, r3, #2
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004930:	e02b      	b.n	800498a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d112      	bne.n	8004966 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	86da      	strh	r2, [r3, #54]	; 0x36
 8004964:	e011      	b.n	800498a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004966:	f7fc fae1 	bl	8000f2c <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d803      	bhi.n	800497e <HAL_SPI_Transmit+0x168>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d102      	bne.n	8004984 <HAL_SPI_Transmit+0x16e>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004988:	e074      	b.n	8004a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1ce      	bne.n	8004932 <HAL_SPI_Transmit+0x11c>
 8004994:	e04c      	b.n	8004a30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_SPI_Transmit+0x18e>
 800499e:	8afb      	ldrh	r3, [r7, #22]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d140      	bne.n	8004a26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	7812      	ldrb	r2, [r2, #0]
 80049b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049ca:	e02c      	b.n	8004a26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d113      	bne.n	8004a02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	7812      	ldrb	r2, [r2, #0]
 80049e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a00:	e011      	b.n	8004a26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a02:	f7fc fa93 	bl	8000f2c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d803      	bhi.n	8004a1a <HAL_SPI_Transmit+0x204>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Transmit+0x20a>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a24:	e026      	b.n	8004a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1cd      	bne.n	80049cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fbcb 	bl	80051d0 <SPI_EndRxTxTransaction>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e000      	b.n	8004a74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b088      	sub	sp, #32
 8004a92:	af02      	add	r7, sp, #8
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aaa:	d112      	bne.n	8004ad2 <HAL_SPI_Receive+0x44>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10e      	bne.n	8004ad2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f8f1 	bl	8004cb0 <HAL_SPI_TransmitReceive>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	e0ea      	b.n	8004ca8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_SPI_Receive+0x52>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e0e3      	b.n	8004ca8 <HAL_SPI_Receive+0x21a>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae8:	f7fc fa20 	bl	8000f2c <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
 8004afc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004afe:	e0ca      	b.n	8004c96 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_SPI_Receive+0x7e>
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b10:	e0c1      	b.n	8004c96 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2204      	movs	r2, #4
 8004b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	88fa      	ldrh	r2, [r7, #6]
 8004b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b58:	d10f      	bne.n	8004b7a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d007      	beq.n	8004b98 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d162      	bne.n	8004c66 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ba0:	e02e      	b.n	8004c00 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d115      	bne.n	8004bdc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f103 020c 	add.w	r2, r3, #12
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	7812      	ldrb	r2, [r2, #0]
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bda:	e011      	b.n	8004c00 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bdc:	f7fc f9a6 	bl	8000f2c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d803      	bhi.n	8004bf4 <HAL_SPI_Receive+0x166>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d102      	bne.n	8004bfa <HAL_SPI_Receive+0x16c>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bfe:	e04a      	b.n	8004c96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1cb      	bne.n	8004ba2 <HAL_SPI_Receive+0x114>
 8004c0a:	e031      	b.n	8004c70 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d113      	bne.n	8004c42 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	b292      	uxth	r2, r2
 8004c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c40:	e011      	b.n	8004c66 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c42:	f7fc f973 	bl	8000f2c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d803      	bhi.n	8004c5a <HAL_SPI_Receive+0x1cc>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d102      	bne.n	8004c60 <HAL_SPI_Receive+0x1d2>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c64:	e017      	b.n	8004c96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1cd      	bne.n	8004c0c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	6839      	ldr	r1, [r7, #0]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fa45 	bl	8005104 <SPI_EndRxTransaction>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
 8004c92:	e000      	b.n	8004c96 <HAL_SPI_Receive+0x208>
  }

error :
 8004c94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	; 0x30
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x26>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e18a      	b.n	8004fec <HAL_SPI_TransmitReceive+0x33c>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cde:	f7fc f925 	bl	8000f2c <HAL_GetTick>
 8004ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d00f      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x70>
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d06:	d107      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x68>
 8004d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d003      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d1e:	e15b      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x82>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x82>
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d38:	e14e      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d003      	beq.n	8004d4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2205      	movs	r2, #5
 8004d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	887a      	ldrh	r2, [r7, #2]
 8004d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	887a      	ldrh	r2, [r7, #2]
 8004d64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	887a      	ldrh	r2, [r7, #2]
 8004d76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d007      	beq.n	8004da2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004daa:	d178      	bne.n	8004e9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x10a>
 8004db4:	8b7b      	ldrh	r3, [r7, #26]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d166      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	881a      	ldrh	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	1c9a      	adds	r2, r3, #2
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dde:	e053      	b.n	8004e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d11b      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x176>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d016      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x176>
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d113      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	881a      	ldrh	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	1c9a      	adds	r2, r3, #2
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d119      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x1b8>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d014      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	b292      	uxth	r2, r2
 8004e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	1c9a      	adds	r2, r3, #2
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e64:	2301      	movs	r3, #1
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e68:	f7fc f860 	bl	8000f2c <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d807      	bhi.n	8004e88 <HAL_SPI_TransmitReceive+0x1d8>
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d003      	beq.n	8004e88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e86:	e0a7      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1a6      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x130>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1a1      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x130>
 8004e9c:	e07c      	b.n	8004f98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x1fc>
 8004ea6:	8b7b      	ldrh	r3, [r7, #26]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d16b      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	7812      	ldrb	r2, [r2, #0]
 8004eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed2:	e057      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d11c      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x26c>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d017      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x26c>
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d114      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330c      	adds	r3, #12
 8004efc:	7812      	ldrb	r2, [r2, #0]
 8004efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d119      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x2ae>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d014      	beq.n	8004f5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f5e:	f7fb ffe5 	bl	8000f2c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d803      	bhi.n	8004f76 <HAL_SPI_TransmitReceive+0x2c6>
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d102      	bne.n	8004f7c <HAL_SPI_TransmitReceive+0x2cc>
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d103      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f82:	e029      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1a2      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x224>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d19d      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f917 	bl	80051d0 <SPI_EndRxTxTransaction>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d006      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fb4:	e010      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10b      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	e000      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3730      	adds	r7, #48	; 0x30
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005004:	f7fb ff92 	bl	8000f2c <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	4413      	add	r3, r2
 8005012:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005014:	f7fb ff8a 	bl	8000f2c <HAL_GetTick>
 8005018:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800501a:	4b39      	ldr	r3, [pc, #228]	; (8005100 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	015b      	lsls	r3, r3, #5
 8005020:	0d1b      	lsrs	r3, r3, #20
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800502a:	e054      	b.n	80050d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d050      	beq.n	80050d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005034:	f7fb ff7a 	bl	8000f2c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	429a      	cmp	r2, r3
 8005042:	d902      	bls.n	800504a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d13d      	bne.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005058:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005062:	d111      	bne.n	8005088 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506c:	d004      	beq.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005076:	d107      	bne.n	8005088 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005086:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005090:	d10f      	bne.n	80050b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e017      	b.n	80050f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4013      	ands	r3, r2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d19b      	bne.n	800502c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000000 	.word	0x20000000

08005104 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005118:	d111      	bne.n	800513e <SPI_EndRxTransaction+0x3a>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005122:	d004      	beq.n	800512e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512c:	d107      	bne.n	800513e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800513c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005146:	d12a      	bne.n	800519e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005150:	d012      	beq.n	8005178 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2200      	movs	r2, #0
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f7ff ff49 	bl	8004ff4 <SPI_WaitFlagStateUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02d      	beq.n	80051c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e026      	b.n	80051c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2200      	movs	r2, #0
 8005180:	2101      	movs	r1, #1
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff ff36 	bl	8004ff4 <SPI_WaitFlagStateUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01a      	beq.n	80051c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e013      	b.n	80051c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2101      	movs	r1, #1
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff ff23 	bl	8004ff4 <SPI_WaitFlagStateUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e000      	b.n	80051c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <SPI_EndRxTxTransaction+0x7c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1b      	ldr	r2, [pc, #108]	; (8005250 <SPI_EndRxTxTransaction+0x80>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	0d5b      	lsrs	r3, r3, #21
 80051e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fa:	d112      	bne.n	8005222 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2200      	movs	r2, #0
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff fef4 	bl	8004ff4 <SPI_WaitFlagStateUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d016      	beq.n	8005240 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005216:	f043 0220 	orr.w	r2, r3, #32
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e00f      	b.n	8005242 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3b01      	subs	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d0f2      	beq.n	8005222 <SPI_EndRxTxTransaction+0x52>
 800523c:	e000      	b.n	8005240 <SPI_EndRxTxTransaction+0x70>
        break;
 800523e:	bf00      	nop
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000000 	.word	0x20000000
 8005250:	165e9f81 	.word	0x165e9f81

08005254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005254:	b084      	sub	sp, #16
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	f107 001c 	add.w	r0, r7, #28
 8005262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2b01      	cmp	r3, #1
 800526a:	d122      	bne.n	80052b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005296:	2b01      	cmp	r3, #1
 8005298:	d105      	bne.n	80052a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f9a0 	bl	80055ec <USB_CoreReset>
 80052ac:	4603      	mov	r3, r0
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	e01a      	b.n	80052e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f994 	bl	80055ec <USB_CoreReset>
 80052c4:	4603      	mov	r3, r0
 80052c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38
 80052da:	e005      	b.n	80052e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10b      	bne.n	8005306 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f043 0206 	orr.w	r2, r3, #6
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f043 0220 	orr.w	r2, r3, #32
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005312:	b004      	add	sp, #16
 8005314:	4770      	bx	lr

08005316 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f043 0201 	orr.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f023 0201 	bic.w	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	460b      	mov	r3, r1
 8005364:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d115      	bne.n	80053a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005388:	2001      	movs	r0, #1
 800538a:	f7fb fddb 	bl	8000f44 <HAL_Delay>
      ms++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3301      	adds	r3, #1
 8005392:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f91a 	bl	80055ce <USB_GetMode>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	d01e      	beq.n	80053de <USB_SetCurrentMode+0x84>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b31      	cmp	r3, #49	; 0x31
 80053a4:	d9f0      	bls.n	8005388 <USB_SetCurrentMode+0x2e>
 80053a6:	e01a      	b.n	80053de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d115      	bne.n	80053da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ba:	2001      	movs	r0, #1
 80053bc:	f7fb fdc2 	bl	8000f44 <HAL_Delay>
      ms++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3301      	adds	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f901 	bl	80055ce <USB_GetMode>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <USB_SetCurrentMode+0x84>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b31      	cmp	r3, #49	; 0x31
 80053d6:	d9f0      	bls.n	80053ba <USB_SetCurrentMode+0x60>
 80053d8:	e001      	b.n	80053de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e005      	b.n	80053ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b32      	cmp	r3, #50	; 0x32
 80053e2:	d101      	bne.n	80053e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	f043 0220 	orr.w	r2, r3, #32
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	4a08      	ldr	r2, [pc, #32]	; (8005438 <USB_FlushTxFifo+0x44>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e006      	b.n	800542c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b20      	cmp	r3, #32
 8005428:	d0f1      	beq.n	800540e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	00030d40 	.word	0x00030d40

0800543c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2210      	movs	r2, #16
 800544c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	4a08      	ldr	r2, [pc, #32]	; (8005478 <USB_FlushRxFifo+0x3c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e006      	b.n	800546c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b10      	cmp	r3, #16
 8005468:	d0f1      	beq.n	800544e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	00030d40 	.word	0x00030d40

0800547c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800547c:	b480      	push	{r7}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4611      	mov	r1, r2
 8005488:	461a      	mov	r2, r3
 800548a:	460b      	mov	r3, r1
 800548c:	71fb      	strb	r3, [r7, #7]
 800548e:	4613      	mov	r3, r2
 8005490:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800549a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d123      	bne.n	80054ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054a2:	88bb      	ldrh	r3, [r7, #4]
 80054a4:	3303      	adds	r3, #3
 80054a6:	089b      	lsrs	r3, r3, #2
 80054a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	e018      	b.n	80054e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	031a      	lsls	r2, r3, #12
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054bc:	461a      	mov	r2, r3
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	3301      	adds	r3, #1
 80054c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	3301      	adds	r3, #1
 80054ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	3301      	adds	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3301      	adds	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	3301      	adds	r3, #1
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d3e2      	bcc.n	80054b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3724      	adds	r7, #36	; 0x24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b08b      	sub	sp, #44	; 0x2c
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	4613      	mov	r3, r2
 8005504:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	b29b      	uxth	r3, r3
 8005514:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	e014      	b.n	800554e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	3301      	adds	r3, #1
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	3301      	adds	r3, #1
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	3301      	adds	r3, #1
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	3301      	adds	r3, #1
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	3301      	adds	r3, #1
 800554c:	623b      	str	r3, [r7, #32]
 800554e:	6a3a      	ldr	r2, [r7, #32]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	429a      	cmp	r2, r3
 8005554:	d3e6      	bcc.n	8005524 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005556:	8bfb      	ldrh	r3, [r7, #30]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01e      	beq.n	800559a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005566:	461a      	mov	r2, r3
 8005568:	f107 0310 	add.w	r3, r7, #16
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
 800557c:	b2da      	uxtb	r2, r3
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	701a      	strb	r2, [r3, #0]
      i++;
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	3301      	adds	r3, #1
 8005586:	623b      	str	r3, [r7, #32]
      pDest++;
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	3301      	adds	r3, #1
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800558e:	8bfb      	ldrh	r3, [r7, #30]
 8005590:	3b01      	subs	r3, #1
 8005592:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005594:	8bfb      	ldrh	r3, [r7, #30]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1ea      	bne.n	8005570 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800559c:	4618      	mov	r0, r3
 800559e:	372c      	adds	r7, #44	; 0x2c
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4013      	ands	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055c0:	68fb      	ldr	r3, [r7, #12]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0301 	and.w	r3, r3, #1
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	4a13      	ldr	r2, [pc, #76]	; (800564c <USB_CoreReset+0x60>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e01a      	b.n	800563e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	daf3      	bge.n	80055f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f043 0201 	orr.w	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3301      	adds	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	4a09      	ldr	r2, [pc, #36]	; (800564c <USB_CoreReset+0x60>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d901      	bls.n	8005630 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e006      	b.n	800563e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	d0f1      	beq.n	8005620 <USB_CoreReset+0x34>

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	00030d40 	.word	0x00030d40

08005650 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005650:	b084      	sub	sp, #16
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	f107 001c 	add.w	r0, r7, #28
 800565e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800566c:	461a      	mov	r2, r3
 800566e:	2300      	movs	r3, #0
 8005670:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d018      	beq.n	80056d4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10a      	bne.n	80056be <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056b6:	f043 0304 	orr.w	r3, r3, #4
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	e014      	b.n	80056e8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056cc:	f023 0304 	bic.w	r3, r3, #4
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e009      	b.n	80056e8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056e2:	f023 0304 	bic.w	r3, r3, #4
 80056e6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80056e8:	2110      	movs	r1, #16
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff fe82 	bl	80053f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff fea3 	bl	800543c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e015      	b.n	8005728 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4413      	add	r3, r2
 8005704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005708:	461a      	mov	r2, r3
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
 800570e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4413      	add	r3, r2
 8005718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571c:	461a      	mov	r2, r3
 800571e:	2300      	movs	r3, #0
 8005720:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3301      	adds	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	d3e5      	bcc.n	80056fc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005750:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <USB_HostInit+0x154>)
 8005756:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <USB_HostInit+0x158>)
 800575c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005760:	e009      	b.n	8005776 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a10      	ldr	r2, [pc, #64]	; (80057ac <USB_HostInit+0x15c>)
 800576c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a0f      	ldr	r2, [pc, #60]	; (80057b0 <USB_HostInit+0x160>)
 8005772:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f043 0210 	orr.w	r2, r3, #16
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <USB_HostInit+0x164>)
 800578e:	4313      	orrs	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057a0:	b004      	add	sp, #16
 80057a2:	4770      	bx	lr
 80057a4:	01000200 	.word	0x01000200
 80057a8:	00e00300 	.word	0x00e00300
 80057ac:	00600080 	.word	0x00600080
 80057b0:	004000e0 	.word	0x004000e0
 80057b4:	a3200008 	.word	0xa3200008

080057b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057f0:	4313      	orrs	r3, r2
 80057f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d107      	bne.n	800580a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005800:	461a      	mov	r2, r3
 8005802:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005806:	6053      	str	r3, [r2, #4]
 8005808:	e009      	b.n	800581e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d106      	bne.n	800581e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005816:	461a      	mov	r2, r3
 8005818:	f241 7370 	movw	r3, #6000	; 0x1770
 800581c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800584c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800585c:	2064      	movs	r0, #100	; 0x64
 800585e:	f7fb fb71 	bl	8000f44 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800586a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800586e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005870:	200a      	movs	r0, #10
 8005872:	f7fb fb67 	bl	8000f44 <HAL_Delay>

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <USB_DriveVbus+0x44>
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d106      	bne.n	80058c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ce:	d109      	bne.n	80058e4 <USB_DriveVbus+0x64>
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	0c5b      	lsrs	r3, r3, #17
 8005910:	f003 0303 	and.w	r3, r3, #3
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	b29b      	uxth	r3, r3
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	461a      	mov	r2, r3
 8005952:	4603      	mov	r3, r0
 8005954:	70fb      	strb	r3, [r7, #3]
 8005956:	460b      	mov	r3, r1
 8005958:	70bb      	strb	r3, [r7, #2]
 800595a:	4613      	mov	r3, r2
 800595c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4413      	add	r3, r2
 800596e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005972:	461a      	mov	r2, r3
 8005974:	f04f 33ff 	mov.w	r3, #4294967295
 8005978:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800597a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800597e:	2b03      	cmp	r3, #3
 8005980:	d87e      	bhi.n	8005a80 <USB_HC_Init+0x13c>
 8005982:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <USB_HC_Init+0x44>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	08005999 	.word	0x08005999
 800598c:	08005a43 	.word	0x08005a43
 8005990:	08005999 	.word	0x08005999
 8005994:	08005a05 	.word	0x08005a05
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a4:	461a      	mov	r2, r3
 80059a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80059aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80059ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	da10      	bge.n	80059d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80059d4:	e057      	b.n	8005a86 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d051      	beq.n	8005a86 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	78fa      	ldrb	r2, [r7, #3]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a00:	60d3      	str	r3, [r2, #12]
      break;
 8005a02:	e040      	b.n	8005a86 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a10:	461a      	mov	r2, r3
 8005a12:	f240 639d 	movw	r3, #1693	; 0x69d
 8005a16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	da34      	bge.n	8005a8a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005a40:	e023      	b.n	8005a8a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a42:	78fb      	ldrb	r3, [r7, #3]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f240 2325 	movw	r3, #549	; 0x225
 8005a54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da17      	bge.n	8005a8e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	78fa      	ldrb	r2, [r7, #3]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a78:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005a7c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005a7e:	e006      	b.n	8005a8e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	77fb      	strb	r3, [r7, #31]
      break;
 8005a84:	e004      	b.n	8005a90 <USB_HC_Init+0x14c>
      break;
 8005a86:	bf00      	nop
 8005a88:	e002      	b.n	8005a90 <USB_HC_Init+0x14c>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e000      	b.n	8005a90 <USB_HC_Init+0x14c>
      break;
 8005a8e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a96:	699a      	ldr	r2, [r3, #24]
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	6939      	ldr	r1, [r7, #16]
 8005aa6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005aba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	da03      	bge.n	8005aca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	e001      	b.n	8005ace <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff ff0f 	bl	80058f2 <USB_GetHostSpeed>
 8005ad4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d106      	bne.n	8005aec <USB_HC_Init+0x1a8>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d003      	beq.n	8005aec <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	e001      	b.n	8005af0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005af0:	787b      	ldrb	r3, [r7, #1]
 8005af2:	059b      	lsls	r3, r3, #22
 8005af4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005af8:	78bb      	ldrb	r3, [r7, #2]
 8005afa:	02db      	lsls	r3, r3, #11
 8005afc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b00:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b06:	049b      	lsls	r3, r3, #18
 8005b08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	0159      	lsls	r1, r3, #5
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	440b      	add	r3, r1
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b26:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b2c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d10f      	bne.n	8005b56 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	78fa      	ldrb	r2, [r7, #3]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b54:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3720      	adds	r7, #32
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08c      	sub	sp, #48	; 0x30
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b7c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d02d      	beq.n	8005be6 <USB_HC_StartXfer+0x86>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	791b      	ldrb	r3, [r3, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d129      	bne.n	8005be6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d117      	bne.n	8005bc8 <USB_HC_StartXfer+0x68>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	79db      	ldrb	r3, [r3, #7]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <USB_HC_StartXfer+0x48>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	79db      	ldrb	r3, [r3, #7]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d10f      	bne.n	8005bc8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	6a3a      	ldr	r2, [r7, #32]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <USB_HC_StartXfer+0x86>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	795b      	ldrb	r3, [r3, #5]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d107      	bne.n	8005be6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fa2f 	bl	8006040 <USB_DoPing>
      return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e0f8      	b.n	8005dd8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d018      	beq.n	8005c20 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	8912      	ldrh	r2, [r2, #8]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	8912      	ldrh	r2, [r2, #8]
 8005bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c02:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005c04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c06:	8b7b      	ldrh	r3, [r7, #26]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d90b      	bls.n	8005c24 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005c0c:	8b7b      	ldrh	r3, [r7, #26]
 8005c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	8912      	ldrh	r2, [r2, #8]
 8005c16:	fb02 f203 	mul.w	r2, r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	611a      	str	r2, [r3, #16]
 8005c1e:	e001      	b.n	8005c24 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005c20:	2301      	movs	r3, #1
 8005c22:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	78db      	ldrb	r3, [r3, #3]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	8912      	ldrh	r2, [r2, #8]
 8005c32:	fb02 f203 	mul.w	r2, r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	611a      	str	r2, [r3, #16]
 8005c3a:	e003      	b.n	8005c44 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	695a      	ldr	r2, [r3, #20]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c4e:	04d9      	lsls	r1, r3, #19
 8005c50:	4b63      	ldr	r3, [pc, #396]	; (8005de0 <USB_HC_StartXfer+0x280>)
 8005c52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	7a9b      	ldrb	r3, [r3, #10]
 8005c5a:	075b      	lsls	r3, r3, #29
 8005c5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c60:	69f9      	ldr	r1, [r7, #28]
 8005c62:	0148      	lsls	r0, r1, #5
 8005c64:	6a39      	ldr	r1, [r7, #32]
 8005c66:	4401      	add	r1, r0
 8005c68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	68d9      	ldr	r1, [r3, #12]
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c86:	460a      	mov	r2, r1
 8005c88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bf0c      	ite	eq
 8005c9a:	2301      	moveq	r3, #1
 8005c9c:	2300      	movne	r3, #0
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	6a3a      	ldr	r2, [r7, #32]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cc0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	7e7b      	ldrb	r3, [r7, #25]
 8005cd2:	075b      	lsls	r3, r3, #29
 8005cd4:	69f9      	ldr	r1, [r7, #28]
 8005cd6:	0148      	lsls	r0, r1, #5
 8005cd8:	6a39      	ldr	r1, [r7, #32]
 8005cda:	4401      	add	r1, r0
 8005cdc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cfa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	78db      	ldrb	r3, [r3, #3]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	e003      	b.n	8005d16 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d14:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d1c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e04e      	b.n	8005dd8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	78db      	ldrb	r3, [r3, #3]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d149      	bne.n	8005dd6 <USB_HC_StartXfer+0x276>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d045      	beq.n	8005dd6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	79db      	ldrb	r3, [r3, #7]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d830      	bhi.n	8005db4 <USB_HC_StartXfer+0x254>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <USB_HC_StartXfer+0x1f8>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d69 	.word	0x08005d69
 8005d5c:	08005d8d 	.word	0x08005d8d
 8005d60:	08005d69 	.word	0x08005d69
 8005d64:	08005d8d 	.word	0x08005d8d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	3303      	adds	r3, #3
 8005d6e:	089b      	lsrs	r3, r3, #2
 8005d70:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005d72:	8afa      	ldrh	r2, [r7, #22]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d91c      	bls.n	8005db8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f043 0220 	orr.w	r2, r3, #32
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d8a:	e015      	b.n	8005db8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	3303      	adds	r3, #3
 8005d92:	089b      	lsrs	r3, r3, #2
 8005d94:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005d96:	8afa      	ldrh	r2, [r7, #22]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d90a      	bls.n	8005dbc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005db2:	e003      	b.n	8005dbc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005db4:	bf00      	nop
 8005db6:	e002      	b.n	8005dbe <USB_HC_StartXfer+0x25e>
        break;
 8005db8:	bf00      	nop
 8005dba:	e000      	b.n	8005dbe <USB_HC_StartXfer+0x25e>
        break;
 8005dbc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	68d9      	ldr	r1, [r3, #12]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	785a      	ldrb	r2, [r3, #1]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2000      	movs	r0, #0
 8005dce:	9000      	str	r0, [sp, #0]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff fb53 	bl	800547c <USB_WritePacket>
  }

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	1ff80000 	.word	0x1ff80000

08005de4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	b29b      	uxth	r3, r3
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b089      	sub	sp, #36	; 0x24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	0c9b      	lsrs	r3, r3, #18
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	0fdb      	lsrs	r3, r3, #31
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d104      	bne.n	8005e60 <USB_HC_Halt+0x5a>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e0e8      	b.n	8006032 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <USB_HC_Halt+0x66>
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d173      	bne.n	8005f54 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e8a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 80cb 	bne.w	8006030 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d143      	bne.n	8005f2e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	0151      	lsls	r1, r2, #5
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	440a      	add	r2, r1
 8005efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f04:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f12:	d81d      	bhi.n	8005f50 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f2a:	d0ec      	beq.n	8005f06 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f2c:	e080      	b.n	8006030 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f4c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f4e:	e06f      	b.n	8006030 <USB_HC_Halt+0x22a>
            break;
 8005f50:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f52:	e06d      	b.n	8006030 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f72:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d143      	bne.n	800600c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fa2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fc2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fe2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ff0:	d81d      	bhi.n	800602e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006008:	d0ec      	beq.n	8005fe4 <USB_HC_Halt+0x1de>
 800600a:	e011      	b.n	8006030 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	440a      	add	r2, r1
 8006022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	e000      	b.n	8006030 <USB_HC_Halt+0x22a>
          break;
 800602e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3724      	adds	r7, #36	; 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006054:	2301      	movs	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	04da      	lsls	r2, r3, #19
 800605c:	4b15      	ldr	r3, [pc, #84]	; (80060b4 <USB_DoPing+0x74>)
 800605e:	4013      	ands	r3, r2
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	0151      	lsls	r1, r2, #5
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	440a      	add	r2, r1
 8006068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006070:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006088:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006090:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	1ff80000 	.word	0x1ff80000

080060b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff f935 	bl	8005338 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80060ce:	2110      	movs	r1, #16
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff f98f 	bl	80053f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff f9b0 	bl	800543c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	e01f      	b.n	8006122 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006100:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006108:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	461a      	mov	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	3301      	adds	r3, #1
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b0f      	cmp	r3, #15
 8006126:	d9dc      	bls.n	80060e2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006128:	2300      	movs	r3, #0
 800612a:	613b      	str	r3, [r7, #16]
 800612c:	e034      	b.n	8006198 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006144:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800614c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006154:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006162:	461a      	mov	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	3301      	adds	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006174:	d80c      	bhi.n	8006190 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800618c:	d0ec      	beq.n	8006168 <USB_StopHost+0xb0>
 800618e:	e000      	b.n	8006192 <USB_StopHost+0xda>
        break;
 8006190:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	3301      	adds	r3, #1
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b0f      	cmp	r3, #15
 800619c:	d9c7      	bls.n	800612e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a4:	461a      	mov	r2, r3
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295
 80061aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f04f 32ff 	mov.w	r2, #4294967295
 80061b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff f8ae 	bl	8005316 <USB_EnableGlobalInt>

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80061c4:	b590      	push	{r4, r7, lr}
 80061c6:	b089      	sub	sp, #36	; 0x24
 80061c8:	af04      	add	r7, sp, #16
 80061ca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80061cc:	2301      	movs	r3, #1
 80061ce:	2202      	movs	r2, #2
 80061d0:	2102      	movs	r1, #2
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fc66 	bl	8006aa4 <USBH_FindInterface>
 80061d8:	4603      	mov	r3, r0
 80061da:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	2bff      	cmp	r3, #255	; 0xff
 80061e0:	d002      	beq.n	80061e8 <USBH_CDC_InterfaceInit+0x24>
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d901      	bls.n	80061ec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061e8:	2302      	movs	r3, #2
 80061ea:	e13d      	b.n	8006468 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fc3b 	bl	8006a6c <USBH_SelectInterface>
 80061f6:	4603      	mov	r3, r0
 80061f8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006200:	2302      	movs	r3, #2
 8006202:	e131      	b.n	8006468 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800620a:	2050      	movs	r0, #80	; 0x50
 800620c:	f002 fa00 	bl	8008610 <malloc>
 8006210:	4603      	mov	r3, r0
 8006212:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006224:	2302      	movs	r3, #2
 8006226:	e11f      	b.n	8006468 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006228:	2250      	movs	r2, #80	; 0x50
 800622a:	2100      	movs	r1, #0
 800622c:	68b8      	ldr	r0, [r7, #8]
 800622e:	f002 f9ff 	bl	8008630 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	211a      	movs	r1, #26
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	4413      	add	r3, r2
 800623e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	b25b      	sxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	da15      	bge.n	8006276 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	211a      	movs	r1, #26
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	4413      	add	r3, r2
 8006256:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	211a      	movs	r1, #26
 8006266:	fb01 f303 	mul.w	r3, r1, r3
 800626a:	4413      	add	r3, r2
 800626c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006270:	881a      	ldrh	r2, [r3, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 fe32 	bl	8007ee6 <USBH_AllocPipe>
 8006282:	4603      	mov	r3, r0
 8006284:	461a      	mov	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	7819      	ldrb	r1, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	7858      	ldrb	r0, [r3, #1]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	8952      	ldrh	r2, [r2, #10]
 80062a2:	9202      	str	r2, [sp, #8]
 80062a4:	2203      	movs	r2, #3
 80062a6:	9201      	str	r2, [sp, #4]
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	4623      	mov	r3, r4
 80062ac:	4602      	mov	r2, r0
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 fdea 	bl	8007e88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2200      	movs	r2, #0
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f002 f8f9 	bl	80084b4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80062c2:	2300      	movs	r3, #0
 80062c4:	2200      	movs	r2, #0
 80062c6:	210a      	movs	r1, #10
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fbeb 	bl	8006aa4 <USBH_FindInterface>
 80062ce:	4603      	mov	r3, r0
 80062d0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	2bff      	cmp	r3, #255	; 0xff
 80062d6:	d002      	beq.n	80062de <USBH_CDC_InterfaceInit+0x11a>
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d901      	bls.n	80062e2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80062de:	2302      	movs	r3, #2
 80062e0:	e0c2      	b.n	8006468 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	211a      	movs	r1, #26
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	4413      	add	r3, r2
 80062ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	da16      	bge.n	8006328 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	211a      	movs	r1, #26
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	4413      	add	r3, r2
 8006306:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800630a:	781a      	ldrb	r2, [r3, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	211a      	movs	r1, #26
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	4413      	add	r3, r2
 800631c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006320:	881a      	ldrh	r2, [r3, #0]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	835a      	strh	r2, [r3, #26]
 8006326:	e015      	b.n	8006354 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	211a      	movs	r1, #26
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	4413      	add	r3, r2
 8006334:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	211a      	movs	r1, #26
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	4413      	add	r3, r2
 800634a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800634e:	881a      	ldrh	r2, [r3, #0]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	211a      	movs	r1, #26
 800635a:	fb01 f303 	mul.w	r3, r1, r3
 800635e:	4413      	add	r3, r2
 8006360:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	b25b      	sxtb	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	da16      	bge.n	800639a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	211a      	movs	r1, #26
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	f203 3356 	addw	r3, r3, #854	; 0x356
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	211a      	movs	r1, #26
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006392:	881a      	ldrh	r2, [r3, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	835a      	strh	r2, [r3, #26]
 8006398:	e015      	b.n	80063c6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	211a      	movs	r1, #26
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	211a      	movs	r1, #26
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80063c0:	881a      	ldrh	r2, [r3, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	7b9b      	ldrb	r3, [r3, #14]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fd8a 	bl	8007ee6 <USBH_AllocPipe>
 80063d2:	4603      	mov	r3, r0
 80063d4:	461a      	mov	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	7bdb      	ldrb	r3, [r3, #15]
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fd80 	bl	8007ee6 <USBH_AllocPipe>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	7b59      	ldrb	r1, [r3, #13]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	7b98      	ldrb	r0, [r3, #14]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	8b12      	ldrh	r2, [r2, #24]
 8006406:	9202      	str	r2, [sp, #8]
 8006408:	2202      	movs	r2, #2
 800640a:	9201      	str	r2, [sp, #4]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	4623      	mov	r3, r4
 8006410:	4602      	mov	r2, r0
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fd38 	bl	8007e88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	7b19      	ldrb	r1, [r3, #12]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	7bd8      	ldrb	r0, [r3, #15]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	8b52      	ldrh	r2, [r2, #26]
 8006430:	9202      	str	r2, [sp, #8]
 8006432:	2202      	movs	r2, #2
 8006434:	9201      	str	r2, [sp, #4]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	4623      	mov	r3, r4
 800643a:	4602      	mov	r2, r0
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fd23 	bl	8007e88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	7b5b      	ldrb	r3, [r3, #13]
 800644e:	2200      	movs	r2, #0
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f002 f82e 	bl	80084b4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	7b1b      	ldrb	r3, [r3, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f002 f827 	bl	80084b4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	bd90      	pop	{r4, r7, pc}

08006470 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00e      	beq.n	80064a8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fd18 	bl	8007ec6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fd43 	bl	8007f28 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	7b1b      	ldrb	r3, [r3, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00e      	beq.n	80064ce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	7b1b      	ldrb	r3, [r3, #12]
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 fd05 	bl	8007ec6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	7b1b      	ldrb	r3, [r3, #12]
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fd30 	bl	8007f28 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	7b5b      	ldrb	r3, [r3, #13]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00e      	beq.n	80064f4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	7b5b      	ldrb	r3, [r3, #13]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fcf2 	bl	8007ec6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	7b5b      	ldrb	r3, [r3, #13]
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f001 fd1d 	bl	8007f28 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	4618      	mov	r0, r3
 800650a:	f002 f889 	bl	8008620 <free>
    phost->pActiveClass->pData = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006514:	2200      	movs	r2, #0
 8006516:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3340      	adds	r3, #64	; 0x40
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8b1 	bl	80066a2 <GetLineCoding>
 8006540:	4603      	mov	r3, r0
 8006542:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006544:	7afb      	ldrb	r3, [r7, #11]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d105      	bne.n	8006556 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006550:	2102      	movs	r1, #2
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006556:	7afb      	ldrb	r3, [r7, #11]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006580:	2b04      	cmp	r3, #4
 8006582:	d877      	bhi.n	8006674 <USBH_CDC_Process+0x114>
 8006584:	a201      	add	r2, pc, #4	; (adr r2, 800658c <USBH_CDC_Process+0x2c>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	080065a1 	.word	0x080065a1
 8006590:	080065a7 	.word	0x080065a7
 8006594:	080065d7 	.word	0x080065d7
 8006598:	0800664b 	.word	0x0800664b
 800659c:	08006659 	.word	0x08006659
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73fb      	strb	r3, [r7, #15]
      break;
 80065a4:	e06d      	b.n	8006682 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f897 	bl	80066e0 <SetLineCoding>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80065c4:	e058      	b.n	8006678 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d055      	beq.n	8006678 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2204      	movs	r2, #4
 80065d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80065d4:	e050      	b.n	8006678 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	3340      	adds	r3, #64	; 0x40
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f860 	bl	80066a2 <GetLineCoding>
 80065e2:	4603      	mov	r3, r0
 80065e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d126      	bne.n	800663a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fe:	791b      	ldrb	r3, [r3, #4]
 8006600:	429a      	cmp	r2, r3
 8006602:	d13b      	bne.n	800667c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006610:	429a      	cmp	r2, r3
 8006612:	d133      	bne.n	800667c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006620:	429a      	cmp	r2, r3
 8006622:	d12b      	bne.n	800667c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800662e:	429a      	cmp	r2, r3
 8006630:	d124      	bne.n	800667c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f958 	bl	80068e8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006638:	e020      	b.n	800667c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d01d      	beq.n	800667c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2204      	movs	r2, #4
 8006644:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006648:	e018      	b.n	800667c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f867 	bl	800671e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8da 	bl	800680a <CDC_ProcessReception>
      break;
 8006656:	e014      	b.n	8006682 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006658:	2100      	movs	r1, #0
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 ffe3 	bl	8007626 <USBH_ClrFeature>
 8006660:	4603      	mov	r3, r0
 8006662:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006672:	e005      	b.n	8006680 <USBH_CDC_Process+0x120>

    default:
      break;
 8006674:	bf00      	nop
 8006676:	e004      	b.n	8006682 <USBH_CDC_Process+0x122>
      break;
 8006678:	bf00      	nop
 800667a:	e002      	b.n	8006682 <USBH_CDC_Process+0x122>
      break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <USBH_CDC_Process+0x122>
      break;
 8006680:	bf00      	nop

  }

  return status;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	22a1      	movs	r2, #161	; 0xa1
 80066b0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2221      	movs	r2, #33	; 0x21
 80066b6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2207      	movs	r2, #7
 80066c8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2207      	movs	r2, #7
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 f988 	bl	80079e6 <USBH_CtlReq>
 80066d6:	4603      	mov	r3, r0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2221      	movs	r2, #33	; 0x21
 80066ee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2207      	movs	r2, #7
 8006706:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2207      	movs	r2, #7
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 f969 	bl	80079e6 <USBH_CtlReq>
 8006714:	4603      	mov	r3, r0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b086      	sub	sp, #24
 8006722:	af02      	add	r7, sp, #8
 8006724:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006730:	2300      	movs	r3, #0
 8006732:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800673a:	2b01      	cmp	r3, #1
 800673c:	d002      	beq.n	8006744 <CDC_ProcessTransmission+0x26>
 800673e:	2b02      	cmp	r3, #2
 8006740:	d023      	beq.n	800678a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006742:	e05e      	b.n	8006802 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	8b12      	ldrh	r2, [r2, #24]
 800674c:	4293      	cmp	r3, r2
 800674e:	d90b      	bls.n	8006768 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	69d9      	ldr	r1, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8b1a      	ldrh	r2, [r3, #24]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	7b5b      	ldrb	r3, [r3, #13]
 800675c:	2001      	movs	r0, #1
 800675e:	9000      	str	r0, [sp, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fb4e 	bl	8007e02 <USBH_BulkSendData>
 8006766:	e00b      	b.n	8006780 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	7b5b      	ldrb	r3, [r3, #13]
 8006776:	2001      	movs	r0, #1
 8006778:	9000      	str	r0, [sp, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fb41 	bl	8007e02 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006788:	e03b      	b.n	8006802 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	7b5b      	ldrb	r3, [r3, #13]
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fe65 	bl	8008460 <USBH_LL_GetURBState>
 8006796:	4603      	mov	r3, r0
 8006798:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800679a:	7afb      	ldrb	r3, [r7, #11]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d128      	bne.n	80067f2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	8b12      	ldrh	r2, [r2, #24]
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d90e      	bls.n	80067ca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	8b12      	ldrh	r2, [r2, #24]
 80067b4:	1a9a      	subs	r2, r3, r2
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	8b12      	ldrh	r2, [r2, #24]
 80067c2:	441a      	add	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	61da      	str	r2, [r3, #28]
 80067c8:	e002      	b.n	80067d0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80067e0:	e00e      	b.n	8006800 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f868 	bl	80068c0 <USBH_CDC_TransmitCallback>
      break;
 80067f0:	e006      	b.n	8006800 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80067f2:	7afb      	ldrb	r3, [r7, #11]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d103      	bne.n	8006800 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006800:	bf00      	nop
  }
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b086      	sub	sp, #24
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800681c:	2300      	movs	r3, #0
 800681e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006826:	2b03      	cmp	r3, #3
 8006828:	d002      	beq.n	8006830 <CDC_ProcessReception+0x26>
 800682a:	2b04      	cmp	r3, #4
 800682c:	d00e      	beq.n	800684c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800682e:	e043      	b.n	80068b8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	6a19      	ldr	r1, [r3, #32]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	8b5a      	ldrh	r2, [r3, #26]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	7b1b      	ldrb	r3, [r3, #12]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 fb05 	bl	8007e4c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2204      	movs	r2, #4
 8006846:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800684a:	e035      	b.n	80068b8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	7b1b      	ldrb	r3, [r3, #12]
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fe04 	bl	8008460 <USBH_LL_GetURBState>
 8006858:	4603      	mov	r3, r0
 800685a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800685c:	7cfb      	ldrb	r3, [r7, #19]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d129      	bne.n	80068b6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	7b1b      	ldrb	r3, [r3, #12]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fd67 	bl	800833c <USBH_LL_GetLastXferSize>
 800686e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	429a      	cmp	r2, r3
 8006878:	d016      	beq.n	80068a8 <CDC_ProcessReception+0x9e>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	8b5b      	ldrh	r3, [r3, #26]
 800687e:	461a      	mov	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4293      	cmp	r3, r2
 8006884:	d910      	bls.n	80068a8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1ad2      	subs	r2, r2, r3
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	6a1a      	ldr	r2, [r3, #32]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	441a      	add	r2, r3
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2203      	movs	r2, #3
 80068a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068a6:	e006      	b.n	80068b6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f80f 	bl	80068d4 <USBH_CDC_ReceiveCallback>
      break;
 80068b6:	bf00      	nop
  }
}
 80068b8:	bf00      	nop
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006910:	2302      	movs	r3, #2
 8006912:	e029      	b.n	8006968 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	79fa      	ldrb	r2, [r7, #7]
 8006918:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f81f 	bl	8006970 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f001 fc37 	bl	80081d4 <USBH_LL_Init>

  return USBH_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	e009      	b.n	8006996 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	33e0      	adds	r3, #224	; 0xe0
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	2200      	movs	r2, #0
 800698e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b0e      	cmp	r3, #14
 800699a:	d9f2      	bls.n	8006982 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e009      	b.n	80069b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069bc:	d3f1      	bcc.n	80069a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2240      	movs	r2, #64	; 0x40
 80069e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d016      	beq.n	8006a5a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10e      	bne.n	8006a54 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a3c:	1c59      	adds	r1, r3, #1
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	33de      	adds	r3, #222	; 0xde
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
 8006a52:	e004      	b.n	8006a5e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a54:	2302      	movs	r3, #2
 8006a56:	73fb      	strb	r3, [r7, #15]
 8006a58:	e001      	b.n	8006a5e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d204      	bcs.n	8006a92 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	78fa      	ldrb	r2, [r7, #3]
 8006a8c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006a90:	e001      	b.n	8006a96 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006a92:	2302      	movs	r3, #2
 8006a94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	4608      	mov	r0, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	70fb      	strb	r3, [r7, #3]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	70bb      	strb	r3, [r7, #2]
 8006aba:	4613      	mov	r3, r2
 8006abc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006acc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ace:	e025      	b.n	8006b1c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	221a      	movs	r2, #26
 8006ad4:	fb02 f303 	mul.w	r3, r2, r3
 8006ad8:	3308      	adds	r3, #8
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	3302      	adds	r3, #2
 8006ae0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	795b      	ldrb	r3, [r3, #5]
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d002      	beq.n	8006af2 <USBH_FindInterface+0x4e>
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	2bff      	cmp	r3, #255	; 0xff
 8006af0:	d111      	bne.n	8006b16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006af6:	78ba      	ldrb	r2, [r7, #2]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d002      	beq.n	8006b02 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006afc:	78bb      	ldrb	r3, [r7, #2]
 8006afe:	2bff      	cmp	r3, #255	; 0xff
 8006b00:	d109      	bne.n	8006b16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b06:	787a      	ldrb	r2, [r7, #1]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d002      	beq.n	8006b12 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b0c:	787b      	ldrb	r3, [r7, #1]
 8006b0e:	2bff      	cmp	r3, #255	; 0xff
 8006b10:	d101      	bne.n	8006b16 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	e006      	b.n	8006b24 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d9d6      	bls.n	8006ad0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b22:	23ff      	movs	r3, #255	; 0xff
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 fb87 	bl	800824c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006b3e:	2101      	movs	r1, #1
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 fca0 	bl	8008486 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af04      	add	r7, sp, #16
 8006b56:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d102      	bne.n	8006b72 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2203      	movs	r2, #3
 8006b70:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b0b      	cmp	r3, #11
 8006b7a:	f200 81b3 	bhi.w	8006ee4 <USBH_Process+0x394>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <USBH_Process+0x34>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006bb5 	.word	0x08006bb5
 8006b88:	08006be7 	.word	0x08006be7
 8006b8c:	08006c4f 	.word	0x08006c4f
 8006b90:	08006e7f 	.word	0x08006e7f
 8006b94:	08006ee5 	.word	0x08006ee5
 8006b98:	08006cf3 	.word	0x08006cf3
 8006b9c:	08006e25 	.word	0x08006e25
 8006ba0:	08006d29 	.word	0x08006d29
 8006ba4:	08006d49 	.word	0x08006d49
 8006ba8:	08006d69 	.word	0x08006d69
 8006bac:	08006d97 	.word	0x08006d97
 8006bb0:	08006e67 	.word	0x08006e67
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8193 	beq.w	8006ee8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006bc8:	20c8      	movs	r0, #200	; 0xc8
 8006bca:	f001 fca3 	bl	8008514 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fb99 	bl	8008306 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006be4:	e180      	b.n	8006ee8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d107      	bne.n	8006c00 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bfe:	e182      	b.n	8006f06 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c0a:	d914      	bls.n	8006c36 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c12:	3301      	adds	r3, #1
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d903      	bls.n	8006c2e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	220d      	movs	r2, #13
 8006c2a:	701a      	strb	r2, [r3, #0]
      break;
 8006c2c:	e16b      	b.n	8006f06 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
      break;
 8006c34:	e167      	b.n	8006f06 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c3c:	f103 020a 	add.w	r2, r3, #10
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006c46:	200a      	movs	r0, #10
 8006c48:	f001 fc64 	bl	8008514 <USBH_Delay>
      break;
 8006c4c:	e15b      	b.n	8006f06 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c5e:	2104      	movs	r1, #4
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c64:	2064      	movs	r0, #100	; 0x64
 8006c66:	f001 fc55 	bl	8008514 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fb24 	bl	80082b8 <USBH_LL_GetSpeed>
 8006c70:	4603      	mov	r3, r0
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2205      	movs	r2, #5
 8006c7e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 f92f 	bl	8007ee6 <USBH_AllocPipe>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006c90:	2180      	movs	r1, #128	; 0x80
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 f927 	bl	8007ee6 <USBH_AllocPipe>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7919      	ldrb	r1, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006cb4:	b292      	uxth	r2, r2
 8006cb6:	9202      	str	r2, [sp, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	9201      	str	r2, [sp, #4]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2280      	movs	r2, #128	; 0x80
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 f8e0 	bl	8007e88 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7959      	ldrb	r1, [r3, #5]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cdc:	b292      	uxth	r2, r2
 8006cde:	9202      	str	r2, [sp, #8]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	9201      	str	r2, [sp, #4]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2200      	movs	r2, #0
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f8cc 	bl	8007e88 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006cf0:	e109      	b.n	8006f06 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f90c 	bl	8006f10 <USBH_HandleEnum>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 80f3 	bne.w	8006eec <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d103      	bne.n	8006d20 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006d1e:	e0e5      	b.n	8006eec <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2207      	movs	r2, #7
 8006d24:	701a      	strb	r2, [r3, #0]
      break;
 8006d26:	e0e1      	b.n	8006eec <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 80de 	beq.w	8006ef0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2208      	movs	r2, #8
 8006d44:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d46:	e0d3      	b.n	8006ef0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fc20 	bl	8007598 <USBH_SetCfg>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 80ca 	bne.w	8006ef4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2209      	movs	r2, #9
 8006d64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d66:	e0c5      	b.n	8006ef4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00b      	beq.n	8006d8e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006d76:	2101      	movs	r1, #1
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fc30 	bl	80075de <USBH_SetFeature>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 80b9 	bne.w	8006ef8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	220a      	movs	r2, #10
 8006d8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d8c:	e0b4      	b.n	8006ef8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	220a      	movs	r2, #10
 8006d92:	701a      	strb	r2, [r3, #0]
      break;
 8006d94:	e0b0      	b.n	8006ef8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80ad 	beq.w	8006efc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
 8006dae:	e016      	b.n	8006dde <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006db0:	7bfa      	ldrb	r2, [r7, #15]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	32de      	adds	r2, #222	; 0xde
 8006db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dba:	791a      	ldrb	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d108      	bne.n	8006dd8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006dc6:	7bfa      	ldrb	r2, [r7, #15]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	32de      	adds	r2, #222	; 0xde
 8006dcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006dd6:	e005      	b.n	8006de4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0e5      	beq.n	8006db0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d016      	beq.n	8006e1c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d109      	bne.n	8006e14 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2206      	movs	r2, #6
 8006e04:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e0c:	2103      	movs	r1, #3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e12:	e073      	b.n	8006efc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	220d      	movs	r2, #13
 8006e18:	701a      	strb	r2, [r3, #0]
      break;
 8006e1a:	e06f      	b.n	8006efc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	220d      	movs	r2, #13
 8006e20:	701a      	strb	r2, [r3, #0]
      break;
 8006e22:	e06b      	b.n	8006efc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d017      	beq.n	8006e5e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	220b      	movs	r2, #11
 8006e4a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e4c:	e058      	b.n	8006f00 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d154      	bne.n	8006f00 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	220d      	movs	r2, #13
 8006e5a:	701a      	strb	r2, [r3, #0]
      break;
 8006e5c:	e050      	b.n	8006f00 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	220d      	movs	r2, #13
 8006e62:	701a      	strb	r2, [r3, #0]
      break;
 8006e64:	e04c      	b.n	8006f00 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d049      	beq.n	8006f04 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
      }
      break;
 8006e7c:	e042      	b.n	8006f04 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fd72 	bl	8006970 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eba:	2105      	movs	r1, #5
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d107      	bne.n	8006edc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff fe2b 	bl	8006b30 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006eda:	e014      	b.n	8006f06 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 f9b5 	bl	800824c <USBH_LL_Start>
      break;
 8006ee2:	e010      	b.n	8006f06 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ee4:	bf00      	nop
 8006ee6:	e00e      	b.n	8006f06 <USBH_Process+0x3b6>
      break;
 8006ee8:	bf00      	nop
 8006eea:	e00c      	b.n	8006f06 <USBH_Process+0x3b6>
      break;
 8006eec:	bf00      	nop
 8006eee:	e00a      	b.n	8006f06 <USBH_Process+0x3b6>
    break;
 8006ef0:	bf00      	nop
 8006ef2:	e008      	b.n	8006f06 <USBH_Process+0x3b6>
      break;
 8006ef4:	bf00      	nop
 8006ef6:	e006      	b.n	8006f06 <USBH_Process+0x3b6>
      break;
 8006ef8:	bf00      	nop
 8006efa:	e004      	b.n	8006f06 <USBH_Process+0x3b6>
      break;
 8006efc:	bf00      	nop
 8006efe:	e002      	b.n	8006f06 <USBH_Process+0x3b6>
      break;
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <USBH_Process+0x3b6>
      break;
 8006f04:	bf00      	nop
  }
  return USBH_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af04      	add	r7, sp, #16
 8006f16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	2b07      	cmp	r3, #7
 8006f26:	f200 81c1 	bhi.w	80072ac <USBH_HandleEnum+0x39c>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <USBH_HandleEnum+0x20>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f51 	.word	0x08006f51
 8006f34:	0800700f 	.word	0x0800700f
 8006f38:	08007079 	.word	0x08007079
 8006f3c:	08007107 	.word	0x08007107
 8006f40:	08007171 	.word	0x08007171
 8006f44:	080071e1 	.word	0x080071e1
 8006f48:	08007227 	.word	0x08007227
 8006f4c:	0800726d 	.word	0x0800726d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f50:	2108      	movs	r1, #8
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa50 	bl	80073f8 <USBH_Get_DevDesc>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d130      	bne.n	8006fc4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7919      	ldrb	r1, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f86:	b292      	uxth	r2, r2
 8006f88:	9202      	str	r2, [sp, #8]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	9201      	str	r2, [sp, #4]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4603      	mov	r3, r0
 8006f92:	2280      	movs	r2, #128	; 0x80
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 ff77 	bl	8007e88 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	7959      	ldrb	r1, [r3, #5]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	9202      	str	r2, [sp, #8]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	9201      	str	r2, [sp, #4]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2200      	movs	r2, #0
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 ff63 	bl	8007e88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006fc2:	e175      	b.n	80072b0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	f040 8172 	bne.w	80072b0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d903      	bls.n	8006fee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	220d      	movs	r2, #13
 8006fea:	701a      	strb	r2, [r3, #0]
      break;
 8006fec:	e160      	b.n	80072b0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	795b      	ldrb	r3, [r3, #5]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 ff97 	bl	8007f28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	791b      	ldrb	r3, [r3, #4]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 ff91 	bl	8007f28 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
      break;
 800700c:	e150      	b.n	80072b0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800700e:	2112      	movs	r1, #18
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f9f1 	bl	80073f8 <USBH_Get_DevDesc>
 8007016:	4603      	mov	r3, r0
 8007018:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007026:	e145      	b.n	80072b4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	2b03      	cmp	r3, #3
 800702c:	f040 8142 	bne.w	80072b4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007036:	3301      	adds	r3, #1
 8007038:	b2da      	uxtb	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007046:	2b03      	cmp	r3, #3
 8007048:	d903      	bls.n	8007052 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	220d      	movs	r2, #13
 800704e:	701a      	strb	r2, [r3, #0]
      break;
 8007050:	e130      	b.n	80072b4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	795b      	ldrb	r3, [r3, #5]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 ff65 	bl	8007f28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	791b      	ldrb	r3, [r3, #4]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 ff5f 	bl	8007f28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	701a      	strb	r2, [r3, #0]
      break;
 8007076:	e11d      	b.n	80072b4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007078:	2101      	movs	r1, #1
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa68 	bl	8007550 <USBH_SetAddress>
 8007080:	4603      	mov	r3, r0
 8007082:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d132      	bne.n	80070f0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800708a:	2002      	movs	r0, #2
 800708c:	f001 fa42 	bl	8008514 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2203      	movs	r2, #3
 800709c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	7919      	ldrb	r1, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80070b2:	b292      	uxth	r2, r2
 80070b4:	9202      	str	r2, [sp, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	9201      	str	r2, [sp, #4]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	4603      	mov	r3, r0
 80070be:	2280      	movs	r2, #128	; 0x80
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fee1 	bl	8007e88 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	7959      	ldrb	r1, [r3, #5]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070da:	b292      	uxth	r2, r2
 80070dc:	9202      	str	r2, [sp, #8]
 80070de:	2200      	movs	r2, #0
 80070e0:	9201      	str	r2, [sp, #4]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4603      	mov	r3, r0
 80070e6:	2200      	movs	r2, #0
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fecd 	bl	8007e88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070ee:	e0e3      	b.n	80072b8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	f040 80e0 	bne.w	80072b8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	220d      	movs	r2, #13
 80070fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	705a      	strb	r2, [r3, #1]
      break;
 8007104:	e0d8      	b.n	80072b8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007106:	2109      	movs	r1, #9
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f99d 	bl	8007448 <USBH_Get_CfgDesc>
 800710e:	4603      	mov	r3, r0
 8007110:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2204      	movs	r2, #4
 800711c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800711e:	e0cd      	b.n	80072bc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	2b03      	cmp	r3, #3
 8007124:	f040 80ca 	bne.w	80072bc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800712e:	3301      	adds	r3, #1
 8007130:	b2da      	uxtb	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800713e:	2b03      	cmp	r3, #3
 8007140:	d903      	bls.n	800714a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	220d      	movs	r2, #13
 8007146:	701a      	strb	r2, [r3, #0]
      break;
 8007148:	e0b8      	b.n	80072bc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	795b      	ldrb	r3, [r3, #5]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fee9 	bl	8007f28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	791b      	ldrb	r3, [r3, #4]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fee3 	bl	8007f28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	701a      	strb	r2, [r3, #0]
      break;
 800716e:	e0a5      	b.n	80072bc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f965 	bl	8007448 <USBH_Get_CfgDesc>
 800717e:	4603      	mov	r3, r0
 8007180:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d103      	bne.n	8007190 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2205      	movs	r2, #5
 800718c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800718e:	e097      	b.n	80072c0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b03      	cmp	r3, #3
 8007194:	f040 8094 	bne.w	80072c0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800719e:	3301      	adds	r3, #1
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d903      	bls.n	80071ba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	220d      	movs	r2, #13
 80071b6:	701a      	strb	r2, [r3, #0]
      break;
 80071b8:	e082      	b.n	80072c0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	795b      	ldrb	r3, [r3, #5]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 feb1 	bl	8007f28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	791b      	ldrb	r3, [r3, #4]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 feab 	bl	8007f28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
      break;
 80071de:	e06f      	b.n	80072c0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d019      	beq.n	800721e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071f6:	23ff      	movs	r3, #255	; 0xff
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f949 	bl	8007490 <USBH_Get_StringDesc>
 80071fe:	4603      	mov	r3, r0
 8007200:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2206      	movs	r2, #6
 800720c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800720e:	e059      	b.n	80072c4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b03      	cmp	r3, #3
 8007214:	d156      	bne.n	80072c4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2206      	movs	r2, #6
 800721a:	705a      	strb	r2, [r3, #1]
      break;
 800721c:	e052      	b.n	80072c4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2206      	movs	r2, #6
 8007222:	705a      	strb	r2, [r3, #1]
      break;
 8007224:	e04e      	b.n	80072c4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800722c:	2b00      	cmp	r3, #0
 800722e:	d019      	beq.n	8007264 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800723c:	23ff      	movs	r3, #255	; 0xff
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f926 	bl	8007490 <USBH_Get_StringDesc>
 8007244:	4603      	mov	r3, r0
 8007246:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d103      	bne.n	8007256 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2207      	movs	r2, #7
 8007252:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007254:	e038      	b.n	80072c8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	2b03      	cmp	r3, #3
 800725a:	d135      	bne.n	80072c8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2207      	movs	r2, #7
 8007260:	705a      	strb	r2, [r3, #1]
      break;
 8007262:	e031      	b.n	80072c8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2207      	movs	r2, #7
 8007268:	705a      	strb	r2, [r3, #1]
      break;
 800726a:	e02d      	b.n	80072c8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007272:	2b00      	cmp	r3, #0
 8007274:	d017      	beq.n	80072a6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007282:	23ff      	movs	r3, #255	; 0xff
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f903 	bl	8007490 <USBH_Get_StringDesc>
 800728a:	4603      	mov	r3, r0
 800728c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007298:	e018      	b.n	80072cc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b03      	cmp	r3, #3
 800729e:	d115      	bne.n	80072cc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]
      break;
 80072a4:	e012      	b.n	80072cc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
      break;
 80072aa:	e00f      	b.n	80072cc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80072ac:	bf00      	nop
 80072ae:	e00e      	b.n	80072ce <USBH_HandleEnum+0x3be>
      break;
 80072b0:	bf00      	nop
 80072b2:	e00c      	b.n	80072ce <USBH_HandleEnum+0x3be>
      break;
 80072b4:	bf00      	nop
 80072b6:	e00a      	b.n	80072ce <USBH_HandleEnum+0x3be>
      break;
 80072b8:	bf00      	nop
 80072ba:	e008      	b.n	80072ce <USBH_HandleEnum+0x3be>
      break;
 80072bc:	bf00      	nop
 80072be:	e006      	b.n	80072ce <USBH_HandleEnum+0x3be>
      break;
 80072c0:	bf00      	nop
 80072c2:	e004      	b.n	80072ce <USBH_HandleEnum+0x3be>
      break;
 80072c4:	bf00      	nop
 80072c6:	e002      	b.n	80072ce <USBH_HandleEnum+0x3be>
      break;
 80072c8:	bf00      	nop
 80072ca:	e000      	b.n	80072ce <USBH_HandleEnum+0x3be>
      break;
 80072cc:	bf00      	nop
  }
  return Status;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b082      	sub	sp, #8
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f804 	bl	800731a <USBH_HandleSof>
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b0b      	cmp	r3, #11
 800732a:	d10a      	bne.n	8007342 <USBH_HandleSof+0x28>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
  }
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800735a:	bf00      	nop
}
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007376:	bf00      	nop
}
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 ff56 	bl	8008282 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	791b      	ldrb	r3, [r3, #4]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fda3 	bl	8007f28 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	795b      	ldrb	r3, [r3, #5]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fd9d 	bl	8007f28 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	b29b      	uxth	r3, r3
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	4613      	mov	r3, r2
 8007412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007416:	2100      	movs	r1, #0
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f864 	bl	80074e6 <USBH_GetDescriptor>
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	b292      	uxth	r2, r2
 8007438:	4619      	mov	r1, r3
 800743a:	f000 f918 	bl	800766e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af02      	add	r7, sp, #8
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	331c      	adds	r3, #28
 8007458:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800745a:	887b      	ldrh	r3, [r7, #2]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007464:	2100      	movs	r1, #0
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f83d 	bl	80074e6 <USBH_GetDescriptor>
 800746c:	4603      	mov	r3, r0
 800746e:	72fb      	strb	r3, [r7, #11]
 8007470:	7afb      	ldrb	r3, [r7, #11]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d107      	bne.n	8007486 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800747c:	887a      	ldrh	r2, [r7, #2]
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f964 	bl	800774e <USBH_ParseCfgDesc>
  }

  return status;
 8007486:	7afb      	ldrb	r3, [r7, #11]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	461a      	mov	r2, r3
 800749c:	460b      	mov	r3, r1
 800749e:	72fb      	strb	r3, [r7, #11]
 80074a0:	4613      	mov	r3, r2
 80074a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80074a4:	7afb      	ldrb	r3, [r7, #11]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80074ac:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80074b4:	893b      	ldrh	r3, [r7, #8]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	460b      	mov	r3, r1
 80074ba:	2100      	movs	r1, #0
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f812 	bl	80074e6 <USBH_GetDescriptor>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d107      	bne.n	80074dc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074d2:	893a      	ldrh	r2, [r7, #8]
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fa37 	bl	800794a <USBH_ParseStringDesc>
  }

  return status;
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	72fb      	strb	r3, [r7, #11]
 80074f4:	4613      	mov	r3, r2
 80074f6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	789b      	ldrb	r3, [r3, #2]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d11c      	bne.n	800753a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007506:	b2da      	uxtb	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2206      	movs	r2, #6
 8007510:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	893a      	ldrh	r2, [r7, #8]
 8007516:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007518:	893b      	ldrh	r3, [r7, #8]
 800751a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800751e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007522:	d104      	bne.n	800752e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f240 4209 	movw	r2, #1033	; 0x409
 800752a:	829a      	strh	r2, [r3, #20]
 800752c:	e002      	b.n	8007534 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8b3a      	ldrh	r2, [r7, #24]
 8007538:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800753a:	8b3b      	ldrh	r3, [r7, #24]
 800753c:	461a      	mov	r2, r3
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fa50 	bl	80079e6 <USBH_CtlReq>
 8007546:	4603      	mov	r3, r0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	789b      	ldrb	r3, [r3, #2]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d10f      	bne.n	8007584 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2205      	movs	r2, #5
 800756e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007584:	2200      	movs	r2, #0
 8007586:	2100      	movs	r1, #0
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fa2c 	bl	80079e6 <USBH_CtlReq>
 800758e:	4603      	mov	r3, r0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	789b      	ldrb	r3, [r3, #2]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d10e      	bne.n	80075ca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2209      	movs	r2, #9
 80075b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	887a      	ldrh	r2, [r7, #2]
 80075bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80075ca:	2200      	movs	r2, #0
 80075cc:	2100      	movs	r1, #0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa09 	bl	80079e6 <USBH_CtlReq>
 80075d4:	4603      	mov	r3, r0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	789b      	ldrb	r3, [r3, #2]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d10f      	bne.n	8007612 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2203      	movs	r2, #3
 80075fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007612:	2200      	movs	r2, #0
 8007614:	2100      	movs	r1, #0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9e5 	bl	80079e6 <USBH_CtlReq>
 800761c:	4603      	mov	r3, r0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	789b      	ldrb	r3, [r3, #2]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d10f      	bne.n	800765a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2202      	movs	r2, #2
 800763e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800765a:	2200      	movs	r2, #0
 800765c:	2100      	movs	r1, #0
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f9c1 	bl	80079e6 <USBH_CtlReq>
 8007664:	4603      	mov	r3, r0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	4613      	mov	r3, r2
 800767a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	781a      	ldrb	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	785a      	ldrb	r2, [r3, #1]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	3302      	adds	r3, #2
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	b29a      	uxth	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	3303      	adds	r3, #3
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	b29b      	uxth	r3, r3
 80076a0:	4313      	orrs	r3, r2
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	791a      	ldrb	r2, [r3, #4]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	795a      	ldrb	r2, [r3, #5]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	799a      	ldrb	r2, [r3, #6]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	79da      	ldrb	r2, [r3, #7]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80076c8:	88fb      	ldrh	r3, [r7, #6]
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d939      	bls.n	8007742 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	3308      	adds	r3, #8
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	3309      	adds	r3, #9
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	4313      	orrs	r3, r2
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	330a      	adds	r3, #10
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	330b      	adds	r3, #11
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	4313      	orrs	r3, r2
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	330c      	adds	r3, #12
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	b29a      	uxth	r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	330d      	adds	r3, #13
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	b29b      	uxth	r3, r3
 800771a:	4313      	orrs	r3, r2
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	7b9a      	ldrb	r2, [r3, #14]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	7bda      	ldrb	r2, [r3, #15]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	7c1a      	ldrb	r2, [r3, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	7c5a      	ldrb	r2, [r3, #17]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	745a      	strb	r2, [r3, #17]
  }
}
 8007742:	bf00      	nop
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b08a      	sub	sp, #40	; 0x28
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	4613      	mov	r3, r2
 800775a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	785a      	ldrb	r2, [r3, #1]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3302      	adds	r3, #2
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b29a      	uxth	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	3303      	adds	r3, #3
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	b29b      	uxth	r3, r3
 8007794:	4313      	orrs	r3, r2
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	791a      	ldrb	r2, [r3, #4]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	795a      	ldrb	r2, [r3, #5]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	799a      	ldrb	r2, [r3, #6]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	79da      	ldrb	r2, [r3, #7]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	7a1a      	ldrb	r2, [r3, #8]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80077c4:	88fb      	ldrh	r3, [r7, #6]
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d95f      	bls.n	800788a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80077ca:	2309      	movs	r3, #9
 80077cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077d2:	e051      	b.n	8007878 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80077d4:	f107 0316 	add.w	r3, r7, #22
 80077d8:	4619      	mov	r1, r3
 80077da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077dc:	f000 f8e8 	bl	80079b0 <USBH_GetNextDesc>
 80077e0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d146      	bne.n	8007878 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80077ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ee:	221a      	movs	r2, #26
 80077f0:	fb02 f303 	mul.w	r3, r2, r3
 80077f4:	3308      	adds	r3, #8
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4413      	add	r3, r2
 80077fa:	3302      	adds	r3, #2
 80077fc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80077fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007800:	69f8      	ldr	r0, [r7, #28]
 8007802:	f000 f846 	bl	8007892 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800780c:	2300      	movs	r3, #0
 800780e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007810:	e022      	b.n	8007858 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007812:	f107 0316 	add.w	r3, r7, #22
 8007816:	4619      	mov	r1, r3
 8007818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800781a:	f000 f8c9 	bl	80079b0 <USBH_GetNextDesc>
 800781e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b05      	cmp	r3, #5
 8007826:	d117      	bne.n	8007858 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800782c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007830:	3201      	adds	r2, #1
 8007832:	00d2      	lsls	r2, r2, #3
 8007834:	211a      	movs	r1, #26
 8007836:	fb01 f303 	mul.w	r3, r1, r3
 800783a:	4413      	add	r3, r2
 800783c:	3308      	adds	r3, #8
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4413      	add	r3, r2
 8007842:	3304      	adds	r3, #4
 8007844:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007848:	69b8      	ldr	r0, [r7, #24]
 800784a:	f000 f851 	bl	80078f0 <USBH_ParseEPDesc>
            ep_ix++;
 800784e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007852:	3301      	adds	r3, #1
 8007854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	791b      	ldrb	r3, [r3, #4]
 800785c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007860:	429a      	cmp	r2, r3
 8007862:	d204      	bcs.n	800786e <USBH_ParseCfgDesc+0x120>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	885a      	ldrh	r2, [r3, #2]
 8007868:	8afb      	ldrh	r3, [r7, #22]
 800786a:	429a      	cmp	r2, r3
 800786c:	d8d1      	bhi.n	8007812 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800786e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007872:	3301      	adds	r3, #1
 8007874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800787c:	2b01      	cmp	r3, #1
 800787e:	d804      	bhi.n	800788a <USBH_ParseCfgDesc+0x13c>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	885a      	ldrh	r2, [r3, #2]
 8007884:	8afb      	ldrh	r3, [r7, #22]
 8007886:	429a      	cmp	r2, r3
 8007888:	d8a4      	bhi.n	80077d4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800788a:	bf00      	nop
 800788c:	3728      	adds	r7, #40	; 0x28
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781a      	ldrb	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	785a      	ldrb	r2, [r3, #1]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	789a      	ldrb	r2, [r3, #2]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	78da      	ldrb	r2, [r3, #3]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	791a      	ldrb	r2, [r3, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	795a      	ldrb	r2, [r3, #5]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	799a      	ldrb	r2, [r3, #6]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	79da      	ldrb	r2, [r3, #7]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	7a1a      	ldrb	r2, [r3, #8]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	721a      	strb	r2, [r3, #8]
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781a      	ldrb	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	785a      	ldrb	r2, [r3, #1]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	789a      	ldrb	r2, [r3, #2]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	78da      	ldrb	r2, [r3, #3]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	3304      	adds	r3, #4
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	b29a      	uxth	r2, r3
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	3305      	adds	r3, #5
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	b29b      	uxth	r3, r3
 800792e:	4313      	orrs	r3, r2
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	799a      	ldrb	r2, [r3, #6]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	719a      	strb	r2, [r3, #6]
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800794a:	b480      	push	{r7}
 800794c:	b087      	sub	sp, #28
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	4613      	mov	r3, r2
 8007956:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3301      	adds	r3, #1
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b03      	cmp	r3, #3
 8007960:	d120      	bne.n	80079a4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	1e9a      	subs	r2, r3, #2
 8007968:	88fb      	ldrh	r3, [r7, #6]
 800796a:	4293      	cmp	r3, r2
 800796c:	bf28      	it	cs
 800796e:	4613      	movcs	r3, r2
 8007970:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3302      	adds	r3, #2
 8007976:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007978:	2300      	movs	r3, #0
 800797a:	82fb      	strh	r3, [r7, #22]
 800797c:	e00b      	b.n	8007996 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800797e:	8afb      	ldrh	r3, [r7, #22]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4413      	add	r3, r2
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	701a      	strb	r2, [r3, #0]
      pdest++;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	3301      	adds	r3, #1
 800798e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007990:	8afb      	ldrh	r3, [r7, #22]
 8007992:	3302      	adds	r3, #2
 8007994:	82fb      	strh	r3, [r7, #22]
 8007996:	8afa      	ldrh	r2, [r7, #22]
 8007998:	8abb      	ldrh	r3, [r7, #20]
 800799a:	429a      	cmp	r2, r3
 800799c:	d3ef      	bcc.n	800797e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2200      	movs	r2, #0
 80079a2:	701a      	strb	r2, [r3, #0]
  }
}
 80079a4:	bf00      	nop
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	881a      	ldrh	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	4413      	add	r3, r2
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4413      	add	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079d8:	68fb      	ldr	r3, [r7, #12]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	4613      	mov	r3, r2
 80079f2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80079f4:	2301      	movs	r3, #1
 80079f6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	789b      	ldrb	r3, [r3, #2]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d002      	beq.n	8007a06 <USBH_CtlReq+0x20>
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d00f      	beq.n	8007a24 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007a04:	e027      	b.n	8007a56 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	75fb      	strb	r3, [r7, #23]
      break;
 8007a22:	e018      	b.n	8007a56 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f81b 	bl	8007a60 <USBH_HandleControl>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <USBH_CtlReq+0x54>
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d106      	bne.n	8007a48 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	761a      	strb	r2, [r3, #24]
      break;
 8007a46:	e005      	b.n	8007a54 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d102      	bne.n	8007a54 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	709a      	strb	r2, [r3, #2]
      break;
 8007a54:	bf00      	nop
  }
  return status;
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	7e1b      	ldrb	r3, [r3, #24]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	2b0a      	cmp	r3, #10
 8007a78:	f200 8156 	bhi.w	8007d28 <USBH_HandleControl+0x2c8>
 8007a7c:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <USBH_HandleControl+0x24>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	08007acb 	.word	0x08007acb
 8007a8c:	08007b35 	.word	0x08007b35
 8007a90:	08007b5b 	.word	0x08007b5b
 8007a94:	08007b93 	.word	0x08007b93
 8007a98:	08007bbd 	.word	0x08007bbd
 8007a9c:	08007c0f 	.word	0x08007c0f
 8007aa0:	08007c31 	.word	0x08007c31
 8007aa4:	08007c6d 	.word	0x08007c6d
 8007aa8:	08007c93 	.word	0x08007c93
 8007aac:	08007cd1 	.word	0x08007cd1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f103 0110 	add.w	r1, r3, #16
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	795b      	ldrb	r3, [r3, #5]
 8007aba:	461a      	mov	r2, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f943 	bl	8007d48 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	761a      	strb	r2, [r3, #24]
      break;
 8007ac8:	e139      	b.n	8007d3e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	795b      	ldrb	r3, [r3, #5]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fcc5 	bl	8008460 <USBH_LL_GetURBState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d11e      	bne.n	8007b1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7c1b      	ldrb	r3, [r3, #16]
 8007ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ae8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	8adb      	ldrh	r3, [r3, #22]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007af2:	7b7b      	ldrb	r3, [r7, #13]
 8007af4:	2b80      	cmp	r3, #128	; 0x80
 8007af6:	d103      	bne.n	8007b00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2203      	movs	r2, #3
 8007afc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007afe:	e115      	b.n	8007d2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2205      	movs	r2, #5
 8007b04:	761a      	strb	r2, [r3, #24]
      break;
 8007b06:	e111      	b.n	8007d2c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007b08:	7b7b      	ldrb	r3, [r7, #13]
 8007b0a:	2b80      	cmp	r3, #128	; 0x80
 8007b0c:	d103      	bne.n	8007b16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2209      	movs	r2, #9
 8007b12:	761a      	strb	r2, [r3, #24]
      break;
 8007b14:	e10a      	b.n	8007d2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2207      	movs	r2, #7
 8007b1a:	761a      	strb	r2, [r3, #24]
      break;
 8007b1c:	e106      	b.n	8007d2c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d003      	beq.n	8007b2c <USBH_HandleControl+0xcc>
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	f040 8100 	bne.w	8007d2c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	220b      	movs	r2, #11
 8007b30:	761a      	strb	r2, [r3, #24]
      break;
 8007b32:	e0fb      	b.n	8007d2c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6899      	ldr	r1, [r3, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	899a      	ldrh	r2, [r3, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	791b      	ldrb	r3, [r3, #4]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f93a 	bl	8007dc6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2204      	movs	r2, #4
 8007b56:	761a      	strb	r2, [r3, #24]
      break;
 8007b58:	e0f1      	b.n	8007d3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	791b      	ldrb	r3, [r3, #4]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc7d 	bl	8008460 <USBH_LL_GetURBState>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d102      	bne.n	8007b76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2209      	movs	r2, #9
 8007b74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	2b05      	cmp	r3, #5
 8007b7a:	d102      	bne.n	8007b82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b80:	e0d6      	b.n	8007d30 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	f040 80d3 	bne.w	8007d30 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	220b      	movs	r2, #11
 8007b8e:	761a      	strb	r2, [r3, #24]
      break;
 8007b90:	e0ce      	b.n	8007d30 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6899      	ldr	r1, [r3, #8]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	899a      	ldrh	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	795b      	ldrb	r3, [r3, #5]
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	9000      	str	r0, [sp, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f8ea 	bl	8007d7c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2206      	movs	r2, #6
 8007bb8:	761a      	strb	r2, [r3, #24]
      break;
 8007bba:	e0c0      	b.n	8007d3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	795b      	ldrb	r3, [r3, #5]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fc4c 	bl	8008460 <USBH_LL_GetURBState>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d103      	bne.n	8007bda <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2207      	movs	r2, #7
 8007bd6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007bd8:	e0ac      	b.n	8007d34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b05      	cmp	r3, #5
 8007bde:	d105      	bne.n	8007bec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	220c      	movs	r2, #12
 8007be4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007be6:	2303      	movs	r3, #3
 8007be8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bea:	e0a3      	b.n	8007d34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d103      	bne.n	8007bfa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2205      	movs	r2, #5
 8007bf6:	761a      	strb	r2, [r3, #24]
      break;
 8007bf8:	e09c      	b.n	8007d34 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	f040 8099 	bne.w	8007d34 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	220b      	movs	r2, #11
 8007c06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0c:	e092      	b.n	8007d34 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	791b      	ldrb	r3, [r3, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	2100      	movs	r1, #0
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8d5 	bl	8007dc6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	761a      	strb	r2, [r3, #24]

      break;
 8007c2e:	e086      	b.n	8007d3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	791b      	ldrb	r3, [r3, #4]
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fc12 	bl	8008460 <USBH_LL_GetURBState>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d105      	bne.n	8007c52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	220d      	movs	r2, #13
 8007c4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c50:	e072      	b.n	8007d38 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d103      	bne.n	8007c60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	220b      	movs	r2, #11
 8007c5c:	761a      	strb	r2, [r3, #24]
      break;
 8007c5e:	e06b      	b.n	8007d38 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	d168      	bne.n	8007d38 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007c66:	2303      	movs	r3, #3
 8007c68:	73fb      	strb	r3, [r7, #15]
      break;
 8007c6a:	e065      	b.n	8007d38 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	795b      	ldrb	r3, [r3, #5]
 8007c70:	2201      	movs	r2, #1
 8007c72:	9200      	str	r2, [sp, #0]
 8007c74:	2200      	movs	r2, #0
 8007c76:	2100      	movs	r1, #0
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f87f 	bl	8007d7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	220a      	movs	r2, #10
 8007c8e:	761a      	strb	r2, [r3, #24]
      break;
 8007c90:	e055      	b.n	8007d3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	795b      	ldrb	r3, [r3, #5]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fbe1 	bl	8008460 <USBH_LL_GetURBState>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d105      	bne.n	8007cb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	220d      	movs	r2, #13
 8007cb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cb2:	e043      	b.n	8007d3c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d103      	bne.n	8007cc2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2209      	movs	r2, #9
 8007cbe:	761a      	strb	r2, [r3, #24]
      break;
 8007cc0:	e03c      	b.n	8007d3c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d139      	bne.n	8007d3c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	220b      	movs	r2, #11
 8007ccc:	761a      	strb	r2, [r3, #24]
      break;
 8007cce:	e035      	b.n	8007d3c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	7e5b      	ldrb	r3, [r3, #25]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	765a      	strb	r2, [r3, #25]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7e5b      	ldrb	r3, [r3, #25]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d806      	bhi.n	8007cf2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007cf0:	e025      	b.n	8007d3e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cf8:	2106      	movs	r1, #6
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	795b      	ldrb	r3, [r3, #5]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f90c 	bl	8007f28 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	791b      	ldrb	r3, [r3, #4]
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f906 	bl	8007f28 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007d22:	2302      	movs	r3, #2
 8007d24:	73fb      	strb	r3, [r7, #15]
      break;
 8007d26:	e00a      	b.n	8007d3e <USBH_HandleControl+0x2de>

    default:
      break;
 8007d28:	bf00      	nop
 8007d2a:	e008      	b.n	8007d3e <USBH_HandleControl+0x2de>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e006      	b.n	8007d3e <USBH_HandleControl+0x2de>
      break;
 8007d30:	bf00      	nop
 8007d32:	e004      	b.n	8007d3e <USBH_HandleControl+0x2de>
      break;
 8007d34:	bf00      	nop
 8007d36:	e002      	b.n	8007d3e <USBH_HandleControl+0x2de>
      break;
 8007d38:	bf00      	nop
 8007d3a:	e000      	b.n	8007d3e <USBH_HandleControl+0x2de>
      break;
 8007d3c:	bf00      	nop
  }

  return status;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af04      	add	r7, sp, #16
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d56:	79f9      	ldrb	r1, [r7, #7]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	9303      	str	r3, [sp, #12]
 8007d5c:	2308      	movs	r3, #8
 8007d5e:	9302      	str	r3, [sp, #8]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	2300      	movs	r3, #0
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 fb46 	bl	80083fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af04      	add	r7, sp, #16
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4611      	mov	r1, r2
 8007d88:	461a      	mov	r2, r3
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	80fb      	strh	r3, [r7, #6]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007da0:	7979      	ldrb	r1, [r7, #5]
 8007da2:	7e3b      	ldrb	r3, [r7, #24]
 8007da4:	9303      	str	r3, [sp, #12]
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	9302      	str	r3, [sp, #8]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	2301      	movs	r3, #1
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	2300      	movs	r3, #0
 8007db4:	2200      	movs	r2, #0
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fb21 	bl	80083fe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b088      	sub	sp, #32
 8007dca:	af04      	add	r7, sp, #16
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	80fb      	strh	r3, [r7, #6]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ddc:	7979      	ldrb	r1, [r7, #5]
 8007dde:	2300      	movs	r3, #0
 8007de0:	9303      	str	r3, [sp, #12]
 8007de2:	88fb      	ldrh	r3, [r7, #6]
 8007de4:	9302      	str	r3, [sp, #8]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	2301      	movs	r3, #1
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	2300      	movs	r3, #0
 8007df0:	2201      	movs	r2, #1
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 fb03 	bl	80083fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007df8:	2300      	movs	r3, #0

}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b088      	sub	sp, #32
 8007e06:	af04      	add	r7, sp, #16
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	461a      	mov	r2, r3
 8007e10:	460b      	mov	r3, r1
 8007e12:	80fb      	strh	r3, [r7, #6]
 8007e14:	4613      	mov	r3, r2
 8007e16:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e26:	7979      	ldrb	r1, [r7, #5]
 8007e28:	7e3b      	ldrb	r3, [r7, #24]
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	88fb      	ldrh	r3, [r7, #6]
 8007e2e:	9302      	str	r3, [sp, #8]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	2301      	movs	r3, #1
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	2302      	movs	r3, #2
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fade 	bl	80083fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af04      	add	r7, sp, #16
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	4611      	mov	r1, r2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	80fb      	strh	r3, [r7, #6]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e62:	7979      	ldrb	r1, [r7, #5]
 8007e64:	2300      	movs	r3, #0
 8007e66:	9303      	str	r3, [sp, #12]
 8007e68:	88fb      	ldrh	r3, [r7, #6]
 8007e6a:	9302      	str	r3, [sp, #8]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	2301      	movs	r3, #1
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2302      	movs	r3, #2
 8007e76:	2201      	movs	r2, #1
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fac0 	bl	80083fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af04      	add	r7, sp, #16
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	4608      	mov	r0, r1
 8007e92:	4611      	mov	r1, r2
 8007e94:	461a      	mov	r2, r3
 8007e96:	4603      	mov	r3, r0
 8007e98:	70fb      	strb	r3, [r7, #3]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70bb      	strb	r3, [r7, #2]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007ea2:	7878      	ldrb	r0, [r7, #1]
 8007ea4:	78ba      	ldrb	r2, [r7, #2]
 8007ea6:	78f9      	ldrb	r1, [r7, #3]
 8007ea8:	8b3b      	ldrh	r3, [r7, #24]
 8007eaa:	9302      	str	r3, [sp, #8]
 8007eac:	7d3b      	ldrb	r3, [r7, #20]
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	7c3b      	ldrb	r3, [r7, #16]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa53 	bl	8008362 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa72 	bl	80083c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f836 	bl	8007f64 <USBH_GetFreePipe>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007efc:	89fb      	ldrh	r3, [r7, #14]
 8007efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00a      	beq.n	8007f1c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007f06:	78fa      	ldrb	r2, [r7, #3]
 8007f08:	89fb      	ldrh	r3, [r7, #14]
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	33e0      	adds	r3, #224	; 0xe0
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	440b      	add	r3, r1
 8007f1a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007f1c:	89fb      	ldrh	r3, [r7, #14]
 8007f1e:	b2db      	uxtb	r3, r3
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	2b0a      	cmp	r3, #10
 8007f38:	d80d      	bhi.n	8007f56 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	33e0      	adds	r3, #224	; 0xe0
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	78fb      	ldrb	r3, [r7, #3]
 8007f48:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	33e0      	adds	r3, #224	; 0xe0
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
 8007f74:	e00f      	b.n	8007f96 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	33e0      	adds	r3, #224	; 0xe0
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d102      	bne.n	8007f90 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	e007      	b.n	8007fa0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	3301      	adds	r3, #1
 8007f94:	73fb      	strb	r3, [r7, #15]
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b0a      	cmp	r3, #10
 8007f9a:	d9ec      	bls.n	8007f76 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	490e      	ldr	r1, [pc, #56]	; (8007fec <MX_USB_HOST_Init+0x40>)
 8007fb4:	480e      	ldr	r0, [pc, #56]	; (8007ff0 <MX_USB_HOST_Init+0x44>)
 8007fb6:	f7fe fca1 	bl	80068fc <USBH_Init>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007fc0:	f7f8 fd6a 	bl	8000a98 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007fc4:	490b      	ldr	r1, [pc, #44]	; (8007ff4 <MX_USB_HOST_Init+0x48>)
 8007fc6:	480a      	ldr	r0, [pc, #40]	; (8007ff0 <MX_USB_HOST_Init+0x44>)
 8007fc8:	f7fe fd26 	bl	8006a18 <USBH_RegisterClass>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007fd2:	f7f8 fd61 	bl	8000a98 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007fd6:	4806      	ldr	r0, [pc, #24]	; (8007ff0 <MX_USB_HOST_Init+0x44>)
 8007fd8:	f7fe fdaa 	bl	8006b30 <USBH_Start>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007fe2:	f7f8 fd59 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007fe6:	bf00      	nop
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	0800800d 	.word	0x0800800d
 8007ff0:	200001c0 	.word	0x200001c0
 8007ff4:	2000000c 	.word	0x2000000c

08007ff8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007ffc:	4802      	ldr	r0, [pc, #8]	; (8008008 <MX_USB_HOST_Process+0x10>)
 8007ffe:	f7fe fda7 	bl	8006b50 <USBH_Process>
}
 8008002:	bf00      	nop
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200001c0 	.word	0x200001c0

0800800c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	3b01      	subs	r3, #1
 800801c:	2b04      	cmp	r3, #4
 800801e:	d819      	bhi.n	8008054 <USBH_UserProcess+0x48>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <USBH_UserProcess+0x1c>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	08008055 	.word	0x08008055
 800802c:	08008045 	.word	0x08008045
 8008030:	08008055 	.word	0x08008055
 8008034:	0800804d 	.word	0x0800804d
 8008038:	0800803d 	.word	0x0800803d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800803c:	4b09      	ldr	r3, [pc, #36]	; (8008064 <USBH_UserProcess+0x58>)
 800803e:	2203      	movs	r2, #3
 8008040:	701a      	strb	r2, [r3, #0]
  break;
 8008042:	e008      	b.n	8008056 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008044:	4b07      	ldr	r3, [pc, #28]	; (8008064 <USBH_UserProcess+0x58>)
 8008046:	2202      	movs	r2, #2
 8008048:	701a      	strb	r2, [r3, #0]
  break;
 800804a:	e004      	b.n	8008056 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <USBH_UserProcess+0x58>)
 800804e:	2201      	movs	r2, #1
 8008050:	701a      	strb	r2, [r3, #0]
  break;
 8008052:	e000      	b.n	8008056 <USBH_UserProcess+0x4a>

  default:
  break;
 8008054:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	200000b0 	.word	0x200000b0

08008068 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	; 0x28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008070:	f107 0314 	add.w	r3, r7, #20
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	605a      	str	r2, [r3, #4]
 800807a:	609a      	str	r2, [r3, #8]
 800807c:	60da      	str	r2, [r3, #12]
 800807e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008088:	d147      	bne.n	800811a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800808a:	2300      	movs	r3, #0
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	4b25      	ldr	r3, [pc, #148]	; (8008124 <HAL_HCD_MspInit+0xbc>)
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	4a24      	ldr	r2, [pc, #144]	; (8008124 <HAL_HCD_MspInit+0xbc>)
 8008094:	f043 0301 	orr.w	r3, r3, #1
 8008098:	6313      	str	r3, [r2, #48]	; 0x30
 800809a:	4b22      	ldr	r3, [pc, #136]	; (8008124 <HAL_HCD_MspInit+0xbc>)
 800809c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	613b      	str	r3, [r7, #16]
 80080a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80080a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80080b4:	f107 0314 	add.w	r3, r7, #20
 80080b8:	4619      	mov	r1, r3
 80080ba:	481b      	ldr	r0, [pc, #108]	; (8008128 <HAL_HCD_MspInit+0xc0>)
 80080bc:	f7f9 f878 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80080c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80080c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c6:	2302      	movs	r3, #2
 80080c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080ce:	2300      	movs	r3, #0
 80080d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080d2:	230a      	movs	r3, #10
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080d6:	f107 0314 	add.w	r3, r7, #20
 80080da:	4619      	mov	r1, r3
 80080dc:	4812      	ldr	r0, [pc, #72]	; (8008128 <HAL_HCD_MspInit+0xc0>)
 80080de:	f7f9 f867 	bl	80011b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080e2:	4b10      	ldr	r3, [pc, #64]	; (8008124 <HAL_HCD_MspInit+0xbc>)
 80080e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e6:	4a0f      	ldr	r2, [pc, #60]	; (8008124 <HAL_HCD_MspInit+0xbc>)
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	6353      	str	r3, [r2, #52]	; 0x34
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <HAL_HCD_MspInit+0xbc>)
 80080f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f6:	4a0b      	ldr	r2, [pc, #44]	; (8008124 <HAL_HCD_MspInit+0xbc>)
 80080f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080fc:	6453      	str	r3, [r2, #68]	; 0x44
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <HAL_HCD_MspInit+0xbc>)
 8008100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800810a:	2200      	movs	r2, #0
 800810c:	2100      	movs	r1, #0
 800810e:	2043      	movs	r0, #67	; 0x43
 8008110:	f7f9 f817 	bl	8001142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008114:	2043      	movs	r0, #67	; 0x43
 8008116:	f7f9 f830 	bl	800117a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800811a:	bf00      	nop
 800811c:	3728      	adds	r7, #40	; 0x28
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40023800 	.word	0x40023800
 8008128:	40020000 	.word	0x40020000

0800812c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff f8db 	bl	80072f6 <USBH_LL_IncTimer>
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff f913 	bl	8007382 <USBH_LL_Connect>
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff f91c 	bl	80073b0 <USBH_LL_Disconnect>
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
 800818c:	4613      	mov	r3, r2
 800818e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff f8cd 	bl	800734a <USBH_LL_PortEnabled>
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff f8cd 	bl	8007366 <USBH_LL_PortDisabled>
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d12a      	bne.n	800823c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <USBH_LL_Init+0x74>)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a15      	ldr	r2, [pc, #84]	; (8008248 <USBH_LL_Init+0x74>)
 80081f2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <USBH_LL_Init+0x74>)
 80081f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081fc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80081fe:	4b12      	ldr	r3, [pc, #72]	; (8008248 <USBH_LL_Init+0x74>)
 8008200:	2208      	movs	r2, #8
 8008202:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008204:	4b10      	ldr	r3, [pc, #64]	; (8008248 <USBH_LL_Init+0x74>)
 8008206:	2201      	movs	r2, #1
 8008208:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800820a:	4b0f      	ldr	r3, [pc, #60]	; (8008248 <USBH_LL_Init+0x74>)
 800820c:	2200      	movs	r2, #0
 800820e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <USBH_LL_Init+0x74>)
 8008212:	2202      	movs	r2, #2
 8008214:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008216:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <USBH_LL_Init+0x74>)
 8008218:	2200      	movs	r2, #0
 800821a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800821c:	480a      	ldr	r0, [pc, #40]	; (8008248 <USBH_LL_Init+0x74>)
 800821e:	f7f9 f97c 	bl	800151a <HAL_HCD_Init>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008228:	f7f8 fc36 	bl	8000a98 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800822c:	4806      	ldr	r0, [pc, #24]	; (8008248 <USBH_LL_Init+0x74>)
 800822e:	f7f9 fd60 	bl	8001cf2 <HAL_HCD_GetCurrentFrame>
 8008232:	4603      	mov	r3, r0
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff f84e 	bl	80072d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000598 	.word	0x20000598

0800824c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008262:	4618      	mov	r0, r3
 8008264:	f7f9 fccf 	bl	8001c06 <HAL_HCD_Start>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f95c 	bl	800852c <USBH_Get_USB_Status>
 8008274:	4603      	mov	r3, r0
 8008276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008278:	7bbb      	ldrb	r3, [r7, #14]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008298:	4618      	mov	r0, r3
 800829a:	f7f9 fcd7 	bl	8001c4c <HAL_HCD_Stop>
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 f941 	bl	800852c <USBH_Get_USB_Status>
 80082aa:	4603      	mov	r3, r0
 80082ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7f9 fd1f 	bl	8001d0e <HAL_HCD_GetCurrentSpeed>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d00c      	beq.n	80082f0 <USBH_LL_GetSpeed+0x38>
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d80d      	bhi.n	80082f6 <USBH_LL_GetSpeed+0x3e>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <USBH_LL_GetSpeed+0x2c>
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d003      	beq.n	80082ea <USBH_LL_GetSpeed+0x32>
 80082e2:	e008      	b.n	80082f6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]
    break;
 80082e8:	e008      	b.n	80082fc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80082ea:	2301      	movs	r3, #1
 80082ec:	73fb      	strb	r3, [r7, #15]
    break;
 80082ee:	e005      	b.n	80082fc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80082f0:	2302      	movs	r3, #2
 80082f2:	73fb      	strb	r3, [r7, #15]
    break;
 80082f4:	e002      	b.n	80082fc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80082f6:	2301      	movs	r3, #1
 80082f8:	73fb      	strb	r3, [r7, #15]
    break;
 80082fa:	bf00      	nop
  }
  return  speed;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800831c:	4618      	mov	r0, r3
 800831e:	f7f9 fcb2 	bl	8001c86 <HAL_HCD_ResetPort>
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f8ff 	bl	800852c <USBH_Get_USB_Status>
 800832e:	4603      	mov	r3, r0
 8008330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008332:	7bbb      	ldrb	r3, [r7, #14]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f7f9 fcb9 	bl	8001cca <HAL_HCD_HC_GetXferCount>
 8008358:	4603      	mov	r3, r0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008362:	b590      	push	{r4, r7, lr}
 8008364:	b089      	sub	sp, #36	; 0x24
 8008366:	af04      	add	r7, sp, #16
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	4608      	mov	r0, r1
 800836c:	4611      	mov	r1, r2
 800836e:	461a      	mov	r2, r3
 8008370:	4603      	mov	r3, r0
 8008372:	70fb      	strb	r3, [r7, #3]
 8008374:	460b      	mov	r3, r1
 8008376:	70bb      	strb	r3, [r7, #2]
 8008378:	4613      	mov	r3, r2
 800837a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800838a:	787c      	ldrb	r4, [r7, #1]
 800838c:	78ba      	ldrb	r2, [r7, #2]
 800838e:	78f9      	ldrb	r1, [r7, #3]
 8008390:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008392:	9302      	str	r3, [sp, #8]
 8008394:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	4623      	mov	r3, r4
 80083a2:	f7f9 f91c 	bl	80015de <HAL_HCD_HC_Init>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 f8bd 	bl	800852c <USBH_Get_USB_Status>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd90      	pop	{r4, r7, pc}

080083c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f9 f98c 	bl	80016fc <HAL_HCD_HC_Halt>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f89e 	bl	800852c <USBH_Get_USB_Status>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80083fe:	b590      	push	{r4, r7, lr}
 8008400:	b089      	sub	sp, #36	; 0x24
 8008402:	af04      	add	r7, sp, #16
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	4608      	mov	r0, r1
 8008408:	4611      	mov	r1, r2
 800840a:	461a      	mov	r2, r3
 800840c:	4603      	mov	r3, r0
 800840e:	70fb      	strb	r3, [r7, #3]
 8008410:	460b      	mov	r3, r1
 8008412:	70bb      	strb	r3, [r7, #2]
 8008414:	4613      	mov	r3, r2
 8008416:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008426:	787c      	ldrb	r4, [r7, #1]
 8008428:	78ba      	ldrb	r2, [r7, #2]
 800842a:	78f9      	ldrb	r1, [r7, #3]
 800842c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008430:	9303      	str	r3, [sp, #12]
 8008432:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008434:	9302      	str	r3, [sp, #8]
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	4623      	mov	r3, r4
 8008442:	f7f9 f97f 	bl	8001744 <HAL_HCD_HC_SubmitRequest>
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f86d 	bl	800852c <USBH_Get_USB_Status>
 8008452:	4603      	mov	r3, r0
 8008454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008456:	7bbb      	ldrb	r3, [r7, #14]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	bd90      	pop	{r4, r7, pc}

08008460 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f7f9 fc13 	bl	8001ca2 <HAL_HCD_HC_GetURBState>
 800847c:	4603      	mov	r3, r0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008498:	2b01      	cmp	r3, #1
 800849a:	d103      	bne.n	80084a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f870 	bl	8008584 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80084a4:	20c8      	movs	r0, #200	; 0xc8
 80084a6:	f7f8 fd4d 	bl	8000f44 <HAL_Delay>
  return USBH_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
 80084c0:	4613      	mov	r3, r2
 80084c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	212c      	movs	r1, #44	; 0x2c
 80084d2:	fb01 f303 	mul.w	r3, r1, r3
 80084d6:	4413      	add	r3, r2
 80084d8:	333b      	adds	r3, #59	; 0x3b
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d009      	beq.n	80084f4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	212c      	movs	r1, #44	; 0x2c
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	4413      	add	r3, r2
 80084ec:	3354      	adds	r3, #84	; 0x54
 80084ee:	78ba      	ldrb	r2, [r7, #2]
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	e008      	b.n	8008506 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	212c      	movs	r1, #44	; 0x2c
 80084fa:	fb01 f303 	mul.w	r3, r1, r3
 80084fe:	4413      	add	r3, r2
 8008500:	3355      	adds	r3, #85	; 0x55
 8008502:	78ba      	ldrb	r2, [r7, #2]
 8008504:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7f8 fd11 	bl	8000f44 <HAL_Delay>
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	2b03      	cmp	r3, #3
 800853e:	d817      	bhi.n	8008570 <USBH_Get_USB_Status+0x44>
 8008540:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <USBH_Get_USB_Status+0x1c>)
 8008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008546:	bf00      	nop
 8008548:	08008559 	.word	0x08008559
 800854c:	0800855f 	.word	0x0800855f
 8008550:	08008565 	.word	0x08008565
 8008554:	0800856b 	.word	0x0800856b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	73fb      	strb	r3, [r7, #15]
    break;
 800855c:	e00b      	b.n	8008576 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800855e:	2302      	movs	r3, #2
 8008560:	73fb      	strb	r3, [r7, #15]
    break;
 8008562:	e008      	b.n	8008576 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008564:	2301      	movs	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]
    break;
 8008568:	e005      	b.n	8008576 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800856a:	2302      	movs	r3, #2
 800856c:	73fb      	strb	r3, [r7, #15]
    break;
 800856e:	e002      	b.n	8008576 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008570:	2302      	movs	r3, #2
 8008572:	73fb      	strb	r3, [r7, #15]
    break;
 8008574:	bf00      	nop
  }
  return usb_status;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
 800859c:	e001      	b.n	80085a2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800859e:	2301      	movs	r3, #1
 80085a0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	461a      	mov	r2, r3
 80085a6:	2101      	movs	r1, #1
 80085a8:	4803      	ldr	r0, [pc, #12]	; (80085b8 <MX_DriverVbusFS+0x34>)
 80085aa:	f7f8 ff9d 	bl	80014e8 <HAL_GPIO_WritePin>
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	40020800 	.word	0x40020800

080085bc <__errno>:
 80085bc:	4b01      	ldr	r3, [pc, #4]	; (80085c4 <__errno+0x8>)
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	2000002c 	.word	0x2000002c

080085c8 <__libc_init_array>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	4d0d      	ldr	r5, [pc, #52]	; (8008600 <__libc_init_array+0x38>)
 80085cc:	4c0d      	ldr	r4, [pc, #52]	; (8008604 <__libc_init_array+0x3c>)
 80085ce:	1b64      	subs	r4, r4, r5
 80085d0:	10a4      	asrs	r4, r4, #2
 80085d2:	2600      	movs	r6, #0
 80085d4:	42a6      	cmp	r6, r4
 80085d6:	d109      	bne.n	80085ec <__libc_init_array+0x24>
 80085d8:	4d0b      	ldr	r5, [pc, #44]	; (8008608 <__libc_init_array+0x40>)
 80085da:	4c0c      	ldr	r4, [pc, #48]	; (800860c <__libc_init_array+0x44>)
 80085dc:	f000 f8f8 	bl	80087d0 <_init>
 80085e0:	1b64      	subs	r4, r4, r5
 80085e2:	10a4      	asrs	r4, r4, #2
 80085e4:	2600      	movs	r6, #0
 80085e6:	42a6      	cmp	r6, r4
 80085e8:	d105      	bne.n	80085f6 <__libc_init_array+0x2e>
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f0:	4798      	blx	r3
 80085f2:	3601      	adds	r6, #1
 80085f4:	e7ee      	b.n	80085d4 <__libc_init_array+0xc>
 80085f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085fa:	4798      	blx	r3
 80085fc:	3601      	adds	r6, #1
 80085fe:	e7f2      	b.n	80085e6 <__libc_init_array+0x1e>
 8008600:	0800880c 	.word	0x0800880c
 8008604:	0800880c 	.word	0x0800880c
 8008608:	0800880c 	.word	0x0800880c
 800860c:	08008810 	.word	0x08008810

08008610 <malloc>:
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <malloc+0xc>)
 8008612:	4601      	mov	r1, r0
 8008614:	6818      	ldr	r0, [r3, #0]
 8008616:	f000 b863 	b.w	80086e0 <_malloc_r>
 800861a:	bf00      	nop
 800861c:	2000002c 	.word	0x2000002c

08008620 <free>:
 8008620:	4b02      	ldr	r3, [pc, #8]	; (800862c <free+0xc>)
 8008622:	4601      	mov	r1, r0
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	f000 b80b 	b.w	8008640 <_free_r>
 800862a:	bf00      	nop
 800862c:	2000002c 	.word	0x2000002c

08008630 <memset>:
 8008630:	4402      	add	r2, r0
 8008632:	4603      	mov	r3, r0
 8008634:	4293      	cmp	r3, r2
 8008636:	d100      	bne.n	800863a <memset+0xa>
 8008638:	4770      	bx	lr
 800863a:	f803 1b01 	strb.w	r1, [r3], #1
 800863e:	e7f9      	b.n	8008634 <memset+0x4>

08008640 <_free_r>:
 8008640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008642:	2900      	cmp	r1, #0
 8008644:	d048      	beq.n	80086d8 <_free_r+0x98>
 8008646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800864a:	9001      	str	r0, [sp, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f1a1 0404 	sub.w	r4, r1, #4
 8008652:	bfb8      	it	lt
 8008654:	18e4      	addlt	r4, r4, r3
 8008656:	f000 f8ad 	bl	80087b4 <__malloc_lock>
 800865a:	4a20      	ldr	r2, [pc, #128]	; (80086dc <_free_r+0x9c>)
 800865c:	9801      	ldr	r0, [sp, #4]
 800865e:	6813      	ldr	r3, [r2, #0]
 8008660:	4615      	mov	r5, r2
 8008662:	b933      	cbnz	r3, 8008672 <_free_r+0x32>
 8008664:	6063      	str	r3, [r4, #4]
 8008666:	6014      	str	r4, [r2, #0]
 8008668:	b003      	add	sp, #12
 800866a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800866e:	f000 b8a7 	b.w	80087c0 <__malloc_unlock>
 8008672:	42a3      	cmp	r3, r4
 8008674:	d90b      	bls.n	800868e <_free_r+0x4e>
 8008676:	6821      	ldr	r1, [r4, #0]
 8008678:	1862      	adds	r2, r4, r1
 800867a:	4293      	cmp	r3, r2
 800867c:	bf04      	itt	eq
 800867e:	681a      	ldreq	r2, [r3, #0]
 8008680:	685b      	ldreq	r3, [r3, #4]
 8008682:	6063      	str	r3, [r4, #4]
 8008684:	bf04      	itt	eq
 8008686:	1852      	addeq	r2, r2, r1
 8008688:	6022      	streq	r2, [r4, #0]
 800868a:	602c      	str	r4, [r5, #0]
 800868c:	e7ec      	b.n	8008668 <_free_r+0x28>
 800868e:	461a      	mov	r2, r3
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	b10b      	cbz	r3, 8008698 <_free_r+0x58>
 8008694:	42a3      	cmp	r3, r4
 8008696:	d9fa      	bls.n	800868e <_free_r+0x4e>
 8008698:	6811      	ldr	r1, [r2, #0]
 800869a:	1855      	adds	r5, r2, r1
 800869c:	42a5      	cmp	r5, r4
 800869e:	d10b      	bne.n	80086b8 <_free_r+0x78>
 80086a0:	6824      	ldr	r4, [r4, #0]
 80086a2:	4421      	add	r1, r4
 80086a4:	1854      	adds	r4, r2, r1
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	6011      	str	r1, [r2, #0]
 80086aa:	d1dd      	bne.n	8008668 <_free_r+0x28>
 80086ac:	681c      	ldr	r4, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	6053      	str	r3, [r2, #4]
 80086b2:	4421      	add	r1, r4
 80086b4:	6011      	str	r1, [r2, #0]
 80086b6:	e7d7      	b.n	8008668 <_free_r+0x28>
 80086b8:	d902      	bls.n	80086c0 <_free_r+0x80>
 80086ba:	230c      	movs	r3, #12
 80086bc:	6003      	str	r3, [r0, #0]
 80086be:	e7d3      	b.n	8008668 <_free_r+0x28>
 80086c0:	6825      	ldr	r5, [r4, #0]
 80086c2:	1961      	adds	r1, r4, r5
 80086c4:	428b      	cmp	r3, r1
 80086c6:	bf04      	itt	eq
 80086c8:	6819      	ldreq	r1, [r3, #0]
 80086ca:	685b      	ldreq	r3, [r3, #4]
 80086cc:	6063      	str	r3, [r4, #4]
 80086ce:	bf04      	itt	eq
 80086d0:	1949      	addeq	r1, r1, r5
 80086d2:	6021      	streq	r1, [r4, #0]
 80086d4:	6054      	str	r4, [r2, #4]
 80086d6:	e7c7      	b.n	8008668 <_free_r+0x28>
 80086d8:	b003      	add	sp, #12
 80086da:	bd30      	pop	{r4, r5, pc}
 80086dc:	200000b4 	.word	0x200000b4

080086e0 <_malloc_r>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	1ccd      	adds	r5, r1, #3
 80086e4:	f025 0503 	bic.w	r5, r5, #3
 80086e8:	3508      	adds	r5, #8
 80086ea:	2d0c      	cmp	r5, #12
 80086ec:	bf38      	it	cc
 80086ee:	250c      	movcc	r5, #12
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	4606      	mov	r6, r0
 80086f4:	db01      	blt.n	80086fa <_malloc_r+0x1a>
 80086f6:	42a9      	cmp	r1, r5
 80086f8:	d903      	bls.n	8008702 <_malloc_r+0x22>
 80086fa:	230c      	movs	r3, #12
 80086fc:	6033      	str	r3, [r6, #0]
 80086fe:	2000      	movs	r0, #0
 8008700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008702:	f000 f857 	bl	80087b4 <__malloc_lock>
 8008706:	4921      	ldr	r1, [pc, #132]	; (800878c <_malloc_r+0xac>)
 8008708:	680a      	ldr	r2, [r1, #0]
 800870a:	4614      	mov	r4, r2
 800870c:	b99c      	cbnz	r4, 8008736 <_malloc_r+0x56>
 800870e:	4f20      	ldr	r7, [pc, #128]	; (8008790 <_malloc_r+0xb0>)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	b923      	cbnz	r3, 800871e <_malloc_r+0x3e>
 8008714:	4621      	mov	r1, r4
 8008716:	4630      	mov	r0, r6
 8008718:	f000 f83c 	bl	8008794 <_sbrk_r>
 800871c:	6038      	str	r0, [r7, #0]
 800871e:	4629      	mov	r1, r5
 8008720:	4630      	mov	r0, r6
 8008722:	f000 f837 	bl	8008794 <_sbrk_r>
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	d123      	bne.n	8008772 <_malloc_r+0x92>
 800872a:	230c      	movs	r3, #12
 800872c:	6033      	str	r3, [r6, #0]
 800872e:	4630      	mov	r0, r6
 8008730:	f000 f846 	bl	80087c0 <__malloc_unlock>
 8008734:	e7e3      	b.n	80086fe <_malloc_r+0x1e>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	1b5b      	subs	r3, r3, r5
 800873a:	d417      	bmi.n	800876c <_malloc_r+0x8c>
 800873c:	2b0b      	cmp	r3, #11
 800873e:	d903      	bls.n	8008748 <_malloc_r+0x68>
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	441c      	add	r4, r3
 8008744:	6025      	str	r5, [r4, #0]
 8008746:	e004      	b.n	8008752 <_malloc_r+0x72>
 8008748:	6863      	ldr	r3, [r4, #4]
 800874a:	42a2      	cmp	r2, r4
 800874c:	bf0c      	ite	eq
 800874e:	600b      	streq	r3, [r1, #0]
 8008750:	6053      	strne	r3, [r2, #4]
 8008752:	4630      	mov	r0, r6
 8008754:	f000 f834 	bl	80087c0 <__malloc_unlock>
 8008758:	f104 000b 	add.w	r0, r4, #11
 800875c:	1d23      	adds	r3, r4, #4
 800875e:	f020 0007 	bic.w	r0, r0, #7
 8008762:	1ac2      	subs	r2, r0, r3
 8008764:	d0cc      	beq.n	8008700 <_malloc_r+0x20>
 8008766:	1a1b      	subs	r3, r3, r0
 8008768:	50a3      	str	r3, [r4, r2]
 800876a:	e7c9      	b.n	8008700 <_malloc_r+0x20>
 800876c:	4622      	mov	r2, r4
 800876e:	6864      	ldr	r4, [r4, #4]
 8008770:	e7cc      	b.n	800870c <_malloc_r+0x2c>
 8008772:	1cc4      	adds	r4, r0, #3
 8008774:	f024 0403 	bic.w	r4, r4, #3
 8008778:	42a0      	cmp	r0, r4
 800877a:	d0e3      	beq.n	8008744 <_malloc_r+0x64>
 800877c:	1a21      	subs	r1, r4, r0
 800877e:	4630      	mov	r0, r6
 8008780:	f000 f808 	bl	8008794 <_sbrk_r>
 8008784:	3001      	adds	r0, #1
 8008786:	d1dd      	bne.n	8008744 <_malloc_r+0x64>
 8008788:	e7cf      	b.n	800872a <_malloc_r+0x4a>
 800878a:	bf00      	nop
 800878c:	200000b4 	.word	0x200000b4
 8008790:	200000b8 	.word	0x200000b8

08008794 <_sbrk_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d06      	ldr	r5, [pc, #24]	; (80087b0 <_sbrk_r+0x1c>)
 8008798:	2300      	movs	r3, #0
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	602b      	str	r3, [r5, #0]
 80087a0:	f7f8 faec 	bl	8000d7c <_sbrk>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_sbrk_r+0x1a>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_sbrk_r+0x1a>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	2000089c 	.word	0x2000089c

080087b4 <__malloc_lock>:
 80087b4:	4801      	ldr	r0, [pc, #4]	; (80087bc <__malloc_lock+0x8>)
 80087b6:	f000 b809 	b.w	80087cc <__retarget_lock_acquire_recursive>
 80087ba:	bf00      	nop
 80087bc:	200008a4 	.word	0x200008a4

080087c0 <__malloc_unlock>:
 80087c0:	4801      	ldr	r0, [pc, #4]	; (80087c8 <__malloc_unlock+0x8>)
 80087c2:	f000 b804 	b.w	80087ce <__retarget_lock_release_recursive>
 80087c6:	bf00      	nop
 80087c8:	200008a4 	.word	0x200008a4

080087cc <__retarget_lock_acquire_recursive>:
 80087cc:	4770      	bx	lr

080087ce <__retarget_lock_release_recursive>:
 80087ce:	4770      	bx	lr

080087d0 <_init>:
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d2:	bf00      	nop
 80087d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d6:	bc08      	pop	{r3}
 80087d8:	469e      	mov	lr, r3
 80087da:	4770      	bx	lr

080087dc <_fini>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	bf00      	nop
 80087e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e2:	bc08      	pop	{r3}
 80087e4:	469e      	mov	lr, r3
 80087e6:	4770      	bx	lr
