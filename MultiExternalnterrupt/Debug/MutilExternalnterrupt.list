
MutilExternalnterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d60  08007d60  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d68  08007d68  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000818  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a8  200008a8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a205  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a38  00000000  00000000  0003a2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  0003dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  0003ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a25  00000000  00000000  0003fdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017087  00000000  00000000  00063815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb677  00000000  00000000  0007a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145f13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048f0  00000000  00000000  00145f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d2c 	.word	0x08007d2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007d2c 	.word	0x08007d2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
	i++;
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <HAL_GPIO_EXTI_Callback+0x58>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	4a11      	ldr	r2, [pc, #68]	; (8000518 <HAL_GPIO_EXTI_Callback+0x58>)
 80004d2:	6013      	str	r3, [r2, #0]

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 80004d4:	2101      	movs	r1, #1
 80004d6:	4811      	ldr	r0, [pc, #68]	; (800051c <HAL_GPIO_EXTI_Callback+0x5c>)
 80004d8:	f000 ff8a 	bl	80013f0 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d003      	beq.n	80004ea <HAL_GPIO_EXTI_Callback+0x2a>
		count = 250;
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <HAL_GPIO_EXTI_Callback+0x60>)
 80004e4:	22fa      	movs	r2, #250	; 0xfa
 80004e6:	601a      	str	r2, [r3, #0]

		count = 2500*2;
		i=0;
		}

	}
 80004e8:	e011      	b.n	800050e <HAL_GPIO_EXTI_Callback+0x4e>
	else	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 80004ea:	2102      	movs	r1, #2
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <HAL_GPIO_EXTI_Callback+0x5c>)
 80004ee:	f000 ff7f 	bl	80013f0 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d003      	beq.n	8000500 <HAL_GPIO_EXTI_Callback+0x40>
		count = 250;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <HAL_GPIO_EXTI_Callback+0x60>)
 80004fa:	22fa      	movs	r2, #250	; 0xfa
 80004fc:	601a      	str	r2, [r3, #0]
	}
 80004fe:	e006      	b.n	800050e <HAL_GPIO_EXTI_Callback+0x4e>
		count = 2500*2;
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <HAL_GPIO_EXTI_Callback+0x60>)
 8000502:	f241 3288 	movw	r2, #5000	; 0x1388
 8000506:	601a      	str	r2, [r3, #0]
		i=0;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <HAL_GPIO_EXTI_Callback+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
	}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200000b0 	.word	0x200000b0
 800051c:	40020000 	.word	0x40020000
 8000520:	200000ac 	.word	0x200000ac

08000524 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000528:	f000 fc1e 	bl	8000d68 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800052c:	f000 f81c 	bl	8000568 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000530:	f000 f918 	bl	8000764 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000534:	f000 f882 	bl	800063c <MX_I2C1_Init>
	MX_I2S3_Init();
 8000538:	f000 f8ae 	bl	8000698 <MX_I2S3_Init>
	MX_SPI1_Init();
 800053c:	f000 f8dc 	bl	80006f8 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 8000540:	f006 ffe2 	bl	8007508 <MX_USB_HOST_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000544:	f007 f806 	bl	8007554 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 8000548:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <main+0x3c>)
 800054e:	f000 ff80 	bl	8001452 <HAL_GPIO_TogglePin>
		HAL_Delay(count);
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <main+0x40>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fc78 	bl	8000e4c <HAL_Delay>
		MX_USB_HOST_Process();
 800055c:	e7f2      	b.n	8000544 <main+0x20>
 800055e:	bf00      	nop
 8000560:	40020c00 	.word	0x40020c00
 8000564:	200000ac 	.word	0x200000ac

08000568 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f007 fb08 	bl	8007b8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fab6 	bl	8003b60 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
		Error_Handler();
 80005fa:	f000 f9bb 	bl	8000974 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2105      	movs	r1, #5
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fd17 	bl	8004050 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc4>
		Error_Handler();
 8000628:	f000 f9a4 	bl	8000974 <Error_Handler>
	}
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x50>)
 800067a:	f002 fc8d 	bl	8002f98 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000684:	f000 f976 	bl	8000974 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000c4 	.word	0x200000c4
 8000690:	40005400 	.word	0x40005400
 8000694:	000186a0 	.word	0x000186a0

08000698 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_I2S3_Init+0x54>)
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <MX_I2S3_Init+0x58>)
 80006a0:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2S3_Init+0x54>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_I2S3_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_I2S3_Init+0x54>)
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_I2S3_Init+0x54>)
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <MX_I2S3_Init+0x5c>)
 80006c2:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2S3_Init+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_I2S3_Init+0x54>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2S3_Init+0x54>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_I2S3_Init+0x54>)
 80006d8:	f002 fda2 	bl	8003220 <HAL_I2S_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2S3_Init+0x4e>
		Error_Handler();
 80006e2:	f000 f947 	bl	8000974 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000170 	.word	0x20000170
 80006f0:	40003c00 	.word	0x40003c00
 80006f4:	00017700 	.word	0x00017700

080006f8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_SPI1_Init+0x64>)
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <MX_SPI1_Init+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000708:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_SPI1_Init+0x64>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_SPI1_Init+0x64>)
 8000744:	220a      	movs	r2, #10
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_SPI1_Init+0x64>)
 800074a:	f003 ffa9 	bl	80046a0 <HAL_SPI_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000754:	f000 f90e 	bl	8000974 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000118 	.word	0x20000118
 8000760:	40013000 	.word	0x40013000

08000764 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	4b77      	ldr	r3, [pc, #476]	; (800095c <MX_GPIO_Init+0x1f8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a76      	ldr	r2, [pc, #472]	; (800095c <MX_GPIO_Init+0x1f8>)
 8000784:	f043 0310 	orr.w	r3, r3, #16
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b74      	ldr	r3, [pc, #464]	; (800095c <MX_GPIO_Init+0x1f8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b70      	ldr	r3, [pc, #448]	; (800095c <MX_GPIO_Init+0x1f8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a6f      	ldr	r2, [pc, #444]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b6d      	ldr	r3, [pc, #436]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b69      	ldr	r3, [pc, #420]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a68      	ldr	r2, [pc, #416]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b66      	ldr	r3, [pc, #408]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b62      	ldr	r3, [pc, #392]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a61      	ldr	r2, [pc, #388]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b5f      	ldr	r3, [pc, #380]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b5b      	ldr	r3, [pc, #364]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a5a      	ldr	r2, [pc, #360]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b58      	ldr	r3, [pc, #352]	; (800095c <MX_GPIO_Init+0x1f8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b54      	ldr	r3, [pc, #336]	; (800095c <MX_GPIO_Init+0x1f8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a53      	ldr	r2, [pc, #332]	; (800095c <MX_GPIO_Init+0x1f8>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b51      	ldr	r3, [pc, #324]	; (800095c <MX_GPIO_Init+0x1f8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2108      	movs	r1, #8
 8000826:	484e      	ldr	r0, [pc, #312]	; (8000960 <MX_GPIO_Init+0x1fc>)
 8000828:	f000 fdfa 	bl	8001420 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port,
 800082c:	2201      	movs	r2, #1
 800082e:	2101      	movs	r1, #1
 8000830:	484c      	ldr	r0, [pc, #304]	; (8000964 <MX_GPIO_Init+0x200>)
 8000832:	f000 fdf5 	bl	8001420 <HAL_GPIO_WritePin>
	OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000836:	2200      	movs	r2, #0
 8000838:	f24f 0110 	movw	r1, #61456	; 0xf010
 800083c:	484a      	ldr	r0, [pc, #296]	; (8000968 <MX_GPIO_Init+0x204>)
 800083e:	f000 fdef 	bl	8001420 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4841      	ldr	r0, [pc, #260]	; (8000960 <MX_GPIO_Init+0x1fc>)
 800085a:	f000 fc2d 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800085e:	2301      	movs	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	483b      	ldr	r0, [pc, #236]	; (8000964 <MX_GPIO_Init+0x200>)
 8000876:	f000 fc1f 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800087a:	2308      	movs	r3, #8
 800087c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088a:	2305      	movs	r3, #5
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4833      	ldr	r0, [pc, #204]	; (8000964 <MX_GPIO_Init+0x200>)
 8000896:	f000 fc0f 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 800089a:	2307      	movs	r3, #7
 800089c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008a4:	2302      	movs	r3, #2
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	482f      	ldr	r0, [pc, #188]	; (800096c <MX_GPIO_Init+0x208>)
 80008b0:	f000 fc02 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	482a      	ldr	r0, [pc, #168]	; (8000970 <MX_GPIO_Init+0x20c>)
 80008c8:	f000 fbf6 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x20c>)
 80008ea:	f000 fbe5 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80008ee:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4818      	ldr	r0, [pc, #96]	; (8000968 <MX_GPIO_Init+0x204>)
 8000908:	f000 fbd6 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800090c:	2320      	movs	r3, #32
 800090e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4812      	ldr	r0, [pc, #72]	; (8000968 <MX_GPIO_Init+0x204>)
 8000920:	f000 fbca 	bl	80010b8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2006      	movs	r0, #6
 800092a:	f000 fb8e 	bl	800104a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800092e:	2006      	movs	r0, #6
 8000930:	f000 fba7 	bl	8001082 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2007      	movs	r0, #7
 800093a:	f000 fb86 	bl	800104a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800093e:	2007      	movs	r0, #7
 8000940:	f000 fb9f 	bl	8001082 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2008      	movs	r0, #8
 800094a:	f000 fb7e 	bl	800104a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800094e:	2008      	movs	r0, #8
 8000950:	f000 fb97 	bl	8001082 <HAL_NVIC_EnableIRQ>

}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40021000 	.word	0x40021000
 8000964:	40020800 	.word	0x40020800
 8000968:	40020c00 	.word	0x40020c00
 800096c:	40020000 	.word	0x40020000
 8000970:	40020400 	.word	0x40020400

08000974 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009be:	2007      	movs	r0, #7
 80009c0:	f000 fb38 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_I2C_MspInit+0x84>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d12c      	bne.n	8000a4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a14:	2312      	movs	r3, #18
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a20:	2304      	movs	r3, #4
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <HAL_I2C_MspInit+0x8c>)
 8000a2c:	f000 fb44 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40005400 	.word	0x40005400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <HAL_I2S_MspInit+0xf0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d15a      	bne.n	8000b46 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a90:	2301      	movs	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a94:	23c0      	movs	r3, #192	; 0xc0
 8000a96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 fcbd 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000aac:	f7ff ff62 	bl	8000974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b04:	2310      	movs	r3, #16
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b14:	2306      	movs	r3, #6
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <HAL_I2S_MspInit+0xf8>)
 8000b20:	f000 faca 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b24:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b36:	2306      	movs	r3, #6
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <HAL_I2S_MspInit+0xfc>)
 8000b42:	f000 fab9 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	; 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40003c00 	.word	0x40003c00
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020800 	.word	0x40020800

08000b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_SPI_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12b      	bne.n	8000bda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bba:	23e0      	movs	r3, #224	; 0xe0
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_SPI_MspInit+0x8c>)
 8000bd6:	f000 fa6f 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40013000 	.word	0x40013000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f8e6 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 fc1d 	bl	8001488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH1_OSC_OUT_Pin);
 8000c56:	2002      	movs	r0, #2
 8000c58:	f000 fc16 	bl	8001488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT1_Pin);
 8000c64:	2004      	movs	r0, #4
 8000c66:	f000 fc0f 	bl	8001488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <OTG_FS_IRQHandler+0x10>)
 8000c76:	f000 fe89 	bl	800198c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000594 	.word	0x20000594

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f006 ff30 	bl	8007b18 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20020000 	.word	0x20020000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	200000b4 	.word	0x200000b4
 8000cec:	200008a8 	.word	0x200008a8

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1a:	490e      	ldr	r1, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d30:	4c0b      	ldr	r4, [pc, #44]	; (8000d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff ffd7 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f006 feef 	bl	8007b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fbed 	bl	8000524 <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d58:	08007d70 	.word	0x08007d70
  ldr r2, =_sbss
 8000d5c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d60:	200008a8 	.word	0x200008a8

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f94f 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fdf0 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f967 	bl	800109e <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f92f 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200001b8 	.word	0x200001b8

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200001b8 	.word	0x200001b8

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff29 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff3e 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff31 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffa2 	bl	8000ff0 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e16b      	b.n	80013ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 815a 	bne.w	80013a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80b4 	beq.w	80013a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a5f      	ldr	r2, [pc, #380]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125a:	4a5b      	ldr	r2, [pc, #364]	; (80013c8 <HAL_GPIO_Init+0x310>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a52      	ldr	r2, [pc, #328]	; (80013cc <HAL_GPIO_Init+0x314>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d02b      	beq.n	80012de <HAL_GPIO_Init+0x226>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a51      	ldr	r2, [pc, #324]	; (80013d0 <HAL_GPIO_Init+0x318>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x222>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a50      	ldr	r2, [pc, #320]	; (80013d4 <HAL_GPIO_Init+0x31c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x21e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_GPIO_Init+0x320>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x21a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4e      	ldr	r2, [pc, #312]	; (80013dc <HAL_GPIO_Init+0x324>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x216>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4d      	ldr	r2, [pc, #308]	; (80013e0 <HAL_GPIO_Init+0x328>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x212>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <HAL_GPIO_Init+0x32c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x20e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <HAL_GPIO_Init+0x330>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x20a>
 80012be:	2307      	movs	r3, #7
 80012c0:	e00e      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012c2:	2308      	movs	r3, #8
 80012c4:	e00c      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012c6:	2306      	movs	r3, #6
 80012c8:	e00a      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012ca:	2305      	movs	r3, #5
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x310>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001322:	4a32      	ldr	r2, [pc, #200]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_GPIO_Init+0x334>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <HAL_GPIO_Init+0x334>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_GPIO_Init+0x334>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_GPIO_Init+0x334>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f ae90 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40021400 	.word	0x40021400
 80013e4:	40021800 	.word	0x40021800
 80013e8:	40021c00 	.word	0x40021c00
 80013ec:	40013c00 	.word	0x40013c00

080013f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e001      	b.n	8001412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001464:	887a      	ldrh	r2, [r7, #2]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	041a      	lsls	r2, r3, #16
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43d9      	mvns	r1, r3
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	400b      	ands	r3, r1
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f80a 	bl	80004c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40013c00 	.word	0x40013c00

080014b8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	b08f      	sub	sp, #60	; 0x3c
 80014bc:	af0a      	add	r7, sp, #40	; 0x28
 80014be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e054      	b.n	8001574 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d106      	bne.n	80014ea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f006 f86d 	bl	80075c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 f9c4 	bl	8004896 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	687e      	ldr	r6, [r7, #4]
 8001516:	466d      	mov	r5, sp
 8001518:	f106 0410 	add.w	r4, r6, #16
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001528:	e885 0003 	stmia.w	r5, {r0, r1}
 800152c:	1d33      	adds	r3, r6, #4
 800152e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f003 f93e 	bl	80047b2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2101      	movs	r1, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f003 f9bb 	bl	80048b8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	687e      	ldr	r6, [r7, #4]
 800154a:	466d      	mov	r5, sp
 800154c:	f106 0410 	add.w	r4, r6, #16
 8001550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001558:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001560:	1d33      	adds	r3, r6, #4
 8001562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f003 fb21 	bl	8004bac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800157c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af04      	add	r7, sp, #16
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	4608      	mov	r0, r1
 8001586:	4611      	mov	r1, r2
 8001588:	461a      	mov	r2, r3
 800158a:	4603      	mov	r3, r0
 800158c:	70fb      	strb	r3, [r7, #3]
 800158e:	460b      	mov	r3, r1
 8001590:	70bb      	strb	r3, [r7, #2]
 8001592:	4613      	mov	r3, r2
 8001594:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_HCD_HC_Init+0x28>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e076      	b.n	8001692 <HAL_HCD_HC_Init+0x116>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	212c      	movs	r1, #44	; 0x2c
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	333d      	adds	r3, #61	; 0x3d
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	212c      	movs	r1, #44	; 0x2c
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	3338      	adds	r3, #56	; 0x38
 80015cc:	787a      	ldrb	r2, [r7, #1]
 80015ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	212c      	movs	r1, #44	; 0x2c
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	4413      	add	r3, r2
 80015dc:	3340      	adds	r3, #64	; 0x40
 80015de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015e0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	212c      	movs	r1, #44	; 0x2c
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	3339      	adds	r3, #57	; 0x39
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	212c      	movs	r1, #44	; 0x2c
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	4413      	add	r3, r2
 8001600:	333f      	adds	r3, #63	; 0x3f
 8001602:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	78ba      	ldrb	r2, [r7, #2]
 800160c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001610:	b2d0      	uxtb	r0, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	212c      	movs	r1, #44	; 0x2c
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	333a      	adds	r3, #58	; 0x3a
 800161e:	4602      	mov	r2, r0
 8001620:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001622:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001626:	2b00      	cmp	r3, #0
 8001628:	da09      	bge.n	800163e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	212c      	movs	r1, #44	; 0x2c
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	4413      	add	r3, r2
 8001636:	333b      	adds	r3, #59	; 0x3b
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e008      	b.n	8001650 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	212c      	movs	r1, #44	; 0x2c
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	4413      	add	r3, r2
 800164a:	333b      	adds	r3, #59	; 0x3b
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	212c      	movs	r1, #44	; 0x2c
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	4413      	add	r3, r2
 800165c:	333c      	adds	r3, #60	; 0x3c
 800165e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001662:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	787c      	ldrb	r4, [r7, #1]
 800166a:	78ba      	ldrb	r2, [r7, #2]
 800166c:	78f9      	ldrb	r1, [r7, #3]
 800166e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	f897 3020 	ldrb.w	r3, [r7, #32]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4623      	mov	r3, r4
 8001680:	f003 fc0e 	bl	8004ea0 <USB_HC_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}

0800169a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_HCD_HC_Halt+0x1e>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e00f      	b.n	80016d8 <HAL_HCD_HC_Halt+0x3e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fe4a 	bl	8005362 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	70fb      	strb	r3, [r7, #3]
 80016f2:	460b      	mov	r3, r1
 80016f4:	70bb      	strb	r3, [r7, #2]
 80016f6:	4613      	mov	r3, r2
 80016f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	333b      	adds	r3, #59	; 0x3b
 8001708:	78ba      	ldrb	r2, [r7, #2]
 800170a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	333f      	adds	r3, #63	; 0x3f
 800171a:	787a      	ldrb	r2, [r7, #1]
 800171c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800171e:	7c3b      	ldrb	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d112      	bne.n	800174a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3342      	adds	r3, #66	; 0x42
 8001732:	2203      	movs	r2, #3
 8001734:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	333d      	adds	r3, #61	; 0x3d
 8001744:	7f3a      	ldrb	r2, [r7, #28]
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e008      	b.n	800175c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3342      	adds	r3, #66	; 0x42
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b03      	cmp	r3, #3
 8001760:	f200 80c6 	bhi.w	80018f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	0800177d 	.word	0x0800177d
 8001770:	080018dd 	.word	0x080018dd
 8001774:	080017e1 	.word	0x080017e1
 8001778:	0800185f 	.word	0x0800185f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800177c:	7c3b      	ldrb	r3, [r7, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	f040 80b8 	bne.w	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 80b4 	bne.w	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800178c:	8b3b      	ldrh	r3, [r7, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d108      	bne.n	80017a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3355      	adds	r3, #85	; 0x55
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3355      	adds	r3, #85	; 0x55
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	3342      	adds	r3, #66	; 0x42
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ca:	e093      	b.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3342      	adds	r3, #66	; 0x42
 80017da:	2202      	movs	r2, #2
 80017dc:	701a      	strb	r2, [r3, #0]
      break;
 80017de:	e089      	b.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017e0:	78bb      	ldrb	r3, [r7, #2]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11d      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	212c      	movs	r1, #44	; 0x2c
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	3355      	adds	r3, #85	; 0x55
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3342      	adds	r3, #66	; 0x42
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800180c:	e073      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3342      	adds	r3, #66	; 0x42
 800181c:	2202      	movs	r2, #2
 800181e:	701a      	strb	r2, [r3, #0]
      break;
 8001820:	e069      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3354      	adds	r3, #84	; 0x54
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3342      	adds	r3, #66	; 0x42
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
      break;
 8001848:	e055      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3342      	adds	r3, #66	; 0x42
 8001858:	2202      	movs	r2, #2
 800185a:	701a      	strb	r2, [r3, #0]
      break;
 800185c:	e04b      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800185e:	78bb      	ldrb	r3, [r7, #2]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d11d      	bne.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3355      	adds	r3, #85	; 0x55
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3342      	adds	r3, #66	; 0x42
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800188a:	e034      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e02a      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3354      	adds	r3, #84	; 0x54
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3342      	adds	r3, #66	; 0x42
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
      break;
 80018c6:	e016      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	3342      	adds	r3, #66	; 0x42
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
      break;
 80018da:	e00c      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3342      	adds	r3, #66	; 0x42
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
      break;
 80018ee:	e002      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018f0:	bf00      	nop
 80018f2:	e000      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	212c      	movs	r1, #44	; 0x2c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	3344      	adds	r3, #68	; 0x44
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	8b3a      	ldrh	r2, [r7, #24]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	202c      	movs	r0, #44	; 0x2c
 8001910:	fb00 f303 	mul.w	r3, r0, r3
 8001914:	440b      	add	r3, r1
 8001916:	334c      	adds	r3, #76	; 0x4c
 8001918:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	212c      	movs	r1, #44	; 0x2c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	3360      	adds	r3, #96	; 0x60
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3350      	adds	r3, #80	; 0x50
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3339      	adds	r3, #57	; 0x39
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3361      	adds	r3, #97	; 0x61
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	222c      	movs	r2, #44	; 0x2c
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	3338      	adds	r3, #56	; 0x38
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	18d1      	adds	r1, r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	f003 fb9e 	bl	80050bc <USB_HC_StartXfer>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop

0800198c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 f8c1 	bl	8004b2a <USB_GetMode>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	f040 80f6 	bne.w	8001b9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 f8a5 	bl	8004b04 <USB_ReadInterrupts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80ec 	beq.w	8001b9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 f89c 	bl	8004b04 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019d6:	d104      	bne.n	80019e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f88c 	bl	8004b04 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f6:	d104      	bne.n	8001a02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 f87c 	bl	8004b04 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a16:	d104      	bne.n	8001a22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f86c 	bl	8004b04 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d103      	bne.n	8001a3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 f85e 	bl	8004b04 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a52:	d11c      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a6e:	2110      	movs	r1, #16
 8001a70:	6938      	ldr	r0, [r7, #16]
 8001a72:	f002 ff6d 	bl	8004950 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a76:	6938      	ldr	r0, [r7, #16]
 8001a78:	f002 ff8e 	bl	8004998 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 f946 	bl	8004d14 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f005 fe19 	bl	80076c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 f836 	bl	8004b04 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa2:	d102      	bne.n	8001aaa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f001 fa03 	bl	8002eb0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 f828 	bl	8004b04 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d106      	bne.n	8001acc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f005 fde2 	bl	8007688 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 f817 	bl	8004b04 <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d101      	bne.n	8001ae4 <HAL_HCD_IRQHandler+0x158>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_HCD_IRQHandler+0x15a>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d012      	beq.n	8001b10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0210 	bic.w	r2, r2, #16
 8001af8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f001 f906 	bl	8002d0c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0210 	orr.w	r2, r2, #16
 8001b0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fff5 	bl	8004b04 <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b24:	d13a      	bne.n	8001b9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fc08 	bl	8005340 <USB_HC_ReadInterrupt>
 8001b30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e025      	b.n	8001b84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d018      	beq.n	8001b7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b62:	d106      	bne.n	8001b72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4619      	mov	r1, r3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f8ab 	bl	8001cc6 <HCD_HC_IN_IRQHandler>
 8001b70:	e005      	b.n	8001b7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4619      	mov	r1, r3
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fcc6 	bl	800250a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d3d4      	bcc.n	8001b38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b96:	615a      	str	r2, [r3, #20]
 8001b98:	e000      	b.n	8001b9c <HAL_HCD_IRQHandler+0x210>
      return;
 8001b9a:	bf00      	nop
    }
  }
}
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_HCD_Start+0x16>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e013      	b.n	8001be0 <HAL_HCD_Start+0x3e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f908 	bl	8004ddc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fe4f 	bl	8004874 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_HCD_Stop+0x16>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e00d      	b.n	8001c1a <HAL_HCD_Stop+0x32>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fd02 	bl	8005614 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 f8aa 	bl	8004d88 <USB_ResetPort>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3360      	adds	r3, #96	; 0x60
 8001c58:	781b      	ldrb	r3, [r3, #0]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3350      	adds	r3, #80	; 0x50
 8001c80:	681b      	ldr	r3, [r3, #0]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 f8ee 	bl	8004e7c <USB_GetCurrentFrame>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 f8c9 	bl	8004e4e <USB_GetHostSpeed>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d119      	bne.n	8001d2a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	461a      	mov	r2, r3
 8001d04:	2304      	movs	r3, #4
 8001d06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	0151      	lsls	r1, r2, #5
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	440a      	add	r2, r1
 8001d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	60d3      	str	r3, [r2, #12]
 8001d28:	e101      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d40:	d12b      	bne.n	8001d9a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	3361      	adds	r3, #97	; 0x61
 8001d64:	2207      	movs	r2, #7
 8001d66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	0151      	lsls	r1, r2, #5
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	440a      	add	r2, r1
 8001d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fae5 	bl	8005362 <USB_HC_Halt>
 8001d98:	e0c9      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d109      	bne.n	8001dc4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	6093      	str	r3, [r2, #8]
 8001dc2:	e0b4      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d133      	bne.n	8001e42 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	0151      	lsls	r1, r2, #5
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	440a      	add	r2, r1
 8001df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3361      	adds	r3, #97	; 0x61
 8001e08:	2205      	movs	r2, #5
 8001e0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 fa91 	bl	8005362 <USB_HC_Halt>
 8001e40:	e075      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e58:	d134      	bne.n	8001ec4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	0151      	lsls	r1, r2, #5
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	440a      	add	r2, r1
 8001e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	3361      	adds	r3, #97	; 0x61
 8001e88:	2208      	movs	r2, #8
 8001e8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2310      	movs	r3, #16
 8001e9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fa50 	bl	8005362 <USB_HC_Halt>
 8001ec2:	e034      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b80      	cmp	r3, #128	; 0x80
 8001ed8:	d129      	bne.n	8001f2e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	0151      	lsls	r1, r2, #5
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	440a      	add	r2, r1
 8001ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3361      	adds	r3, #97	; 0x61
 8001f08:	2206      	movs	r2, #6
 8001f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fa23 	bl	8005362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f44:	d122      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	0151      	lsls	r1, r2, #5
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	440a      	add	r2, r1
 8001f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 f9f6 	bl	8005362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	461a      	mov	r2, r3
 8001f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f88:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f8a:	e2ba      	b.n	8002502 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	f040 811b 	bne.w	80021da <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d019      	beq.n	8001fe0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3348      	adds	r3, #72	; 0x48
 8001fba:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	0159      	lsls	r1, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fce:	1ad2      	subs	r2, r2, r3
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	202c      	movs	r0, #44	; 0x2c
 8001fd6:	fb00 f303 	mul.w	r3, r0, r3
 8001fda:	440b      	add	r3, r1
 8001fdc:	3350      	adds	r3, #80	; 0x50
 8001fde:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3361      	adds	r3, #97	; 0x61
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	335c      	adds	r3, #92	; 0x5c
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	461a      	mov	r2, r3
 8002012:	2301      	movs	r3, #1
 8002014:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	333f      	adds	r3, #63	; 0x3f
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	333f      	adds	r3, #63	; 0x3f
 8002038:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800203a:	2b02      	cmp	r3, #2
 800203c:	d121      	bne.n	8002082 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	0151      	lsls	r1, r2, #5
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	440a      	add	r2, r1
 8002054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f003 f97a 	bl	8005362 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	461a      	mov	r2, r3
 800207c:	2310      	movs	r3, #16
 800207e:	6093      	str	r3, [r2, #8]
 8002080:	e066      	b.n	8002150 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	333f      	adds	r3, #63	; 0x3f
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d127      	bne.n	80020e6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	0151      	lsls	r1, r2, #5
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	440a      	add	r2, r1
 80020ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020b4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3360      	adds	r3, #96	; 0x60
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	b2d9      	uxtb	r1, r3
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	202c      	movs	r0, #44	; 0x2c
 80020d2:	fb00 f303 	mul.w	r3, r0, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	3360      	adds	r3, #96	; 0x60
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f005 fafc 	bl	80076dc <HAL_HCD_HC_NotifyURBChange_Callback>
 80020e4:	e034      	b.n	8002150 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	333f      	adds	r3, #63	; 0x3f
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d12a      	bne.n	8002150 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3360      	adds	r3, #96	; 0x60
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3354      	adds	r3, #84	; 0x54
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f083 0301 	eor.w	r3, r3, #1
 8002120:	b2d8      	uxtb	r0, r3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3354      	adds	r3, #84	; 0x54
 8002130:	4602      	mov	r2, r0
 8002132:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	b2d9      	uxtb	r1, r3
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	202c      	movs	r0, #44	; 0x2c
 800213e:	fb00 f303 	mul.w	r3, r0, r3
 8002142:	4413      	add	r3, r2
 8002144:	3360      	adds	r3, #96	; 0x60
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f005 fac6 	bl	80076dc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d12b      	bne.n	80021b0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	3348      	adds	r3, #72	; 0x48
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	202c      	movs	r0, #44	; 0x2c
 800216e:	fb00 f202 	mul.w	r2, r0, r2
 8002172:	440a      	add	r2, r1
 8002174:	3240      	adds	r2, #64	; 0x40
 8002176:	8812      	ldrh	r2, [r2, #0]
 8002178:	fbb3 f3f2 	udiv	r3, r3, r2
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 81be 	beq.w	8002502 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3354      	adds	r3, #84	; 0x54
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f083 0301 	eor.w	r3, r3, #1
 800219a:	b2d8      	uxtb	r0, r3
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3354      	adds	r3, #84	; 0x54
 80021aa:	4602      	mov	r2, r0
 80021ac:	701a      	strb	r2, [r3, #0]
}
 80021ae:	e1a8      	b.n	8002502 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	3354      	adds	r3, #84	; 0x54
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	f083 0301 	eor.w	r3, r3, #1
 80021c4:	b2d8      	uxtb	r0, r3
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3354      	adds	r3, #84	; 0x54
 80021d4:	4602      	mov	r2, r0
 80021d6:	701a      	strb	r2, [r3, #0]
}
 80021d8:	e193      	b.n	8002502 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	f040 8106 	bne.w	80023fe <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	0151      	lsls	r1, r2, #5
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	440a      	add	r2, r1
 8002208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800220c:	f023 0302 	bic.w	r3, r3, #2
 8002210:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3361      	adds	r3, #97	; 0x61
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d109      	bne.n	800223a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e0c9      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3361      	adds	r3, #97	; 0x61
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b05      	cmp	r3, #5
 800224c:	d109      	bne.n	8002262 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3360      	adds	r3, #96	; 0x60
 800225c:	2205      	movs	r2, #5
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e0b5      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3361      	adds	r3, #97	; 0x61
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d009      	beq.n	800228a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3361      	adds	r3, #97	; 0x61
 8002284:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002286:	2b08      	cmp	r3, #8
 8002288:	d150      	bne.n	800232c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	335c      	adds	r3, #92	; 0x5c
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	202c      	movs	r0, #44	; 0x2c
 80022a2:	fb00 f303 	mul.w	r3, r0, r3
 80022a6:	440b      	add	r3, r1
 80022a8:	335c      	adds	r3, #92	; 0x5c
 80022aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	335c      	adds	r3, #92	; 0x5c
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d912      	bls.n	80022e6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	335c      	adds	r3, #92	; 0x5c
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3360      	adds	r3, #96	; 0x60
 80022e0:	2204      	movs	r2, #4
 80022e2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022e4:	e073      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3360      	adds	r3, #96	; 0x60
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800230e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002316:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800232a:	e050      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3361      	adds	r3, #97	; 0x61
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d122      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3360      	adds	r3, #96	; 0x60
 800234e:	2202      	movs	r2, #2
 8002350:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002368:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002370:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e023      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3361      	adds	r3, #97	; 0x61
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b07      	cmp	r3, #7
 8002398:	d119      	bne.n	80023ce <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	335c      	adds	r3, #92	; 0x5c
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	202c      	movs	r0, #44	; 0x2c
 80023b2:	fb00 f303 	mul.w	r3, r0, r3
 80023b6:	440b      	add	r3, r1
 80023b8:	335c      	adds	r3, #92	; 0x5c
 80023ba:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3360      	adds	r3, #96	; 0x60
 80023ca:	2204      	movs	r2, #4
 80023cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	461a      	mov	r2, r3
 80023dc:	2302      	movs	r3, #2
 80023de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	b2d9      	uxtb	r1, r3
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	202c      	movs	r0, #44	; 0x2c
 80023ea:	fb00 f303 	mul.w	r3, r0, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	3360      	adds	r3, #96	; 0x60
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f005 f970 	bl	80076dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023fc:	e081      	b.n	8002502 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b10      	cmp	r3, #16
 8002412:	d176      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	333f      	adds	r3, #63	; 0x3f
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d121      	bne.n	800246c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	335c      	adds	r3, #92	; 0x5c
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	0151      	lsls	r1, r2, #5
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	440a      	add	r2, r1
 8002450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f002 ff7c 	bl	8005362 <USB_HC_Halt>
 800246a:	e041      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	333f      	adds	r3, #63	; 0x3f
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	333f      	adds	r3, #63	; 0x3f
 800248e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002490:	2b02      	cmp	r3, #2
 8002492:	d12d      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	335c      	adds	r3, #92	; 0x5c
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d120      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3361      	adds	r3, #97	; 0x61
 80024bc:	2203      	movs	r2, #3
 80024be:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	0151      	lsls	r1, r2, #5
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	440a      	add	r2, r1
 80024d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024da:	f043 0302 	orr.w	r3, r3, #2
 80024de:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 ff39 	bl	8005362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	461a      	mov	r2, r3
 80024fe:	2310      	movs	r3, #16
 8002500:	6093      	str	r3, [r2, #8]
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b088      	sub	sp, #32
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d119      	bne.n	800256e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	461a      	mov	r2, r3
 8002548:	2304      	movs	r3, #4
 800254a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	0151      	lsls	r1, r2, #5
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	440a      	add	r2, r1
 8002562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800256c:	e3ca      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b20      	cmp	r3, #32
 8002582:	d13e      	bne.n	8002602 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	461a      	mov	r2, r3
 8002592:	2320      	movs	r3, #32
 8002594:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	333d      	adds	r3, #61	; 0x3d
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	f040 83ac 	bne.w	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	333d      	adds	r3, #61	; 0x3d
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3360      	adds	r3, #96	; 0x60
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	0151      	lsls	r1, r2, #5
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	440a      	add	r2, r1
 80025e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 feb1 	bl	8005362 <USB_HC_Halt>
}
 8002600:	e380      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d122      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	0151      	lsls	r1, r2, #5
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	440a      	add	r2, r1
 8002630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fe8c 	bl	8005362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	461a      	mov	r2, r3
 8002658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800265c:	6093      	str	r3, [r2, #8]
}
 800265e:	e351      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d150      	bne.n	8002718 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	335c      	adds	r3, #92	; 0x5c
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d111      	bne.n	80026c2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	333d      	adds	r3, #61	; 0x3d
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2340      	movs	r3, #64	; 0x40
 80026c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	0151      	lsls	r1, r2, #5
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	440a      	add	r2, r1
 80026d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fe38 	bl	8005362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	461a      	mov	r2, r3
 8002700:	2301      	movs	r3, #1
 8002702:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3361      	adds	r3, #97	; 0x61
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
}
 8002716:	e2f5      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272a:	2b40      	cmp	r3, #64	; 0x40
 800272c:	d13c      	bne.n	80027a8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	3361      	adds	r3, #97	; 0x61
 800273c:	2204      	movs	r2, #4
 800273e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	333d      	adds	r3, #61	; 0x3d
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	335c      	adds	r3, #92	; 0x5c
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fde7 	bl	8005362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	2340      	movs	r3, #64	; 0x40
 80027a4:	6093      	str	r3, [r2, #8]
}
 80027a6:	e2ad      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d12a      	bne.n	8002814 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	461a      	mov	r2, r3
 80027cc:	2308      	movs	r3, #8
 80027ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	0151      	lsls	r1, r2, #5
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	440a      	add	r2, r1
 80027e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fdb1 	bl	8005362 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3361      	adds	r3, #97	; 0x61
 800280e:	2205      	movs	r2, #5
 8002810:	701a      	strb	r2, [r3, #0]
}
 8002812:	e277      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b10      	cmp	r3, #16
 8002828:	d150      	bne.n	80028cc <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	335c      	adds	r3, #92	; 0x5c
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3361      	adds	r3, #97	; 0x61
 800284a:	2203      	movs	r2, #3
 800284c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	333d      	adds	r3, #61	; 0x3d
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d112      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	333c      	adds	r3, #60	; 0x3c
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	333d      	adds	r3, #61	; 0x3d
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	0151      	lsls	r1, r2, #5
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	440a      	add	r2, r1
 800289e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fd55 	bl	8005362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	461a      	mov	r2, r3
 80028c6:	2310      	movs	r3, #16
 80028c8:	6093      	str	r3, [r2, #8]
}
 80028ca:	e21b      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b80      	cmp	r3, #128	; 0x80
 80028e0:	d174      	bne.n	80029cc <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d121      	bne.n	800292e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3361      	adds	r3, #97	; 0x61
 80028f8:	2206      	movs	r2, #6
 80028fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	0151      	lsls	r1, r2, #5
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	440a      	add	r2, r1
 8002912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f002 fd1b 	bl	8005362 <USB_HC_Halt>
 800292c:	e044      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	335c      	adds	r3, #92	; 0x5c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	202c      	movs	r0, #44	; 0x2c
 8002946:	fb00 f303 	mul.w	r3, r0, r3
 800294a:	440b      	add	r3, r1
 800294c:	335c      	adds	r3, #92	; 0x5c
 800294e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	335c      	adds	r3, #92	; 0x5c
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d920      	bls.n	80029a6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	335c      	adds	r3, #92	; 0x5c
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3360      	adds	r3, #96	; 0x60
 8002984:	2204      	movs	r2, #4
 8002986:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	b2d9      	uxtb	r1, r3
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	202c      	movs	r0, #44	; 0x2c
 8002992:	fb00 f303 	mul.w	r3, r0, r3
 8002996:	4413      	add	r3, r2
 8002998:	3360      	adds	r3, #96	; 0x60
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f004 fe9c 	bl	80076dc <HAL_HCD_HC_NotifyURBChange_Callback>
 80029a4:	e008      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3360      	adds	r3, #96	; 0x60
 80029b4:	2202      	movs	r2, #2
 80029b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	461a      	mov	r2, r3
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	6093      	str	r3, [r2, #8]
}
 80029ca:	e19b      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e2:	d134      	bne.n	8002a4e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	0151      	lsls	r1, r2, #5
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	440a      	add	r2, r1
 80029fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 fca7 	bl	8005362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	2310      	movs	r3, #16
 8002a24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3361      	adds	r3, #97	; 0x61
 8002a48:	2208      	movs	r2, #8
 8002a4a:	701a      	strb	r2, [r3, #0]
}
 8002a4c:	e15a      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	f040 814f 	bne.w	8002d04 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	0151      	lsls	r1, r2, #5
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	440a      	add	r2, r1
 8002a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a80:	f023 0302 	bic.w	r3, r3, #2
 8002a84:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3361      	adds	r3, #97	; 0x61
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d17d      	bne.n	8002b96 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3360      	adds	r3, #96	; 0x60
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	333f      	adds	r3, #63	; 0x3f
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d00a      	beq.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	333f      	adds	r3, #63	; 0x3f
 8002ace:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	f040 8100 	bne.w	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d113      	bne.n	8002b06 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3355      	adds	r3, #85	; 0x55
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	f083 0301 	eor.w	r3, r3, #1
 8002af2:	b2d8      	uxtb	r0, r3
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3355      	adds	r3, #85	; 0x55
 8002b02:	4602      	mov	r2, r0
 8002b04:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	f040 80e3 	bne.w	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	334c      	adds	r3, #76	; 0x4c
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80d8 	beq.w	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	334c      	adds	r3, #76	; 0x4c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	202c      	movs	r0, #44	; 0x2c
 8002b3c:	fb00 f202 	mul.w	r2, r0, r2
 8002b40:	440a      	add	r2, r1
 8002b42:	3240      	adds	r2, #64	; 0x40
 8002b44:	8812      	ldrh	r2, [r2, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	202c      	movs	r0, #44	; 0x2c
 8002b50:	fb00 f202 	mul.w	r2, r0, r2
 8002b54:	440a      	add	r2, r1
 8002b56:	3240      	adds	r2, #64	; 0x40
 8002b58:	8812      	ldrh	r2, [r2, #0]
 8002b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80b5 	beq.w	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	3355      	adds	r3, #85	; 0x55
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f083 0301 	eor.w	r3, r3, #1
 8002b80:	b2d8      	uxtb	r0, r3
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3355      	adds	r3, #85	; 0x55
 8002b90:	4602      	mov	r2, r0
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e09f      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3361      	adds	r3, #97	; 0x61
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d109      	bne.n	8002bbe <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3360      	adds	r3, #96	; 0x60
 8002bb8:	2202      	movs	r2, #2
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e08b      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3361      	adds	r3, #97	; 0x61
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d109      	bne.n	8002be6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3360      	adds	r3, #96	; 0x60
 8002be0:	2202      	movs	r2, #2
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e077      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3361      	adds	r3, #97	; 0x61
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d109      	bne.n	8002c0e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3360      	adds	r3, #96	; 0x60
 8002c08:	2205      	movs	r2, #5
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e063      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3361      	adds	r3, #97	; 0x61
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d009      	beq.n	8002c36 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3361      	adds	r3, #97	; 0x61
 8002c30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d14f      	bne.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	335c      	adds	r3, #92	; 0x5c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	202c      	movs	r0, #44	; 0x2c
 8002c4e:	fb00 f303 	mul.w	r3, r0, r3
 8002c52:	440b      	add	r3, r1
 8002c54:	335c      	adds	r3, #92	; 0x5c
 8002c56:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	335c      	adds	r3, #92	; 0x5c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d912      	bls.n	8002c92 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	335c      	adds	r3, #92	; 0x5c
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3360      	adds	r3, #96	; 0x60
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e021      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3360      	adds	r3, #96	; 0x60
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cba:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cc2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	b2d9      	uxtb	r1, r3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	202c      	movs	r0, #44	; 0x2c
 8002cf2:	fb00 f303 	mul.w	r3, r0, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3360      	adds	r3, #96	; 0x60
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f004 fcec 	bl	80076dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d04:	bf00      	nop
 8002d06:	3720      	adds	r7, #32
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	0c5b      	lsrs	r3, r3, #17
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d40:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d004      	beq.n	8002d52 <HCD_RXQLVL_IRQHandler+0x46>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b05      	cmp	r3, #5
 8002d4c:	f000 80a9 	beq.w	8002ea2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d50:	e0aa      	b.n	8002ea8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a6 	beq.w	8002ea6 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3344      	adds	r3, #68	; 0x44
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 809b 	beq.w	8002ea6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3350      	adds	r3, #80	; 0x50
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	441a      	add	r2, r3
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	202c      	movs	r0, #44	; 0x2c
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	440b      	add	r3, r1
 8002d90:	334c      	adds	r3, #76	; 0x4c
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d87a      	bhi.n	8002e8e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3344      	adds	r3, #68	; 0x44
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	b292      	uxth	r2, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f001 fe4f 	bl	8004a54 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3344      	adds	r3, #68	; 0x44
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	441a      	add	r2, r3
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	202c      	movs	r0, #44	; 0x2c
 8002dd0:	fb00 f303 	mul.w	r3, r0, r3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3344      	adds	r3, #68	; 0x44
 8002dd8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3350      	adds	r3, #80	; 0x50
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	441a      	add	r2, r3
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	202c      	movs	r0, #44	; 0x2c
 8002df4:	fb00 f303 	mul.w	r3, r0, r3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3350      	adds	r3, #80	; 0x50
 8002dfc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	0cdb      	lsrs	r3, r3, #19
 8002e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e12:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3340      	adds	r3, #64	; 0x40
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d13c      	bne.n	8002ea6 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d039      	beq.n	8002ea6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e48:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e50:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3354      	adds	r3, #84	; 0x54
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	f083 0301 	eor.w	r3, r3, #1
 8002e78:	b2d8      	uxtb	r0, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3354      	adds	r3, #84	; 0x54
 8002e88:	4602      	mov	r2, r0
 8002e8a:	701a      	strb	r2, [r3, #0]
      break;
 8002e8c:	e00b      	b.n	8002ea6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3360      	adds	r3, #96	; 0x60
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	701a      	strb	r2, [r3, #0]
      break;
 8002ea0:	e001      	b.n	8002ea6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ea6:	bf00      	nop
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3728      	adds	r7, #40	; 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002edc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d10b      	bne.n	8002f00 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f004 fbd6 	bl	80076a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d132      	bne.n	8002f70 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d126      	bne.n	8002f6a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d113      	bne.n	8002f4c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f2e:	d106      	bne.n	8002f3e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 feec 	bl	8004d14 <USB_InitFSLSPClkSel>
 8002f3c:	e011      	b.n	8002f62 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 fee5 	bl	8004d14 <USB_InitFSLSPClkSel>
 8002f4a:	e00a      	b.n	8002f62 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d106      	bne.n	8002f62 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f60:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f004 fbc8 	bl	80076f8 <HAL_HCD_PortEnabled_Callback>
 8002f68:	e002      	b.n	8002f70 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f004 fbd2 	bl	8007714 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d103      	bne.n	8002f82 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f043 0320 	orr.w	r3, r3, #32
 8002f80:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6013      	str	r3, [r2, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e12b      	b.n	8003202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fd06 	bl	80009d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	; 0x24
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f001 f9fc 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a81      	ldr	r2, [pc, #516]	; (800320c <HAL_I2C_Init+0x274>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d807      	bhi.n	800301c <HAL_I2C_Init+0x84>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a80      	ldr	r2, [pc, #512]	; (8003210 <HAL_I2C_Init+0x278>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e006      	b.n	800302a <HAL_I2C_Init+0x92>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a7d      	ldr	r2, [pc, #500]	; (8003214 <HAL_I2C_Init+0x27c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0e7      	b.n	8003202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a78      	ldr	r2, [pc, #480]	; (8003218 <HAL_I2C_Init+0x280>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9b      	lsrs	r3, r3, #18
 800303c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a6a      	ldr	r2, [pc, #424]	; (800320c <HAL_I2C_Init+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d802      	bhi.n	800306c <HAL_I2C_Init+0xd4>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	e009      	b.n	8003080 <HAL_I2C_Init+0xe8>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	4a69      	ldr	r2, [pc, #420]	; (800321c <HAL_I2C_Init+0x284>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	3301      	adds	r3, #1
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	430b      	orrs	r3, r1
 8003086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003092:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	495c      	ldr	r1, [pc, #368]	; (800320c <HAL_I2C_Init+0x274>)
 800309c:	428b      	cmp	r3, r1
 800309e:	d819      	bhi.n	80030d4 <HAL_I2C_Init+0x13c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e59      	subs	r1, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030b4:	400b      	ands	r3, r1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_I2C_Init+0x138>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e59      	subs	r1, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	e051      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d0:	2304      	movs	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x168>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x18e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x196>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1bc>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e128      	b.n	8003484 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a90      	ldr	r2, [pc, #576]	; (800348c <HAL_I2S_Init+0x26c>)
 800324a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7fd fc07 	bl	8000a60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003268:	f023 030f 	bic.w	r3, r3, #15
 800326c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2202      	movs	r2, #2
 8003274:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d060      	beq.n	8003340 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003286:	2310      	movs	r3, #16
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e001      	b.n	8003290 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800328c:	2320      	movs	r3, #32
 800328e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b20      	cmp	r3, #32
 8003296:	d802      	bhi.n	800329e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800329e:	2001      	movs	r0, #1
 80032a0:	f001 f9a0 	bl	80045e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80032a4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ae:	d125      	bne.n	80032fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d010      	beq.n	80032da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	461a      	mov	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	3305      	adds	r3, #5
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	e01f      	b.n	800331a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	3305      	adds	r3, #5
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	e00e      	b.n	800331a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fbb2 f2f3 	udiv	r2, r2, r3
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	461a      	mov	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	3305      	adds	r3, #5
 8003318:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4a5c      	ldr	r2, [pc, #368]	; (8003490 <HAL_I2S_Init+0x270>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	08db      	lsrs	r3, r3, #3
 8003324:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e003      	b.n	8003348 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003340:	2302      	movs	r3, #2
 8003342:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d902      	bls.n	8003354 <HAL_I2S_Init+0x134>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2bff      	cmp	r3, #255	; 0xff
 8003352:	d907      	bls.n	8003364 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f043 0210 	orr.w	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e08f      	b.n	8003484 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	ea42 0103 	orr.w	r1, r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	430a      	orrs	r2, r1
 8003376:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003382:	f023 030f 	bic.w	r3, r3, #15
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6851      	ldr	r1, [r2, #4]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6892      	ldr	r2, [r2, #8]
 800338e:	4311      	orrs	r1, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	68d2      	ldr	r2, [r2, #12]
 8003394:	4311      	orrs	r1, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6992      	ldr	r2, [r2, #24]
 800339a:	430a      	orrs	r2, r1
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d161      	bne.n	8003474 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a38      	ldr	r2, [pc, #224]	; (8003494 <HAL_I2S_Init+0x274>)
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a37      	ldr	r2, [pc, #220]	; (8003498 <HAL_I2S_Init+0x278>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_I2S_Init+0x1a4>
 80033c0:	4b36      	ldr	r3, [pc, #216]	; (800349c <HAL_I2S_Init+0x27c>)
 80033c2:	e001      	b.n	80033c8 <HAL_I2S_Init+0x1a8>
 80033c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	4932      	ldr	r1, [pc, #200]	; (8003498 <HAL_I2S_Init+0x278>)
 80033d0:	428a      	cmp	r2, r1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2S_Init+0x1b8>
 80033d4:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_I2S_Init+0x27c>)
 80033d6:	e001      	b.n	80033dc <HAL_I2S_Init+0x1bc>
 80033d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033e0:	f023 030f 	bic.w	r3, r3, #15
 80033e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2b      	ldr	r2, [pc, #172]	; (8003498 <HAL_I2S_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_I2S_Init+0x1d4>
 80033f0:	4b2a      	ldr	r3, [pc, #168]	; (800349c <HAL_I2S_Init+0x27c>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x1d8>
 80033f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f8:	2202      	movs	r2, #2
 80033fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a25      	ldr	r2, [pc, #148]	; (8003498 <HAL_I2S_Init+0x278>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_I2S_Init+0x1ea>
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_I2S_Init+0x27c>)
 8003408:	e001      	b.n	800340e <HAL_I2S_Init+0x1ee>
 800340a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341a:	d003      	beq.n	8003424 <HAL_I2S_Init+0x204>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e001      	b.n	8003430 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800343a:	4313      	orrs	r3, r2
 800343c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003444:	4313      	orrs	r3, r2
 8003446:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800344e:	4313      	orrs	r3, r2
 8003450:	b29a      	uxth	r2, r3
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	4313      	orrs	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800345c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <HAL_I2S_Init+0x278>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <HAL_I2S_Init+0x24c>
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <HAL_I2S_Init+0x27c>)
 800346a:	e001      	b.n	8003470 <HAL_I2S_Init+0x250>
 800346c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003470:	897a      	ldrh	r2, [r7, #10]
 8003472:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	08003597 	.word	0x08003597
 8003490:	cccccccd 	.word	0xcccccccd
 8003494:	080036ad 	.word	0x080036ad
 8003498:	40003800 	.word	0x40003800
 800349c:	40003400 	.word	0x40003400

080034a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10e      	bne.n	8003530 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003520:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffb8 	bl	80034a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	b292      	uxth	r2, r2
 800354c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	1c9a      	adds	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10e      	bne.n	800358e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800357e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff ff93 	bl	80034b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d13a      	bne.n	8003628 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d109      	bne.n	80035d0 <I2S_IRQHandler+0x3a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d102      	bne.n	80035d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff ffb4 	bl	8003538 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d126      	bne.n	8003628 <I2S_IRQHandler+0x92>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d11f      	bne.n	8003628 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f043 0202 	orr.w	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ff50 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b03      	cmp	r3, #3
 8003632:	d136      	bne.n	80036a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d109      	bne.n	8003652 <I2S_IRQHandler+0xbc>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d102      	bne.n	8003652 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff45 	bl	80034dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b08      	cmp	r3, #8
 800365a:	d122      	bne.n	80036a2 <I2S_IRQHandler+0x10c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b20      	cmp	r3, #32
 8003668:	d11b      	bne.n	80036a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003678:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff13 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4aa2      	ldr	r2, [pc, #648]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036c6:	4ba2      	ldr	r3, [pc, #648]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036c8:	e001      	b.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a9b      	ldr	r2, [pc, #620]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036e4:	4b9a      	ldr	r3, [pc, #616]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036e6:	e001      	b.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d004      	beq.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 8099 	bne.w	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d107      	bne.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f925 	bl	8003968 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9c8 	bl	8003ac8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d13a      	bne.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d035      	beq.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003756:	4b7e      	ldr	r3, [pc, #504]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003758:	e001      	b.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4979      	ldr	r1, [pc, #484]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003766:	428b      	cmp	r3, r1
 8003768:	d101      	bne.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800376a:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800376c:	e001      	b.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800376e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003772:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003776:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003786:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fe88 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b08      	cmp	r3, #8
 80037c0:	f040 80be 	bne.w	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80b8 	beq.w	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a59      	ldr	r2, [pc, #356]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037ea:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ec:	e001      	b.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4954      	ldr	r1, [pc, #336]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037fa:	428b      	cmp	r3, r1
 80037fc:	d101      	bne.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037fe:	4b54      	ldr	r3, [pc, #336]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003800:	e001      	b.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800380a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f043 0204 	orr.w	r2, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fe4a 	bl	80034c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003834:	e084      	b.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d107      	bne.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8be 	bl	80039cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f8fd 	bl	8003a64 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d12f      	bne.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02a      	beq.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800388c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2e      	ldr	r2, [pc, #184]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800389a:	e001      	b.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800389c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4929      	ldr	r1, [pc, #164]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038a8:	428b      	cmp	r3, r1
 80038aa:	d101      	bne.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038ac:	4b28      	ldr	r3, [pc, #160]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038ae:	e001      	b.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f043 0202 	orr.w	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fdfa 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d131      	bne.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02c      	beq.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038f4:	e001      	b.n	80038fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4912      	ldr	r1, [pc, #72]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003902:	428b      	cmp	r3, r1
 8003904:	d101      	bne.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003908:	e001      	b.n	800390e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800390a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003912:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003922:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fdc5 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800393e:	e000      	b.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003940:	bf00      	nop
}
 8003942:	bf00      	nop
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40003800 	.word	0x40003800
 8003950:	40003400 	.word	0x40003400

08003954 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c99      	adds	r1, r3, #2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6251      	str	r1, [r2, #36]	; 0x24
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d113      	bne.n	80039c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ffc9 	bl	8003954 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c99      	adds	r1, r3, #2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6251      	str	r1, [r2, #36]	; 0x24
 80039de:	8819      	ldrh	r1, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <I2SEx_TxISR_I2SExt+0x90>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <I2SEx_TxISR_I2SExt+0x22>
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <I2SEx_TxISR_I2SExt+0x94>)
 80039ec:	e001      	b.n	80039f2 <I2SEx_TxISR_I2SExt+0x26>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f2:	460a      	mov	r2, r1
 80039f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d121      	bne.n	8003a52 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <I2SEx_TxISR_I2SExt+0x90>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <I2SEx_TxISR_I2SExt+0x50>
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <I2SEx_TxISR_I2SExt+0x94>)
 8003a1a:	e001      	b.n	8003a20 <I2SEx_TxISR_I2SExt+0x54>
 8003a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	490d      	ldr	r1, [pc, #52]	; (8003a5c <I2SEx_TxISR_I2SExt+0x90>)
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	d101      	bne.n	8003a30 <I2SEx_TxISR_I2SExt+0x64>
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <I2SEx_TxISR_I2SExt+0x94>)
 8003a2e:	e001      	b.n	8003a34 <I2SEx_TxISR_I2SExt+0x68>
 8003a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff81 	bl	8003954 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40003800 	.word	0x40003800
 8003a60:	40003400 	.word	0x40003400

08003a64 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68d8      	ldr	r0, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	1c99      	adds	r1, r3, #2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a7c:	b282      	uxth	r2, r0
 8003a7e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d113      	bne.n	8003ac0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aa6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ff4a 	bl	8003954 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <I2SEx_RxISR_I2SExt+0x90>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <I2SEx_RxISR_I2SExt+0x16>
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <I2SEx_RxISR_I2SExt+0x94>)
 8003adc:	e001      	b.n	8003ae2 <I2SEx_RxISR_I2SExt+0x1a>
 8003ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae2:	68d8      	ldr	r0, [r3, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	1c99      	adds	r1, r3, #2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003aee:	b282      	uxth	r2, r0
 8003af0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d121      	bne.n	8003b4e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <I2SEx_RxISR_I2SExt+0x90>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <I2SEx_RxISR_I2SExt+0x50>
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <I2SEx_RxISR_I2SExt+0x94>)
 8003b16:	e001      	b.n	8003b1c <I2SEx_RxISR_I2SExt+0x54>
 8003b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	490d      	ldr	r1, [pc, #52]	; (8003b58 <I2SEx_RxISR_I2SExt+0x90>)
 8003b24:	428b      	cmp	r3, r1
 8003b26:	d101      	bne.n	8003b2c <I2SEx_RxISR_I2SExt+0x64>
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <I2SEx_RxISR_I2SExt+0x94>)
 8003b2a:	e001      	b.n	8003b30 <I2SEx_RxISR_I2SExt+0x68>
 8003b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b34:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff03 	bl	8003954 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40003800 	.word	0x40003800
 8003b5c:	40003400 	.word	0x40003400

08003b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e264      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d075      	beq.n	8003c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7e:	4ba3      	ldr	r3, [pc, #652]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d00c      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4ba0      	ldr	r3, [pc, #640]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d112      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b96:	4b9d      	ldr	r3, [pc, #628]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba2:	d10b      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	4b99      	ldr	r3, [pc, #612]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05b      	beq.n	8003c68 <HAL_RCC_OscConfig+0x108>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d157      	bne.n	8003c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e23f      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x74>
 8003bc6:	4b91      	ldr	r3, [pc, #580]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a90      	ldr	r2, [pc, #576]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e01d      	b.n	8003c10 <HAL_RCC_OscConfig+0xb0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x98>
 8003bde:	4b8b      	ldr	r3, [pc, #556]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a8a      	ldr	r2, [pc, #552]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b88      	ldr	r3, [pc, #544]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a87      	ldr	r2, [pc, #540]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0xb0>
 8003bf8:	4b84      	ldr	r3, [pc, #528]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a83      	ldr	r2, [pc, #524]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b81      	ldr	r3, [pc, #516]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a80      	ldr	r2, [pc, #512]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fd f90c 	bl	8000e34 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fd f908 	bl	8000e34 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e204      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b76      	ldr	r3, [pc, #472]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0xc0>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fd f8f8 	bl	8000e34 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fd f8f4 	bl	8000e34 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e1f0      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	4b6c      	ldr	r3, [pc, #432]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0xe8>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d063      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c76:	4b65      	ldr	r3, [pc, #404]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b62      	ldr	r3, [pc, #392]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d11c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8e:	4b5f      	ldr	r3, [pc, #380]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d116      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x152>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e1c4      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb2:	4b56      	ldr	r3, [pc, #344]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4952      	ldr	r1, [pc, #328]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	e03a      	b.n	8003d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd0:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <HAL_RCC_OscConfig+0x2b0>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd f8ad 	bl	8000e34 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cde:	f7fd f8a9 	bl	8000e34 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e1a5      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfc:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4940      	ldr	r1, [pc, #256]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]
 8003d10:	e015      	b.n	8003d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d12:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <HAL_RCC_OscConfig+0x2b0>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fd f88c 	bl	8000e34 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d20:	f7fd f888 	bl	8000e34 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e184      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d030      	beq.n	8003dac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d016      	beq.n	8003d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_RCC_OscConfig+0x2b4>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fd f86c 	bl	8000e34 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d60:	f7fd f868 	bl	8000e34 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e164      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x200>
 8003d7e:	e015      	b.n	8003dac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_RCC_OscConfig+0x2b4>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d86:	f7fd f855 	bl	8000e34 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fd f851 	bl	8000e34 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e14d      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80a0 	beq.w	8003efa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_OscConfig+0x2b8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d121      	bne.n	8003e3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_RCC_OscConfig+0x2b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <HAL_RCC_OscConfig+0x2b8>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fd f817 	bl	8000e34 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	e011      	b.n	8003e2e <HAL_RCC_OscConfig+0x2ce>
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	42470000 	.word	0x42470000
 8003e14:	42470e80 	.word	0x42470e80
 8003e18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1c:	f7fd f80a 	bl	8000e34 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e106      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b85      	ldr	r3, [pc, #532]	; (8004044 <HAL_RCC_OscConfig+0x4e4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d106      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
 8003e42:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	4a80      	ldr	r2, [pc, #512]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4e:	e01c      	b.n	8003e8a <HAL_RCC_OscConfig+0x32a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x312>
 8003e58:	4b7b      	ldr	r3, [pc, #492]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a7a      	ldr	r2, [pc, #488]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
 8003e64:	4b78      	ldr	r3, [pc, #480]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a77      	ldr	r2, [pc, #476]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e70:	e00b      	b.n	8003e8a <HAL_RCC_OscConfig+0x32a>
 8003e72:	4b75      	ldr	r3, [pc, #468]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a74      	ldr	r2, [pc, #464]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	4b72      	ldr	r3, [pc, #456]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a71      	ldr	r2, [pc, #452]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d015      	beq.n	8003ebe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fc ffcf 	bl	8000e34 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fc ffcb 	bl	8000e34 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0c5      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ee      	beq.n	8003e9a <HAL_RCC_OscConfig+0x33a>
 8003ebc:	e014      	b.n	8003ee8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebe:	f7fc ffb9 	bl	8000e34 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fc ffb5 	bl	8000e34 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0af      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003edc:	4b5a      	ldr	r3, [pc, #360]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ee      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eee:	4b56      	ldr	r3, [pc, #344]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a55      	ldr	r2, [pc, #340]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 809b 	beq.w	800403a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f04:	4b50      	ldr	r3, [pc, #320]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d05c      	beq.n	8003fca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d141      	bne.n	8003f9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f18:	4b4c      	ldr	r3, [pc, #304]	; (800404c <HAL_RCC_OscConfig+0x4ec>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1e:	f7fc ff89 	bl	8000e34 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fc ff85 	bl	8000e34 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e081      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f38:	4b43      	ldr	r3, [pc, #268]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	019b      	lsls	r3, r3, #6
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	061b      	lsls	r3, r3, #24
 8003f68:	4937      	ldr	r1, [pc, #220]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <HAL_RCC_OscConfig+0x4ec>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fc ff5e 	bl	8000e34 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fc ff5a 	bl	8000e34 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e056      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x41c>
 8003f9a:	e04e      	b.n	800403a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCC_OscConfig+0x4ec>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fc ff47 	bl	8000e34 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fc ff43 	bl	8000e34 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e03f      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x44a>
 8003fc8:	e037      	b.n	800403a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e032      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd6:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <HAL_RCC_OscConfig+0x4e8>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d028      	beq.n	8004036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d121      	bne.n	8004036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d11a      	bne.n	8004036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004006:	4013      	ands	r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800400c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800400e:	4293      	cmp	r3, r2
 8004010:	d111      	bne.n	8004036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d107      	bne.n	8004036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40007000 	.word	0x40007000
 8004048:	40023800 	.word	0x40023800
 800404c:	42470060 	.word	0x42470060

08004050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0cc      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b68      	ldr	r3, [pc, #416]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d90c      	bls.n	800408c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b65      	ldr	r3, [pc, #404]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b63      	ldr	r3, [pc, #396]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0b8      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d020      	beq.n	80040da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a4:	4b59      	ldr	r3, [pc, #356]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a58      	ldr	r2, [pc, #352]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040bc:	4b53      	ldr	r3, [pc, #332]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a52      	ldr	r2, [pc, #328]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c8:	4b50      	ldr	r3, [pc, #320]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	494d      	ldr	r1, [pc, #308]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d044      	beq.n	8004170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d119      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e07f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d003      	beq.n	800410e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410a:	2b03      	cmp	r3, #3
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410e:	4b3f      	ldr	r3, [pc, #252]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e06f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	4b3b      	ldr	r3, [pc, #236]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e067      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412e:	4b37      	ldr	r3, [pc, #220]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4934      	ldr	r1, [pc, #208]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004140:	f7fc fe78 	bl	8000e34 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7fc fe74 	bl	8000e34 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e04f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 020c 	and.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	429a      	cmp	r2, r3
 800416e:	d1eb      	bne.n	8004148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004170:	4b25      	ldr	r3, [pc, #148]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d20c      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b22      	ldr	r3, [pc, #136]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e032      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a4:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4916      	ldr	r1, [pc, #88]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	490e      	ldr	r1, [pc, #56]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041d6:	f000 f821 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041da:	4602      	mov	r2, r0
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	490a      	ldr	r1, [pc, #40]	; (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	5ccb      	ldrb	r3, [r1, r3]
 80041ea:	fa22 f303 	lsr.w	r3, r2, r3
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc fdd8 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023c00 	.word	0x40023c00
 800420c:	40023800 	.word	0x40023800
 8004210:	08007d48 	.word	0x08007d48
 8004214:	20000000 	.word	0x20000000
 8004218:	20000004 	.word	0x20000004

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	2300      	movs	r3, #0
 800422e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004234:	4b67      	ldr	r3, [pc, #412]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d00d      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x40>
 8004240:	2b08      	cmp	r3, #8
 8004242:	f200 80bd 	bhi.w	80043c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x34>
 800424a:	2b04      	cmp	r3, #4
 800424c:	d003      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0x3a>
 800424e:	e0b7      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b61      	ldr	r3, [pc, #388]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004252:	60bb      	str	r3, [r7, #8]
       break;
 8004254:	e0b7      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004256:	4b61      	ldr	r3, [pc, #388]	; (80043dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004258:	60bb      	str	r3, [r7, #8]
      break;
 800425a:	e0b4      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800425c:	4b5d      	ldr	r3, [pc, #372]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004264:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004266:	4b5b      	ldr	r3, [pc, #364]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d04d      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004272:	4b58      	ldr	r3, [pc, #352]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	461a      	mov	r2, r3
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	ea02 0800 	and.w	r8, r2, r0
 800428a:	ea03 0901 	and.w	r9, r3, r1
 800428e:	4640      	mov	r0, r8
 8004290:	4649      	mov	r1, r9
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	014b      	lsls	r3, r1, #5
 800429c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042a0:	0142      	lsls	r2, r0, #5
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	ebb0 0008 	subs.w	r0, r0, r8
 80042aa:	eb61 0109 	sbc.w	r1, r1, r9
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	018b      	lsls	r3, r1, #6
 80042b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042bc:	0182      	lsls	r2, r0, #6
 80042be:	1a12      	subs	r2, r2, r0
 80042c0:	eb63 0301 	sbc.w	r3, r3, r1
 80042c4:	f04f 0000 	mov.w	r0, #0
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	00d9      	lsls	r1, r3, #3
 80042ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d2:	00d0      	lsls	r0, r2, #3
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	eb12 0208 	adds.w	r2, r2, r8
 80042dc:	eb43 0309 	adc.w	r3, r3, r9
 80042e0:	f04f 0000 	mov.w	r0, #0
 80042e4:	f04f 0100 	mov.w	r1, #0
 80042e8:	0259      	lsls	r1, r3, #9
 80042ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042ee:	0250      	lsls	r0, r2, #9
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	f7fb ff62 	bl	80001c8 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4613      	mov	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e04a      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430e:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	099b      	lsrs	r3, r3, #6
 8004314:	461a      	mov	r2, r3
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	ea02 0400 	and.w	r4, r2, r0
 8004326:	ea03 0501 	and.w	r5, r3, r1
 800432a:	4620      	mov	r0, r4
 800432c:	4629      	mov	r1, r5
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	014b      	lsls	r3, r1, #5
 8004338:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800433c:	0142      	lsls	r2, r0, #5
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	1b00      	subs	r0, r0, r4
 8004344:	eb61 0105 	sbc.w	r1, r1, r5
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	018b      	lsls	r3, r1, #6
 8004352:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004356:	0182      	lsls	r2, r0, #6
 8004358:	1a12      	subs	r2, r2, r0
 800435a:	eb63 0301 	sbc.w	r3, r3, r1
 800435e:	f04f 0000 	mov.w	r0, #0
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	00d9      	lsls	r1, r3, #3
 8004368:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800436c:	00d0      	lsls	r0, r2, #3
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	1912      	adds	r2, r2, r4
 8004374:	eb45 0303 	adc.w	r3, r5, r3
 8004378:	f04f 0000 	mov.w	r0, #0
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	0299      	lsls	r1, r3, #10
 8004382:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004386:	0290      	lsls	r0, r2, #10
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	f7fb ff16 	bl	80001c8 <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4613      	mov	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	3301      	adds	r3, #1
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	60bb      	str	r3, [r7, #8]
      break;
 80043be:	e002      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043c2:	60bb      	str	r3, [r7, #8]
      break;
 80043c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c6:	68bb      	ldr	r3, [r7, #8]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800
 80043d8:	00f42400 	.word	0x00f42400
 80043dc:	007a1200 	.word	0x007a1200

080043e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000000 	.word	0x20000000

080043f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043fc:	f7ff fff0 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	0a9b      	lsrs	r3, r3, #10
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4903      	ldr	r1, [pc, #12]	; (800441c <HAL_RCC_GetPCLK1Freq+0x24>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	08007d58 	.word	0x08007d58

08004420 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004444:	2b00      	cmp	r3, #0
 8004446:	d035      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004448:	4b62      	ldr	r3, [pc, #392]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800444e:	f7fc fcf1 	bl	8000e34 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004456:	f7fc fced 	bl	8000e34 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e0b0      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004468:	4b5b      	ldr	r3, [pc, #364]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	019a      	lsls	r2, r3, #6
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	071b      	lsls	r3, r3, #28
 8004480:	4955      	ldr	r1, [pc, #340]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004488:	4b52      	ldr	r3, [pc, #328]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800448e:	f7fc fcd1 	bl	8000e34 <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004496:	f7fc fccd 	bl	8000e34 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e090      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044a8:	4b4b      	ldr	r3, [pc, #300]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8083 	beq.w	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a43      	ldr	r2, [pc, #268]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a3e      	ldr	r2, [pc, #248]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ea:	f7fc fca3 	bl	8000e34 <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fc fc9f 	bl	8000e34 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e062      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004504:	4b35      	ldr	r3, [pc, #212]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004510:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004518:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02f      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	429a      	cmp	r2, r3
 800452c:	d028      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004536:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004538:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800453e:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004544:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800454a:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d114      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004556:	f7fc fc6d 	bl	8000e34 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fc fc69 	bl	8000e34 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e02a      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ee      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458c:	d10d      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800459e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a2:	490d      	ldr	r1, [pc, #52]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]
 80045a8:	e005      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045b4:	6093      	str	r3, [r2, #8]
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c2:	4905      	ldr	r1, [pc, #20]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	42470068 	.word	0x42470068
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40007000 	.word	0x40007000
 80045e0:	42470e40 	.word	0x42470e40

080045e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d13e      	bne.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004602:	4b23      	ldr	r3, [pc, #140]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d12f      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004618:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800461a:	617b      	str	r3, [r7, #20]
          break;
 800461c:	e02f      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800461e:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462a:	d108      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	e007      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004646:	4a15      	ldr	r2, [pc, #84]	; (800469c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004668:	0f1b      	lsrs	r3, r3, #28
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]
          break;
 8004676:	e002      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
          break;
 800467c:	bf00      	nop
        }
      }
      break;
 800467e:	bf00      	nop
    }
  }
  return frequency;
 8004680:	697b      	ldr	r3, [r7, #20]
}
 8004682:	4618      	mov	r0, r3
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800
 8004694:	00bb8000 	.word	0x00bb8000
 8004698:	007a1200 	.word	0x007a1200
 800469c:	00f42400 	.word	0x00f42400

080046a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e07b      	b.n	80047aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c2:	d009      	beq.n	80046d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	61da      	str	r2, [r3, #28]
 80046ca:	e005      	b.n	80046d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc fa34 	bl	8000b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	ea42 0103 	orr.w	r1, r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0104 	and.w	r1, r3, #4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	f003 0210 	and.w	r2, r3, #16
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004798:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047b2:	b084      	sub	sp, #16
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	f107 001c 	add.w	r0, r7, #28
 80047c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d122      	bne.n	8004810 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d105      	bne.n	8004804 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f99f 	bl	8004b48 <USB_CoreReset>
 800480a:	4603      	mov	r3, r0
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	e01a      	b.n	8004846 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f993 	bl	8004b48 <USB_CoreReset>
 8004822:	4603      	mov	r3, r0
 8004824:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
 8004838:	e005      	b.n	8004846 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	2b01      	cmp	r3, #1
 800484a:	d10b      	bne.n	8004864 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f043 0206 	orr.w	r2, r3, #6
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004870:	b004      	add	sp, #16
 8004872:	4770      	bx	lr

08004874 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f043 0201 	orr.w	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f023 0201 	bic.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d115      	bne.n	8004906 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048e6:	2001      	movs	r0, #1
 80048e8:	f7fc fab0 	bl	8000e4c <HAL_Delay>
      ms++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f919 	bl	8004b2a <USB_GetMode>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d01e      	beq.n	800493c <USB_SetCurrentMode+0x84>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b31      	cmp	r3, #49	; 0x31
 8004902:	d9f0      	bls.n	80048e6 <USB_SetCurrentMode+0x2e>
 8004904:	e01a      	b.n	800493c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d115      	bne.n	8004938 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004918:	2001      	movs	r0, #1
 800491a:	f7fc fa97 	bl	8000e4c <HAL_Delay>
      ms++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f900 	bl	8004b2a <USB_GetMode>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <USB_SetCurrentMode+0x84>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b31      	cmp	r3, #49	; 0x31
 8004934:	d9f0      	bls.n	8004918 <USB_SetCurrentMode+0x60>
 8004936:	e001      	b.n	800493c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e005      	b.n	8004948 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b32      	cmp	r3, #50	; 0x32
 8004940:	d101      	bne.n	8004946 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	4a08      	ldr	r2, [pc, #32]	; (8004994 <USB_FlushTxFifo+0x44>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e006      	b.n	8004988 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b20      	cmp	r3, #32
 8004984:	d0f1      	beq.n	800496a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	00030d40 	.word	0x00030d40

08004998 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2210      	movs	r2, #16
 80049a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <USB_FlushRxFifo+0x3c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e006      	b.n	80049c8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d0f1      	beq.n	80049aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	00030d40 	.word	0x00030d40

080049d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049d8:	b480      	push	{r7}
 80049da:	b089      	sub	sp, #36	; 0x24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	4611      	mov	r1, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	460b      	mov	r3, r1
 80049e8:	71fb      	strb	r3, [r7, #7]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d123      	bne.n	8004a46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049fe:	88bb      	ldrh	r3, [r7, #4]
 8004a00:	3303      	adds	r3, #3
 8004a02:	089b      	lsrs	r3, r3, #2
 8004a04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e018      	b.n	8004a3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	031a      	lsls	r2, r3, #12
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a18:	461a      	mov	r2, r3
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d3e2      	bcc.n	8004a0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3724      	adds	r7, #36	; 0x24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b08b      	sub	sp, #44	; 0x2c
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	089b      	lsrs	r3, r3, #2
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	e014      	b.n	8004aaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	3301      	adds	r3, #1
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	3301      	adds	r3, #1
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	6a3a      	ldr	r2, [r7, #32]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3e6      	bcc.n	8004a80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ab2:	8bfb      	ldrh	r3, [r7, #30]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01e      	beq.n	8004af6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f107 0310 	add.w	r3, r7, #16
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	701a      	strb	r2, [r3, #0]
      i++;
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004aea:	8bfb      	ldrh	r3, [r7, #30]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004af0:	8bfb      	ldrh	r3, [r7, #30]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1ea      	bne.n	8004acc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	372c      	adds	r7, #44	; 0x2c
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0301 	and.w	r3, r3, #1
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <USB_CoreReset+0x60>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e01a      	b.n	8004b9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	daf3      	bge.n	8004b54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f043 0201 	orr.w	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	4a09      	ldr	r2, [pc, #36]	; (8004ba8 <USB_CoreReset+0x60>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e006      	b.n	8004b9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d0f1      	beq.n	8004b7c <USB_CoreReset+0x34>

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	00030d40 	.word	0x00030d40

08004bac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bac:	b084      	sub	sp, #16
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	f107 001c 	add.w	r0, r7, #28
 8004bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d018      	beq.n	8004c30 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d10a      	bne.n	8004c1a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c12:	f043 0304 	orr.w	r3, r3, #4
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e014      	b.n	8004c44 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c28:	f023 0304 	bic.w	r3, r3, #4
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e009      	b.n	8004c44 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c3e:	f023 0304 	bic.w	r3, r3, #4
 8004c42:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004c44:	2110      	movs	r1, #16
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fe82 	bl	8004950 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fea3 	bl	8004998 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e015      	b.n	8004c84 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	461a      	mov	r2, r3
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d3e5      	bcc.n	8004c58 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a13      	ldr	r2, [pc, #76]	; (8004d00 <USB_HostInit+0x154>)
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <USB_HostInit+0x158>)
 8004cb8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004cbc:	e009      	b.n	8004cd2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2280      	movs	r2, #128	; 0x80
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a10      	ldr	r2, [pc, #64]	; (8004d08 <USB_HostInit+0x15c>)
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a0f      	ldr	r2, [pc, #60]	; (8004d0c <USB_HostInit+0x160>)
 8004cce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f043 0210 	orr.w	r2, r3, #16
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <USB_HostInit+0x164>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cfc:	b004      	add	sp, #16
 8004cfe:	4770      	bx	lr
 8004d00:	01000200 	.word	0x01000200
 8004d04:	00e00300 	.word	0x00e00300
 8004d08:	00600080 	.word	0x00600080
 8004d0c:	004000e0 	.word	0x004000e0
 8004d10:	a3200008 	.word	0xa3200008

08004d14 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d62:	6053      	str	r3, [r2, #4]
 8004d64:	e009      	b.n	8004d7a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d106      	bne.n	8004d7a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d72:	461a      	mov	r2, r3
 8004d74:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d78:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004da8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004db8:	2064      	movs	r0, #100	; 0x64
 8004dba:	f7fc f847 	bl	8000e4c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004dcc:	200a      	movs	r0, #10
 8004dce:	f7fc f83d 	bl	8000e4c <HAL_Delay>

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <USB_DriveVbus+0x44>
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d106      	bne.n	8004e20 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e1e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2a:	d109      	bne.n	8004e40 <USB_DriveVbus+0x64>
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e3e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	0c5b      	lsrs	r3, r3, #17
 8004e6c:	f003 0303 	and.w	r3, r3, #3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	b29b      	uxth	r3, r3
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	4608      	mov	r0, r1
 8004eaa:	4611      	mov	r1, r2
 8004eac:	461a      	mov	r2, r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	70fb      	strb	r3, [r7, #3]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	70bb      	strb	r3, [r7, #2]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004ed6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d87e      	bhi.n	8004fdc <USB_HC_Init+0x13c>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <USB_HC_Init+0x44>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004ef5 	.word	0x08004ef5
 8004ee8:	08004f9f 	.word	0x08004f9f
 8004eec:	08004ef5 	.word	0x08004ef5
 8004ef0:	08004f61 	.word	0x08004f61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f00:	461a      	mov	r2, r3
 8004f02:	f240 439d 	movw	r3, #1181	; 0x49d
 8004f06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004f08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	da10      	bge.n	8004f32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004f30:	e057      	b.n	8004fe2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d051      	beq.n	8004fe2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	78fa      	ldrb	r2, [r7, #3]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f5c:	60d3      	str	r3, [r2, #12]
      break;
 8004f5e:	e040      	b.n	8004fe2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004f72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da34      	bge.n	8004fe6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f9c:	e023      	b.n	8004fe6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	461a      	mov	r2, r3
 8004fac:	f240 2325 	movw	r3, #549	; 0x225
 8004fb0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004fb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	da17      	bge.n	8004fea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004fd8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004fda:	e006      	b.n	8004fea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	77fb      	strb	r3, [r7, #31]
      break;
 8004fe0:	e004      	b.n	8004fec <USB_HC_Init+0x14c>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e002      	b.n	8004fec <USB_HC_Init+0x14c>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <USB_HC_Init+0x14c>
      break;
 8004fea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	6939      	ldr	r1, [r7, #16]
 8005002:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005006:	4313      	orrs	r3, r2
 8005008:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005016:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800501a:	2b00      	cmp	r3, #0
 800501c:	da03      	bge.n	8005026 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800501e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	e001      	b.n	800502a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff0f 	bl	8004e4e <USB_GetHostSpeed>
 8005030:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005032:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005036:	2b02      	cmp	r3, #2
 8005038:	d106      	bne.n	8005048 <USB_HC_Init+0x1a8>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d003      	beq.n	8005048 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e001      	b.n	800504c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800504c:	787b      	ldrb	r3, [r7, #1]
 800504e:	059b      	lsls	r3, r3, #22
 8005050:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005054:	78bb      	ldrb	r3, [r7, #2]
 8005056:	02db      	lsls	r3, r3, #11
 8005058:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800505c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800505e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005062:	049b      	lsls	r3, r3, #18
 8005064:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005068:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800506a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800506c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005070:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	0159      	lsls	r1, r3, #5
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	440b      	add	r3, r1
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005088:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800508a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800508e:	2b03      	cmp	r3, #3
 8005090:	d10f      	bne.n	80050b2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	78fa      	ldrb	r2, [r7, #3]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80050b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	; 0x30
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80050d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d02d      	beq.n	8005142 <USB_HC_StartXfer+0x86>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	791b      	ldrb	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d129      	bne.n	8005142 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d117      	bne.n	8005124 <USB_HC_StartXfer+0x68>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	79db      	ldrb	r3, [r3, #7]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <USB_HC_StartXfer+0x48>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	79db      	ldrb	r3, [r3, #7]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d10f      	bne.n	8005124 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	6a3a      	ldr	r2, [r7, #32]
 8005118:	440a      	add	r2, r1
 800511a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <USB_HC_StartXfer+0x86>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	795b      	ldrb	r3, [r3, #5]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d107      	bne.n	8005142 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	4619      	mov	r1, r3
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fa2f 	bl	800559c <USB_DoPing>
      return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e0f8      	b.n	8005334 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d018      	beq.n	800517c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	8912      	ldrh	r2, [r2, #8]
 8005152:	4413      	add	r3, r2
 8005154:	3b01      	subs	r3, #1
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	8912      	ldrh	r2, [r2, #8]
 800515a:	fbb3 f3f2 	udiv	r3, r3, r2
 800515e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005160:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005162:	8b7b      	ldrh	r3, [r7, #26]
 8005164:	429a      	cmp	r2, r3
 8005166:	d90b      	bls.n	8005180 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005168:	8b7b      	ldrh	r3, [r7, #26]
 800516a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800516c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	8912      	ldrh	r2, [r2, #8]
 8005172:	fb02 f203 	mul.w	r2, r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	611a      	str	r2, [r3, #16]
 800517a:	e001      	b.n	8005180 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800517c:	2301      	movs	r3, #1
 800517e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	78db      	ldrb	r3, [r3, #3]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	8912      	ldrh	r2, [r2, #8]
 800518e:	fb02 f203 	mul.w	r2, r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	611a      	str	r2, [r3, #16]
 8005196:	e003      	b.n	80051a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051aa:	04d9      	lsls	r1, r3, #19
 80051ac:	4b63      	ldr	r3, [pc, #396]	; (800533c <USB_HC_StartXfer+0x280>)
 80051ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	7a9b      	ldrb	r3, [r3, #10]
 80051b6:	075b      	lsls	r3, r3, #29
 80051b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051bc:	69f9      	ldr	r1, [r7, #28]
 80051be:	0148      	lsls	r0, r1, #5
 80051c0:	6a39      	ldr	r1, [r7, #32]
 80051c2:	4401      	add	r1, r0
 80051c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	68d9      	ldr	r1, [r3, #12]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	460a      	mov	r2, r1
 80051e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	6a3a      	ldr	r2, [r7, #32]
 8005212:	440a      	add	r2, r1
 8005214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005218:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800521c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	7e7b      	ldrb	r3, [r7, #25]
 800522e:	075b      	lsls	r3, r3, #29
 8005230:	69f9      	ldr	r1, [r7, #28]
 8005232:	0148      	lsls	r0, r1, #5
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	4401      	add	r1, r0
 8005238:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800523c:	4313      	orrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005256:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	78db      	ldrb	r3, [r3, #3]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e003      	b.n	8005272 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005270:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005278:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	461a      	mov	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e04e      	b.n	8005334 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d149      	bne.n	8005332 <USB_HC_StartXfer+0x276>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d045      	beq.n	8005332 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	79db      	ldrb	r3, [r3, #7]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d830      	bhi.n	8005310 <USB_HC_StartXfer+0x254>
 80052ae:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <USB_HC_StartXfer+0x1f8>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052c5 	.word	0x080052c5
 80052b8:	080052e9 	.word	0x080052e9
 80052bc:	080052c5 	.word	0x080052c5
 80052c0:	080052e9 	.word	0x080052e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	3303      	adds	r3, #3
 80052ca:	089b      	lsrs	r3, r3, #2
 80052cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80052ce:	8afa      	ldrh	r2, [r7, #22]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d91c      	bls.n	8005314 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f043 0220 	orr.w	r2, r3, #32
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80052e6:	e015      	b.n	8005314 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	3303      	adds	r3, #3
 80052ee:	089b      	lsrs	r3, r3, #2
 80052f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80052f2:	8afa      	ldrh	r2, [r7, #22]
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	429a      	cmp	r2, r3
 8005300:	d90a      	bls.n	8005318 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	619a      	str	r2, [r3, #24]
        }
        break;
 800530e:	e003      	b.n	8005318 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <USB_HC_StartXfer+0x25e>
        break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <USB_HC_StartXfer+0x25e>
        break;
 8005318:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	68d9      	ldr	r1, [r3, #12]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	785a      	ldrb	r2, [r3, #1]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	b29b      	uxth	r3, r3
 8005328:	2000      	movs	r0, #0
 800532a:	9000      	str	r0, [sp, #0]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff fb53 	bl	80049d8 <USB_WritePacket>
  }

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3728      	adds	r7, #40	; 0x28
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	1ff80000 	.word	0x1ff80000

08005340 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	b29b      	uxth	r3, r3
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005362:	b480      	push	{r7}
 8005364:	b089      	sub	sp, #36	; 0x24
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	460b      	mov	r3, r1
 800536c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	0c9b      	lsrs	r3, r3, #18
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	0fdb      	lsrs	r3, r3, #31
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d104      	bne.n	80053bc <USB_HC_Halt+0x5a>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e0e8      	b.n	800558e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <USB_HC_Halt+0x66>
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d173      	bne.n	80054b0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 80cb 	bne.w	800558c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d143      	bne.n	800548a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	440a      	add	r2, r1
 8005418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005420:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	4413      	add	r3, r2
 800542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	440a      	add	r2, r1
 8005438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800543c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005440:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	0151      	lsls	r1, r2, #5
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	440a      	add	r2, r1
 8005458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005460:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3301      	adds	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800546e:	d81d      	bhi.n	80054ac <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	4413      	add	r3, r2
 8005478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005486:	d0ec      	beq.n	8005462 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005488:	e080      	b.n	800558c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054aa:	e06f      	b.n	800558c <USB_HC_Halt+0x22a>
            break;
 80054ac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054ae:	e06d      	b.n	800558c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d143      	bne.n	8005568 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	440a      	add	r2, r1
 8005516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800551e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	4413      	add	r3, r2
 8005528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	440a      	add	r2, r1
 8005536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800553e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	3301      	adds	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800554c:	d81d      	bhi.n	800558a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	4413      	add	r3, r2
 8005556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005564:	d0ec      	beq.n	8005540 <USB_HC_Halt+0x1de>
 8005566:	e011      	b.n	800558c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	4413      	add	r3, r2
 8005570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	440a      	add	r2, r1
 800557e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	e000      	b.n	800558c <USB_HC_Halt+0x22a>
          break;
 800558a:	bf00      	nop
    }
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3724      	adds	r7, #36	; 0x24
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80055b0:	2301      	movs	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	04da      	lsls	r2, r3, #19
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <USB_DoPing+0x74>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	0151      	lsls	r1, r2, #5
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	440a      	add	r2, r1
 80055c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fa:	461a      	mov	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	1ff80000 	.word	0x1ff80000

08005614 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff f936 	bl	8004896 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800562a:	2110      	movs	r1, #16
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff f98f 	bl	8004950 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff f9b0 	bl	8004998 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	e01f      	b.n	800567e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005654:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800565c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005664:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	461a      	mov	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3301      	adds	r3, #1
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b0f      	cmp	r3, #15
 8005682:	d9dc      	bls.n	800563e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	e034      	b.n	80056f4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056be:	461a      	mov	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	3301      	adds	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d0:	d80c      	bhi.n	80056ec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e8:	d0ec      	beq.n	80056c4 <USB_StopHost+0xb0>
 80056ea:	e000      	b.n	80056ee <USB_StopHost+0xda>
        break;
 80056ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	3301      	adds	r3, #1
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d9c7      	bls.n	800568a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005700:	461a      	mov	r2, r3
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f04f 32ff 	mov.w	r2, #4294967295
 800570e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff f8af 	bl	8004874 <USB_EnableGlobalInt>

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	af04      	add	r7, sp, #16
 8005726:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005728:	2301      	movs	r3, #1
 800572a:	2202      	movs	r2, #2
 800572c:	2102      	movs	r1, #2
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fc66 	bl	8006000 <USBH_FindInterface>
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2bff      	cmp	r3, #255	; 0xff
 800573c:	d002      	beq.n	8005744 <USBH_CDC_InterfaceInit+0x24>
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d901      	bls.n	8005748 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005744:	2302      	movs	r3, #2
 8005746:	e13d      	b.n	80059c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fc3b 	bl	8005fc8 <USBH_SelectInterface>
 8005752:	4603      	mov	r3, r0
 8005754:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005756:	7bbb      	ldrb	r3, [r7, #14]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800575c:	2302      	movs	r3, #2
 800575e:	e131      	b.n	80059c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005766:	2050      	movs	r0, #80	; 0x50
 8005768:	f002 fa00 	bl	8007b6c <malloc>
 800576c:	4603      	mov	r3, r0
 800576e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005780:	2302      	movs	r3, #2
 8005782:	e11f      	b.n	80059c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005784:	2250      	movs	r2, #80	; 0x50
 8005786:	2100      	movs	r1, #0
 8005788:	68b8      	ldr	r0, [r7, #8]
 800578a:	f002 f9ff 	bl	8007b8c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	211a      	movs	r1, #26
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	4413      	add	r3, r2
 800579a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	b25b      	sxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da15      	bge.n	80057d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	211a      	movs	r1, #26
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	4413      	add	r3, r2
 80057b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057b6:	781a      	ldrb	r2, [r3, #0]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	211a      	movs	r1, #26
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057cc:	881a      	ldrh	r2, [r3, #0]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fe32 	bl	8007442 <USBH_AllocPipe>
 80057de:	4603      	mov	r3, r0
 80057e0:	461a      	mov	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	7819      	ldrb	r1, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	7858      	ldrb	r0, [r3, #1]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	8952      	ldrh	r2, [r2, #10]
 80057fe:	9202      	str	r2, [sp, #8]
 8005800:	2203      	movs	r2, #3
 8005802:	9201      	str	r2, [sp, #4]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	4623      	mov	r3, r4
 8005808:	4602      	mov	r2, r0
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 fdea 	bl	80073e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2200      	movs	r2, #0
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f002 f8f9 	bl	8007a10 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800581e:	2300      	movs	r3, #0
 8005820:	2200      	movs	r2, #0
 8005822:	210a      	movs	r1, #10
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fbeb 	bl	8006000 <USBH_FindInterface>
 800582a:	4603      	mov	r3, r0
 800582c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2bff      	cmp	r3, #255	; 0xff
 8005832:	d002      	beq.n	800583a <USBH_CDC_InterfaceInit+0x11a>
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d901      	bls.n	800583e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800583a:	2302      	movs	r3, #2
 800583c:	e0c2      	b.n	80059c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	211a      	movs	r1, #26
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	4413      	add	r3, r2
 800584a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	b25b      	sxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	da16      	bge.n	8005884 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	211a      	movs	r1, #26
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	4413      	add	r3, r2
 8005862:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005866:	781a      	ldrb	r2, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	211a      	movs	r1, #26
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	4413      	add	r3, r2
 8005878:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800587c:	881a      	ldrh	r2, [r3, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	835a      	strh	r2, [r3, #26]
 8005882:	e015      	b.n	80058b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	211a      	movs	r1, #26
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	4413      	add	r3, r2
 8005890:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	211a      	movs	r1, #26
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80058aa:	881a      	ldrh	r2, [r3, #0]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	211a      	movs	r1, #26
 80058b6:	fb01 f303 	mul.w	r3, r1, r3
 80058ba:	4413      	add	r3, r2
 80058bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	b25b      	sxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da16      	bge.n	80058f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	211a      	movs	r1, #26
 80058ce:	fb01 f303 	mul.w	r3, r1, r3
 80058d2:	4413      	add	r3, r2
 80058d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	211a      	movs	r1, #26
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80058ee:	881a      	ldrh	r2, [r3, #0]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	835a      	strh	r2, [r3, #26]
 80058f4:	e015      	b.n	8005922 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	211a      	movs	r1, #26
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	4413      	add	r3, r2
 8005902:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005906:	781a      	ldrb	r2, [r3, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	211a      	movs	r1, #26
 8005912:	fb01 f303 	mul.w	r3, r1, r3
 8005916:	4413      	add	r3, r2
 8005918:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800591c:	881a      	ldrh	r2, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	7b9b      	ldrb	r3, [r3, #14]
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 fd8a 	bl	8007442 <USBH_AllocPipe>
 800592e:	4603      	mov	r3, r0
 8005930:	461a      	mov	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	7bdb      	ldrb	r3, [r3, #15]
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 fd80 	bl	8007442 <USBH_AllocPipe>
 8005942:	4603      	mov	r3, r0
 8005944:	461a      	mov	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	7b59      	ldrb	r1, [r3, #13]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	7b98      	ldrb	r0, [r3, #14]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	8b12      	ldrh	r2, [r2, #24]
 8005962:	9202      	str	r2, [sp, #8]
 8005964:	2202      	movs	r2, #2
 8005966:	9201      	str	r2, [sp, #4]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	4623      	mov	r3, r4
 800596c:	4602      	mov	r2, r0
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 fd38 	bl	80073e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	7b19      	ldrb	r1, [r3, #12]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	7bd8      	ldrb	r0, [r3, #15]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	8b52      	ldrh	r2, [r2, #26]
 800598c:	9202      	str	r2, [sp, #8]
 800598e:	2202      	movs	r2, #2
 8005990:	9201      	str	r2, [sp, #4]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	4623      	mov	r3, r4
 8005996:	4602      	mov	r2, r0
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 fd23 	bl	80073e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	7b5b      	ldrb	r3, [r3, #13]
 80059aa:	2200      	movs	r2, #0
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f002 f82e 	bl	8007a10 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	7b1b      	ldrb	r3, [r3, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f002 f827 	bl	8007a10 <USBH_LL_SetToggle>

  return USBH_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd90      	pop	{r4, r7, pc}

080059cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00e      	beq.n	8005a04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fd18 	bl	8007422 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fd43 	bl	8007484 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	7b1b      	ldrb	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	7b1b      	ldrb	r3, [r3, #12]
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 fd05 	bl	8007422 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	7b1b      	ldrb	r3, [r3, #12]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f001 fd30 	bl	8007484 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	7b5b      	ldrb	r3, [r3, #13]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	7b5b      	ldrb	r3, [r3, #13]
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 fcf2 	bl	8007422 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	7b5b      	ldrb	r3, [r3, #13]
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 fd1d 	bl	8007484 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f002 f889 	bl	8007b7c <free>
    phost->pActiveClass->pData = 0U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a70:	2200      	movs	r2, #0
 8005a72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3340      	adds	r3, #64	; 0x40
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f8b1 	bl	8005bfe <GetLineCoding>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005aa0:	7afb      	ldrb	r3, [r7, #11]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d105      	bne.n	8005ab2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005aac:	2102      	movs	r1, #2
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d877      	bhi.n	8005bd0 <USBH_CDC_Process+0x114>
 8005ae0:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <USBH_CDC_Process+0x2c>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005afd 	.word	0x08005afd
 8005aec:	08005b03 	.word	0x08005b03
 8005af0:	08005b33 	.word	0x08005b33
 8005af4:	08005ba7 	.word	0x08005ba7
 8005af8:	08005bb5 	.word	0x08005bb5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73fb      	strb	r3, [r7, #15]
      break;
 8005b00:	e06d      	b.n	8005bde <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f897 	bl	8005c3c <SetLineCoding>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b12:	7bbb      	ldrb	r3, [r7, #14]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b20:	e058      	b.n	8005bd4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005b22:	7bbb      	ldrb	r3, [r7, #14]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d055      	beq.n	8005bd4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b30:	e050      	b.n	8005bd4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	3340      	adds	r3, #64	; 0x40
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f860 	bl	8005bfe <GetLineCoding>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d126      	bne.n	8005b96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5a:	791b      	ldrb	r3, [r3, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d13b      	bne.n	8005bd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d133      	bne.n	8005bd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d12b      	bne.n	8005bd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d124      	bne.n	8005bd8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f958 	bl	8005e44 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b94:	e020      	b.n	8005bd8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d01d      	beq.n	8005bd8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2204      	movs	r2, #4
 8005ba0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005ba4:	e018      	b.n	8005bd8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f867 	bl	8005c7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f8da 	bl	8005d66 <CDC_ProcessReception>
      break;
 8005bb2:	e014      	b.n	8005bde <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 ffe3 	bl	8006b82 <USBH_ClrFeature>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005bce:	e005      	b.n	8005bdc <USBH_CDC_Process+0x120>

    default:
      break;
 8005bd0:	bf00      	nop
 8005bd2:	e004      	b.n	8005bde <USBH_CDC_Process+0x122>
      break;
 8005bd4:	bf00      	nop
 8005bd6:	e002      	b.n	8005bde <USBH_CDC_Process+0x122>
      break;
 8005bd8:	bf00      	nop
 8005bda:	e000      	b.n	8005bde <USBH_CDC_Process+0x122>
      break;
 8005bdc:	bf00      	nop

  }

  return status;
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	22a1      	movs	r2, #161	; 0xa1
 8005c0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2221      	movs	r2, #33	; 0x21
 8005c12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2207      	movs	r2, #7
 8005c24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2207      	movs	r2, #7
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f988 	bl	8006f42 <USBH_CtlReq>
 8005c32:	4603      	mov	r3, r0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2221      	movs	r2, #33	; 0x21
 8005c4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2207      	movs	r2, #7
 8005c62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2207      	movs	r2, #7
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 f969 	bl	8006f42 <USBH_CtlReq>
 8005c70:	4603      	mov	r3, r0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af02      	add	r7, sp, #8
 8005c80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d002      	beq.n	8005ca0 <CDC_ProcessTransmission+0x26>
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d023      	beq.n	8005ce6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005c9e:	e05e      	b.n	8005d5e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	8b12      	ldrh	r2, [r2, #24]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d90b      	bls.n	8005cc4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	69d9      	ldr	r1, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8b1a      	ldrh	r2, [r3, #24]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	7b5b      	ldrb	r3, [r3, #13]
 8005cb8:	2001      	movs	r0, #1
 8005cba:	9000      	str	r0, [sp, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 fb4e 	bl	800735e <USBH_BulkSendData>
 8005cc2:	e00b      	b.n	8005cdc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	7b5b      	ldrb	r3, [r3, #13]
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	9000      	str	r0, [sp, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f001 fb41 	bl	800735e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ce4:	e03b      	b.n	8005d5e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	7b5b      	ldrb	r3, [r3, #13]
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fe65 	bl	80079bc <USBH_LL_GetURBState>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005cf6:	7afb      	ldrb	r3, [r7, #11]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d128      	bne.n	8005d4e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	8b12      	ldrh	r2, [r2, #24]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d90e      	bls.n	8005d26 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	8b12      	ldrh	r2, [r2, #24]
 8005d10:	1a9a      	subs	r2, r3, r2
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	8b12      	ldrh	r2, [r2, #24]
 8005d1e:	441a      	add	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	61da      	str	r2, [r3, #28]
 8005d24:	e002      	b.n	8005d2c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005d3c:	e00e      	b.n	8005d5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f868 	bl	8005e1c <USBH_CDC_TransmitCallback>
      break;
 8005d4c:	e006      	b.n	8005d5c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d103      	bne.n	8005d5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005d5c:	bf00      	nop
  }
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d002      	beq.n	8005d8c <CDC_ProcessReception+0x26>
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d00e      	beq.n	8005da8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005d8a:	e043      	b.n	8005e14 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	6a19      	ldr	r1, [r3, #32]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	8b5a      	ldrh	r2, [r3, #26]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	7b1b      	ldrb	r3, [r3, #12]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 fb05 	bl	80073a8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2204      	movs	r2, #4
 8005da2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005da6:	e035      	b.n	8005e14 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	7b1b      	ldrb	r3, [r3, #12]
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fe04 	bl	80079bc <USBH_LL_GetURBState>
 8005db4:	4603      	mov	r3, r0
 8005db6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005db8:	7cfb      	ldrb	r3, [r7, #19]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d129      	bne.n	8005e12 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	7b1b      	ldrb	r3, [r3, #12]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 fd67 	bl	8007898 <USBH_LL_GetLastXferSize>
 8005dca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d016      	beq.n	8005e04 <CDC_ProcessReception+0x9e>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	8b5b      	ldrh	r3, [r3, #26]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d910      	bls.n	8005e04 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1ad2      	subs	r2, r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	441a      	add	r2, r3
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005e02:	e006      	b.n	8005e12 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f80f 	bl	8005e30 <USBH_CDC_ReceiveCallback>
      break;
 8005e12:	bf00      	nop
  }
}
 8005e14:	bf00      	nop
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e029      	b.n	8005ec4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	79fa      	ldrb	r2, [r7, #7]
 8005e74:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f81f 	bl	8005ecc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f001 fc37 	bl	8007730 <USBH_LL_Init>

  return USBH_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	e009      	b.n	8005ef2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	33e0      	adds	r3, #224	; 0xe0
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	2200      	movs	r2, #0
 8005eea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b0e      	cmp	r3, #14
 8005ef6:	d9f2      	bls.n	8005ede <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e009      	b.n	8005f12 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f18:	d3f1      	bcc.n	8005efe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2240      	movs	r2, #64	; 0x40
 8005f3e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d016      	beq.n	8005fb6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10e      	bne.n	8005fb0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f98:	1c59      	adds	r1, r3, #1
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	33de      	adds	r3, #222	; 0xde
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
 8005fae:	e004      	b.n	8005fba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	73fb      	strb	r3, [r7, #15]
 8005fb4:	e001      	b.n	8005fba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d204      	bcs.n	8005fee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	78fa      	ldrb	r2, [r7, #3]
 8005fe8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005fec:	e001      	b.n	8005ff2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005fee:	2302      	movs	r3, #2
 8005ff0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	461a      	mov	r2, r3
 800600e:	4603      	mov	r3, r0
 8006010:	70fb      	strb	r3, [r7, #3]
 8006012:	460b      	mov	r3, r1
 8006014:	70bb      	strb	r3, [r7, #2]
 8006016:	4613      	mov	r3, r2
 8006018:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006028:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800602a:	e025      	b.n	8006078 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800602c:	7dfb      	ldrb	r3, [r7, #23]
 800602e:	221a      	movs	r2, #26
 8006030:	fb02 f303 	mul.w	r3, r2, r3
 8006034:	3308      	adds	r3, #8
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	3302      	adds	r3, #2
 800603c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	795b      	ldrb	r3, [r3, #5]
 8006042:	78fa      	ldrb	r2, [r7, #3]
 8006044:	429a      	cmp	r2, r3
 8006046:	d002      	beq.n	800604e <USBH_FindInterface+0x4e>
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	2bff      	cmp	r3, #255	; 0xff
 800604c:	d111      	bne.n	8006072 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006052:	78ba      	ldrb	r2, [r7, #2]
 8006054:	429a      	cmp	r2, r3
 8006056:	d002      	beq.n	800605e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006058:	78bb      	ldrb	r3, [r7, #2]
 800605a:	2bff      	cmp	r3, #255	; 0xff
 800605c:	d109      	bne.n	8006072 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006062:	787a      	ldrb	r2, [r7, #1]
 8006064:	429a      	cmp	r2, r3
 8006066:	d002      	beq.n	800606e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006068:	787b      	ldrb	r3, [r7, #1]
 800606a:	2bff      	cmp	r3, #255	; 0xff
 800606c:	d101      	bne.n	8006072 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
 8006070:	e006      	b.n	8006080 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	3301      	adds	r3, #1
 8006076:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d9d6      	bls.n	800602c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800607e:	23ff      	movs	r3, #255	; 0xff
}
 8006080:	4618      	mov	r0, r3
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 fb87 	bl	80077a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800609a:	2101      	movs	r1, #1
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fca0 	bl	80079e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80060b4:	2302      	movs	r3, #2
 80060b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d102      	bne.n	80060ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2203      	movs	r2, #3
 80060cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b0b      	cmp	r3, #11
 80060d6:	f200 81b3 	bhi.w	8006440 <USBH_Process+0x394>
 80060da:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <USBH_Process+0x34>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	08006111 	.word	0x08006111
 80060e4:	08006143 	.word	0x08006143
 80060e8:	080061ab 	.word	0x080061ab
 80060ec:	080063db 	.word	0x080063db
 80060f0:	08006441 	.word	0x08006441
 80060f4:	0800624f 	.word	0x0800624f
 80060f8:	08006381 	.word	0x08006381
 80060fc:	08006285 	.word	0x08006285
 8006100:	080062a5 	.word	0x080062a5
 8006104:	080062c5 	.word	0x080062c5
 8006108:	080062f3 	.word	0x080062f3
 800610c:	080063c3 	.word	0x080063c3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8193 	beq.w	8006444 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006124:	20c8      	movs	r0, #200	; 0xc8
 8006126:	f001 fca3 	bl	8007a70 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fb99 	bl	8007862 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006140:	e180      	b.n	8006444 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006148:	2b01      	cmp	r3, #1
 800614a:	d107      	bne.n	800615c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800615a:	e182      	b.n	8006462 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006166:	d914      	bls.n	8006192 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800616e:	3301      	adds	r3, #1
 8006170:	b2da      	uxtb	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800617e:	2b03      	cmp	r3, #3
 8006180:	d903      	bls.n	800618a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	220d      	movs	r2, #13
 8006186:	701a      	strb	r2, [r3, #0]
      break;
 8006188:	e16b      	b.n	8006462 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
      break;
 8006190:	e167      	b.n	8006462 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006198:	f103 020a 	add.w	r2, r3, #10
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80061a2:	200a      	movs	r0, #10
 80061a4:	f001 fc64 	bl	8007a70 <USBH_Delay>
      break;
 80061a8:	e15b      	b.n	8006462 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061ba:	2104      	movs	r1, #4
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80061c0:	2064      	movs	r0, #100	; 0x64
 80061c2:	f001 fc55 	bl	8007a70 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fb24 	bl	8007814 <USBH_LL_GetSpeed>
 80061cc:	4603      	mov	r3, r0
 80061ce:	461a      	mov	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2205      	movs	r2, #5
 80061da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80061dc:	2100      	movs	r1, #0
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 f92f 	bl	8007442 <USBH_AllocPipe>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80061ec:	2180      	movs	r1, #128	; 0x80
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 f927 	bl	8007442 <USBH_AllocPipe>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	7919      	ldrb	r1, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006210:	b292      	uxth	r2, r2
 8006212:	9202      	str	r2, [sp, #8]
 8006214:	2200      	movs	r2, #0
 8006216:	9201      	str	r2, [sp, #4]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4603      	mov	r3, r0
 800621c:	2280      	movs	r2, #128	; 0x80
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 f8e0 	bl	80073e4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	7959      	ldrb	r1, [r3, #5]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006238:	b292      	uxth	r2, r2
 800623a:	9202      	str	r2, [sp, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	9201      	str	r2, [sp, #4]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	4603      	mov	r3, r0
 8006244:	2200      	movs	r2, #0
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 f8cc 	bl	80073e4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800624c:	e109      	b.n	8006462 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f90c 	bl	800646c <USBH_HandleEnum>
 8006254:	4603      	mov	r3, r0
 8006256:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	f040 80f3 	bne.w	8006448 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006270:	2b01      	cmp	r3, #1
 8006272:	d103      	bne.n	800627c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2208      	movs	r2, #8
 8006278:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800627a:	e0e5      	b.n	8006448 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2207      	movs	r2, #7
 8006280:	701a      	strb	r2, [r3, #0]
      break;
 8006282:	e0e1      	b.n	8006448 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80de 	beq.w	800644c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006296:	2101      	movs	r1, #1
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2208      	movs	r2, #8
 80062a0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80062a2:	e0d3      	b.n	800644c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fc20 	bl	8006af4 <USBH_SetCfg>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f040 80ca 	bne.w	8006450 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2209      	movs	r2, #9
 80062c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062c2:	e0c5      	b.n	8006450 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80062d2:	2101      	movs	r1, #1
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fc30 	bl	8006b3a <USBH_SetFeature>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f040 80b9 	bne.w	8006454 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	220a      	movs	r2, #10
 80062e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062e8:	e0b4      	b.n	8006454 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	220a      	movs	r2, #10
 80062ee:	701a      	strb	r2, [r3, #0]
      break;
 80062f0:	e0b0      	b.n	8006454 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 80ad 	beq.w	8006458 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]
 800630a:	e016      	b.n	800633a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800630c:	7bfa      	ldrb	r2, [r7, #15]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32de      	adds	r2, #222	; 0xde
 8006312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006316:	791a      	ldrb	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800631e:	429a      	cmp	r2, r3
 8006320:	d108      	bne.n	8006334 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006322:	7bfa      	ldrb	r2, [r7, #15]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	32de      	adds	r2, #222	; 0xde
 8006328:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006332:	e005      	b.n	8006340 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	3301      	adds	r3, #1
 8006338:	73fb      	strb	r3, [r7, #15]
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0e5      	beq.n	800630c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d109      	bne.n	8006370 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2206      	movs	r2, #6
 8006360:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006368:	2103      	movs	r1, #3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800636e:	e073      	b.n	8006458 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	220d      	movs	r2, #13
 8006374:	701a      	strb	r2, [r3, #0]
      break;
 8006376:	e06f      	b.n	8006458 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	220d      	movs	r2, #13
 800637c:	701a      	strb	r2, [r3, #0]
      break;
 800637e:	e06b      	b.n	8006458 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d017      	beq.n	80063ba <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	4798      	blx	r3
 8006396:	4603      	mov	r3, r0
 8006398:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	220b      	movs	r2, #11
 80063a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063a8:	e058      	b.n	800645c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d154      	bne.n	800645c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	220d      	movs	r2, #13
 80063b6:	701a      	strb	r2, [r3, #0]
      break;
 80063b8:	e050      	b.n	800645c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	220d      	movs	r2, #13
 80063be:	701a      	strb	r2, [r3, #0]
      break;
 80063c0:	e04c      	b.n	800645c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d049      	beq.n	8006460 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
      }
      break;
 80063d8:	e042      	b.n	8006460 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff fd72 	bl	8005ecc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006416:	2105      	movs	r1, #5
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b01      	cmp	r3, #1
 8006426:	d107      	bne.n	8006438 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff fe2b 	bl	800608c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006436:	e014      	b.n	8006462 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 f9b5 	bl	80077a8 <USBH_LL_Start>
      break;
 800643e:	e010      	b.n	8006462 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006440:	bf00      	nop
 8006442:	e00e      	b.n	8006462 <USBH_Process+0x3b6>
      break;
 8006444:	bf00      	nop
 8006446:	e00c      	b.n	8006462 <USBH_Process+0x3b6>
      break;
 8006448:	bf00      	nop
 800644a:	e00a      	b.n	8006462 <USBH_Process+0x3b6>
    break;
 800644c:	bf00      	nop
 800644e:	e008      	b.n	8006462 <USBH_Process+0x3b6>
      break;
 8006450:	bf00      	nop
 8006452:	e006      	b.n	8006462 <USBH_Process+0x3b6>
      break;
 8006454:	bf00      	nop
 8006456:	e004      	b.n	8006462 <USBH_Process+0x3b6>
      break;
 8006458:	bf00      	nop
 800645a:	e002      	b.n	8006462 <USBH_Process+0x3b6>
      break;
 800645c:	bf00      	nop
 800645e:	e000      	b.n	8006462 <USBH_Process+0x3b6>
      break;
 8006460:	bf00      	nop
  }
  return USBH_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af04      	add	r7, sp, #16
 8006472:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006478:	2301      	movs	r3, #1
 800647a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b07      	cmp	r3, #7
 8006482:	f200 81c1 	bhi.w	8006808 <USBH_HandleEnum+0x39c>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <USBH_HandleEnum+0x20>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064ad 	.word	0x080064ad
 8006490:	0800656b 	.word	0x0800656b
 8006494:	080065d5 	.word	0x080065d5
 8006498:	08006663 	.word	0x08006663
 800649c:	080066cd 	.word	0x080066cd
 80064a0:	0800673d 	.word	0x0800673d
 80064a4:	08006783 	.word	0x08006783
 80064a8:	080067c9 	.word	0x080067c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80064ac:	2108      	movs	r1, #8
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa50 	bl	8006954 <USBH_Get_DevDesc>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d130      	bne.n	8006520 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7919      	ldrb	r1, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80064e2:	b292      	uxth	r2, r2
 80064e4:	9202      	str	r2, [sp, #8]
 80064e6:	2200      	movs	r2, #0
 80064e8:	9201      	str	r2, [sp, #4]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	4603      	mov	r3, r0
 80064ee:	2280      	movs	r2, #128	; 0x80
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 ff77 	bl	80073e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7959      	ldrb	r1, [r3, #5]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800650a:	b292      	uxth	r2, r2
 800650c:	9202      	str	r2, [sp, #8]
 800650e:	2200      	movs	r2, #0
 8006510:	9201      	str	r2, [sp, #4]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	4603      	mov	r3, r0
 8006516:	2200      	movs	r2, #0
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 ff63 	bl	80073e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800651e:	e175      	b.n	800680c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	2b03      	cmp	r3, #3
 8006524:	f040 8172 	bne.w	800680c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800652e:	3301      	adds	r3, #1
 8006530:	b2da      	uxtb	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800653e:	2b03      	cmp	r3, #3
 8006540:	d903      	bls.n	800654a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	220d      	movs	r2, #13
 8006546:	701a      	strb	r2, [r3, #0]
      break;
 8006548:	e160      	b.n	800680c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	795b      	ldrb	r3, [r3, #5]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 ff97 	bl	8007484 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	791b      	ldrb	r3, [r3, #4]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 ff91 	bl	8007484 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	701a      	strb	r2, [r3, #0]
      break;
 8006568:	e150      	b.n	800680c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800656a:	2112      	movs	r1, #18
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f9f1 	bl	8006954 <USBH_Get_DevDesc>
 8006572:	4603      	mov	r3, r0
 8006574:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006576:	7bbb      	ldrb	r3, [r7, #14]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d103      	bne.n	8006584 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006582:	e145      	b.n	8006810 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b03      	cmp	r3, #3
 8006588:	f040 8142 	bne.w	8006810 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006592:	3301      	adds	r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d903      	bls.n	80065ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	220d      	movs	r2, #13
 80065aa:	701a      	strb	r2, [r3, #0]
      break;
 80065ac:	e130      	b.n	8006810 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	795b      	ldrb	r3, [r3, #5]
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 ff65 	bl	8007484 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	791b      	ldrb	r3, [r3, #4]
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 ff5f 	bl	8007484 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
      break;
 80065d2:	e11d      	b.n	8006810 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80065d4:	2101      	movs	r1, #1
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa68 	bl	8006aac <USBH_SetAddress>
 80065dc:	4603      	mov	r3, r0
 80065de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d132      	bne.n	800664c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80065e6:	2002      	movs	r0, #2
 80065e8:	f001 fa42 	bl	8007a70 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2203      	movs	r2, #3
 80065f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	7919      	ldrb	r1, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800660e:	b292      	uxth	r2, r2
 8006610:	9202      	str	r2, [sp, #8]
 8006612:	2200      	movs	r2, #0
 8006614:	9201      	str	r2, [sp, #4]
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	4603      	mov	r3, r0
 800661a:	2280      	movs	r2, #128	; 0x80
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fee1 	bl	80073e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	7959      	ldrb	r1, [r3, #5]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006636:	b292      	uxth	r2, r2
 8006638:	9202      	str	r2, [sp, #8]
 800663a:	2200      	movs	r2, #0
 800663c:	9201      	str	r2, [sp, #4]
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	4603      	mov	r3, r0
 8006642:	2200      	movs	r2, #0
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fecd 	bl	80073e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800664a:	e0e3      	b.n	8006814 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	2b03      	cmp	r3, #3
 8006650:	f040 80e0 	bne.w	8006814 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	220d      	movs	r2, #13
 8006658:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	705a      	strb	r2, [r3, #1]
      break;
 8006660:	e0d8      	b.n	8006814 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006662:	2109      	movs	r1, #9
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f99d 	bl	80069a4 <USBH_Get_CfgDesc>
 800666a:	4603      	mov	r3, r0
 800666c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2204      	movs	r2, #4
 8006678:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800667a:	e0cd      	b.n	8006818 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	2b03      	cmp	r3, #3
 8006680:	f040 80ca 	bne.w	8006818 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800668a:	3301      	adds	r3, #1
 800668c:	b2da      	uxtb	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800669a:	2b03      	cmp	r3, #3
 800669c:	d903      	bls.n	80066a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	220d      	movs	r2, #13
 80066a2:	701a      	strb	r2, [r3, #0]
      break;
 80066a4:	e0b8      	b.n	8006818 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	795b      	ldrb	r3, [r3, #5]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fee9 	bl	8007484 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	791b      	ldrb	r3, [r3, #4]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fee3 	bl	8007484 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
      break;
 80066ca:	e0a5      	b.n	8006818 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f965 	bl	80069a4 <USBH_Get_CfgDesc>
 80066da:	4603      	mov	r3, r0
 80066dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2205      	movs	r2, #5
 80066e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80066ea:	e097      	b.n	800681c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	f040 8094 	bne.w	800681c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066fa:	3301      	adds	r3, #1
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800670a:	2b03      	cmp	r3, #3
 800670c:	d903      	bls.n	8006716 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	220d      	movs	r2, #13
 8006712:	701a      	strb	r2, [r3, #0]
      break;
 8006714:	e082      	b.n	800681c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	795b      	ldrb	r3, [r3, #5]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 feb1 	bl	8007484 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	791b      	ldrb	r3, [r3, #4]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 feab 	bl	8007484 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
      break;
 800673a:	e06f      	b.n	800681c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006742:	2b00      	cmp	r3, #0
 8006744:	d019      	beq.n	800677a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006752:	23ff      	movs	r3, #255	; 0xff
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f949 	bl	80069ec <USBH_Get_StringDesc>
 800675a:	4603      	mov	r3, r0
 800675c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2206      	movs	r2, #6
 8006768:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800676a:	e059      	b.n	8006820 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	2b03      	cmp	r3, #3
 8006770:	d156      	bne.n	8006820 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2206      	movs	r2, #6
 8006776:	705a      	strb	r2, [r3, #1]
      break;
 8006778:	e052      	b.n	8006820 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2206      	movs	r2, #6
 800677e:	705a      	strb	r2, [r3, #1]
      break;
 8006780:	e04e      	b.n	8006820 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006788:	2b00      	cmp	r3, #0
 800678a:	d019      	beq.n	80067c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006798:	23ff      	movs	r3, #255	; 0xff
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f926 	bl	80069ec <USBH_Get_StringDesc>
 80067a0:	4603      	mov	r3, r0
 80067a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2207      	movs	r2, #7
 80067ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80067b0:	e038      	b.n	8006824 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d135      	bne.n	8006824 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2207      	movs	r2, #7
 80067bc:	705a      	strb	r2, [r3, #1]
      break;
 80067be:	e031      	b.n	8006824 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2207      	movs	r2, #7
 80067c4:	705a      	strb	r2, [r3, #1]
      break;
 80067c6:	e02d      	b.n	8006824 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d017      	beq.n	8006802 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80067de:	23ff      	movs	r3, #255	; 0xff
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f903 	bl	80069ec <USBH_Get_StringDesc>
 80067e6:	4603      	mov	r3, r0
 80067e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80067f4:	e018      	b.n	8006828 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d115      	bne.n	8006828 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006800:	e012      	b.n	8006828 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
      break;
 8006806:	e00f      	b.n	8006828 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006808:	bf00      	nop
 800680a:	e00e      	b.n	800682a <USBH_HandleEnum+0x3be>
      break;
 800680c:	bf00      	nop
 800680e:	e00c      	b.n	800682a <USBH_HandleEnum+0x3be>
      break;
 8006810:	bf00      	nop
 8006812:	e00a      	b.n	800682a <USBH_HandleEnum+0x3be>
      break;
 8006814:	bf00      	nop
 8006816:	e008      	b.n	800682a <USBH_HandleEnum+0x3be>
      break;
 8006818:	bf00      	nop
 800681a:	e006      	b.n	800682a <USBH_HandleEnum+0x3be>
      break;
 800681c:	bf00      	nop
 800681e:	e004      	b.n	800682a <USBH_HandleEnum+0x3be>
      break;
 8006820:	bf00      	nop
 8006822:	e002      	b.n	800682a <USBH_HandleEnum+0x3be>
      break;
 8006824:	bf00      	nop
 8006826:	e000      	b.n	800682a <USBH_HandleEnum+0x3be>
      break;
 8006828:	bf00      	nop
  }
  return Status;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f804 	bl	8006876 <USBH_HandleSof>
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b082      	sub	sp, #8
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b0b      	cmp	r3, #11
 8006886:	d10a      	bne.n	800689e <USBH_HandleSof+0x28>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
  }
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80068b6:	bf00      	nop
}
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80068d2:	bf00      	nop
}
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 ff56 	bl	80077de <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	791b      	ldrb	r3, [r3, #4]
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fda3 	bl	8007484 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	795b      	ldrb	r3, [r3, #5]
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fd9d 	bl	8007484 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af02      	add	r7, sp, #8
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	b29b      	uxth	r3, r3
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006972:	2100      	movs	r1, #0
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f864 	bl	8006a42 <USBH_GetDescriptor>
 800697a:	4603      	mov	r3, r0
 800697c:	73fb      	strb	r3, [r7, #15]
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f203 3026 	addw	r0, r3, #806	; 0x326
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	b292      	uxth	r2, r2
 8006994:	4619      	mov	r1, r3
 8006996:	f000 f918 	bl	8006bca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	331c      	adds	r3, #28
 80069b4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80069b6:	887b      	ldrh	r3, [r7, #2]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069c0:	2100      	movs	r1, #0
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f83d 	bl	8006a42 <USBH_GetDescriptor>
 80069c8:	4603      	mov	r3, r0
 80069ca:	72fb      	strb	r3, [r7, #11]
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d107      	bne.n	80069e2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80069d8:	887a      	ldrh	r2, [r7, #2]
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 f964 	bl	8006caa <USBH_ParseCfgDesc>
  }

  return status;
 80069e2:	7afb      	ldrb	r3, [r7, #11]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	607a      	str	r2, [r7, #4]
 80069f6:	461a      	mov	r2, r3
 80069f8:	460b      	mov	r3, r1
 80069fa:	72fb      	strb	r3, [r7, #11]
 80069fc:	4613      	mov	r3, r2
 80069fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a08:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006a10:	893b      	ldrh	r3, [r7, #8]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	460b      	mov	r3, r1
 8006a16:	2100      	movs	r1, #0
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f812 	bl	8006a42 <USBH_GetDescriptor>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d107      	bne.n	8006a38 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a2e:	893a      	ldrh	r2, [r7, #8]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fa37 	bl	8006ea6 <USBH_ParseStringDesc>
  }

  return status;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	607b      	str	r3, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	72fb      	strb	r3, [r7, #11]
 8006a50:	4613      	mov	r3, r2
 8006a52:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	789b      	ldrb	r3, [r3, #2]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d11c      	bne.n	8006a96 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2206      	movs	r2, #6
 8006a6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	893a      	ldrh	r2, [r7, #8]
 8006a72:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006a74:	893b      	ldrh	r3, [r7, #8]
 8006a76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7e:	d104      	bne.n	8006a8a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f240 4209 	movw	r2, #1033	; 0x409
 8006a86:	829a      	strh	r2, [r3, #20]
 8006a88:	e002      	b.n	8006a90 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8b3a      	ldrh	r2, [r7, #24]
 8006a94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006a96:	8b3b      	ldrh	r3, [r7, #24]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fa50 	bl	8006f42 <USBH_CtlReq>
 8006aa2:	4603      	mov	r3, r0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	789b      	ldrb	r3, [r3, #2]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d10f      	bne.n	8006ae0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2205      	movs	r2, #5
 8006aca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fa2c 	bl	8006f42 <USBH_CtlReq>
 8006aea:	4603      	mov	r3, r0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	789b      	ldrb	r3, [r3, #2]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d10e      	bne.n	8006b26 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2209      	movs	r2, #9
 8006b12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	887a      	ldrh	r2, [r7, #2]
 8006b18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b26:	2200      	movs	r2, #0
 8006b28:	2100      	movs	r1, #0
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa09 	bl	8006f42 <USBH_CtlReq>
 8006b30:	4603      	mov	r3, r0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	789b      	ldrb	r3, [r3, #2]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d10f      	bne.n	8006b6e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2203      	movs	r2, #3
 8006b58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2100      	movs	r1, #0
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9e5 	bl	8006f42 <USBH_CtlReq>
 8006b78:	4603      	mov	r3, r0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	789b      	ldrb	r3, [r3, #2]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d10f      	bne.n	8006bb6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9c1 	bl	8006f42 <USBH_CtlReq>
 8006bc0:	4603      	mov	r3, r0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	781a      	ldrb	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	785a      	ldrb	r2, [r3, #1]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	3302      	adds	r3, #2
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	3303      	adds	r3, #3
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	791a      	ldrb	r2, [r3, #4]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	795a      	ldrb	r2, [r3, #5]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	799a      	ldrb	r2, [r3, #6]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	79da      	ldrb	r2, [r3, #7]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d939      	bls.n	8006c9e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	3309      	adds	r3, #9
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	330a      	adds	r3, #10
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	330b      	adds	r3, #11
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	330c      	adds	r3, #12
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	330d      	adds	r3, #13
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4313      	orrs	r3, r2
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	7b9a      	ldrb	r2, [r3, #14]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	7bda      	ldrb	r2, [r3, #15]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	7c1a      	ldrb	r2, [r3, #16]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	7c5a      	ldrb	r2, [r3, #17]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	745a      	strb	r2, [r3, #17]
  }
}
 8006c9e:	bf00      	nop
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b08a      	sub	sp, #40	; 0x28
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	781a      	ldrb	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	785a      	ldrb	r2, [r3, #1]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	3302      	adds	r3, #2
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	3303      	adds	r3, #3
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	791a      	ldrb	r2, [r3, #4]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	795a      	ldrb	r2, [r3, #5]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	799a      	ldrb	r2, [r3, #6]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	79da      	ldrb	r2, [r3, #7]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	7a1a      	ldrb	r2, [r3, #8]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d95f      	bls.n	8006de6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006d26:	2309      	movs	r3, #9
 8006d28:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d2e:	e051      	b.n	8006dd4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d30:	f107 0316 	add.w	r3, r7, #22
 8006d34:	4619      	mov	r1, r3
 8006d36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d38:	f000 f8e8 	bl	8006f0c <USBH_GetNextDesc>
 8006d3c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d146      	bne.n	8006dd4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d4a:	221a      	movs	r2, #26
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
 8006d50:	3308      	adds	r3, #8
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	3302      	adds	r3, #2
 8006d58:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006d5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d5c:	69f8      	ldr	r0, [r7, #28]
 8006d5e:	f000 f846 	bl	8006dee <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d6c:	e022      	b.n	8006db4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d6e:	f107 0316 	add.w	r3, r7, #22
 8006d72:	4619      	mov	r1, r3
 8006d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d76:	f000 f8c9 	bl	8006f0c <USBH_GetNextDesc>
 8006d7a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b05      	cmp	r3, #5
 8006d82:	d117      	bne.n	8006db4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006d84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d8c:	3201      	adds	r2, #1
 8006d8e:	00d2      	lsls	r2, r2, #3
 8006d90:	211a      	movs	r1, #26
 8006d92:	fb01 f303 	mul.w	r3, r1, r3
 8006d96:	4413      	add	r3, r2
 8006d98:	3308      	adds	r3, #8
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3304      	adds	r3, #4
 8006da0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006da4:	69b8      	ldr	r0, [r7, #24]
 8006da6:	f000 f851 	bl	8006e4c <USBH_ParseEPDesc>
            ep_ix++;
 8006daa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006dae:	3301      	adds	r3, #1
 8006db0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	791b      	ldrb	r3, [r3, #4]
 8006db8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d204      	bcs.n	8006dca <USBH_ParseCfgDesc+0x120>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	885a      	ldrh	r2, [r3, #2]
 8006dc4:	8afb      	ldrh	r3, [r7, #22]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d8d1      	bhi.n	8006d6e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d804      	bhi.n	8006de6 <USBH_ParseCfgDesc+0x13c>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	885a      	ldrh	r2, [r3, #2]
 8006de0:	8afb      	ldrh	r3, [r7, #22]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d8a4      	bhi.n	8006d30 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006de6:	bf00      	nop
 8006de8:	3728      	adds	r7, #40	; 0x28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781a      	ldrb	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	785a      	ldrb	r2, [r3, #1]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	789a      	ldrb	r2, [r3, #2]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	78da      	ldrb	r2, [r3, #3]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	791a      	ldrb	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	795a      	ldrb	r2, [r3, #5]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	799a      	ldrb	r2, [r3, #6]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	79da      	ldrb	r2, [r3, #7]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	7a1a      	ldrb	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	721a      	strb	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781a      	ldrb	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	785a      	ldrb	r2, [r3, #1]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	789a      	ldrb	r2, [r3, #2]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	78da      	ldrb	r2, [r3, #3]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	3305      	adds	r3, #5
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	799a      	ldrb	r2, [r3, #6]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	719a      	strb	r2, [r3, #6]
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b087      	sub	sp, #28
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d120      	bne.n	8006f00 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	1e9a      	subs	r2, r3, #2
 8006ec4:	88fb      	ldrh	r3, [r7, #6]
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bf28      	it	cs
 8006eca:	4613      	movcs	r3, r2
 8006ecc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3302      	adds	r3, #2
 8006ed2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	82fb      	strh	r3, [r7, #22]
 8006ed8:	e00b      	b.n	8006ef2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006eda:	8afb      	ldrh	r3, [r7, #22]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006eec:	8afb      	ldrh	r3, [r7, #22]
 8006eee:	3302      	adds	r3, #2
 8006ef0:	82fb      	strh	r3, [r7, #22]
 8006ef2:	8afa      	ldrh	r2, [r7, #22]
 8006ef4:	8abb      	ldrh	r3, [r7, #20]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d3ef      	bcc.n	8006eda <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
  }
}
 8006f00:	bf00      	nop
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	881a      	ldrh	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	4413      	add	r3, r2
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f34:	68fb      	ldr	r3, [r7, #12]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f50:	2301      	movs	r3, #1
 8006f52:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	789b      	ldrb	r3, [r3, #2]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d002      	beq.n	8006f62 <USBH_CtlReq+0x20>
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d00f      	beq.n	8006f80 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006f60:	e027      	b.n	8006fb2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	88fa      	ldrh	r2, [r7, #6]
 8006f6c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2202      	movs	r2, #2
 8006f78:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7e:	e018      	b.n	8006fb2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f81b 	bl	8006fbc <USBH_HandleControl>
 8006f86:	4603      	mov	r3, r0
 8006f88:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <USBH_CtlReq+0x54>
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d106      	bne.n	8006fa4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	761a      	strb	r2, [r3, #24]
      break;
 8006fa2:	e005      	b.n	8006fb0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d102      	bne.n	8006fb0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	709a      	strb	r2, [r3, #2]
      break;
 8006fb0:	bf00      	nop
  }
  return status;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7e1b      	ldrb	r3, [r3, #24]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	2b0a      	cmp	r3, #10
 8006fd4:	f200 8156 	bhi.w	8007284 <USBH_HandleControl+0x2c8>
 8006fd8:	a201      	add	r2, pc, #4	; (adr r2, 8006fe0 <USBH_HandleControl+0x24>)
 8006fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fde:	bf00      	nop
 8006fe0:	0800700d 	.word	0x0800700d
 8006fe4:	08007027 	.word	0x08007027
 8006fe8:	08007091 	.word	0x08007091
 8006fec:	080070b7 	.word	0x080070b7
 8006ff0:	080070ef 	.word	0x080070ef
 8006ff4:	08007119 	.word	0x08007119
 8006ff8:	0800716b 	.word	0x0800716b
 8006ffc:	0800718d 	.word	0x0800718d
 8007000:	080071c9 	.word	0x080071c9
 8007004:	080071ef 	.word	0x080071ef
 8007008:	0800722d 	.word	0x0800722d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f103 0110 	add.w	r1, r3, #16
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	795b      	ldrb	r3, [r3, #5]
 8007016:	461a      	mov	r2, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f943 	bl	80072a4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	761a      	strb	r2, [r3, #24]
      break;
 8007024:	e139      	b.n	800729a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	795b      	ldrb	r3, [r3, #5]
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fcc5 	bl	80079bc <USBH_LL_GetURBState>
 8007032:	4603      	mov	r3, r0
 8007034:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d11e      	bne.n	800707a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	7c1b      	ldrb	r3, [r3, #16]
 8007040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007044:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	8adb      	ldrh	r3, [r3, #22]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800704e:	7b7b      	ldrb	r3, [r7, #13]
 8007050:	2b80      	cmp	r3, #128	; 0x80
 8007052:	d103      	bne.n	800705c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2203      	movs	r2, #3
 8007058:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800705a:	e115      	b.n	8007288 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2205      	movs	r2, #5
 8007060:	761a      	strb	r2, [r3, #24]
      break;
 8007062:	e111      	b.n	8007288 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007064:	7b7b      	ldrb	r3, [r7, #13]
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d103      	bne.n	8007072 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2209      	movs	r2, #9
 800706e:	761a      	strb	r2, [r3, #24]
      break;
 8007070:	e10a      	b.n	8007288 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2207      	movs	r2, #7
 8007076:	761a      	strb	r2, [r3, #24]
      break;
 8007078:	e106      	b.n	8007288 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b04      	cmp	r3, #4
 800707e:	d003      	beq.n	8007088 <USBH_HandleControl+0xcc>
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2b02      	cmp	r3, #2
 8007084:	f040 8100 	bne.w	8007288 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	220b      	movs	r2, #11
 800708c:	761a      	strb	r2, [r3, #24]
      break;
 800708e:	e0fb      	b.n	8007288 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6899      	ldr	r1, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	899a      	ldrh	r2, [r3, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	791b      	ldrb	r3, [r3, #4]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f93a 	bl	8007322 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2204      	movs	r2, #4
 80070b2:	761a      	strb	r2, [r3, #24]
      break;
 80070b4:	e0f1      	b.n	800729a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fc7d 	bl	80079bc <USBH_LL_GetURBState>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d102      	bne.n	80070d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2209      	movs	r2, #9
 80070d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b05      	cmp	r3, #5
 80070d6:	d102      	bne.n	80070de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80070d8:	2303      	movs	r3, #3
 80070da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070dc:	e0d6      	b.n	800728c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	f040 80d3 	bne.w	800728c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	220b      	movs	r2, #11
 80070ea:	761a      	strb	r2, [r3, #24]
      break;
 80070ec:	e0ce      	b.n	800728c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6899      	ldr	r1, [r3, #8]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	899a      	ldrh	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	795b      	ldrb	r3, [r3, #5]
 80070fa:	2001      	movs	r0, #1
 80070fc:	9000      	str	r0, [sp, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f8ea 	bl	80072d8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800710a:	b29a      	uxth	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2206      	movs	r2, #6
 8007114:	761a      	strb	r2, [r3, #24]
      break;
 8007116:	e0c0      	b.n	800729a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	795b      	ldrb	r3, [r3, #5]
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fc4c 	bl	80079bc <USBH_LL_GetURBState>
 8007124:	4603      	mov	r3, r0
 8007126:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d103      	bne.n	8007136 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2207      	movs	r2, #7
 8007132:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007134:	e0ac      	b.n	8007290 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b05      	cmp	r3, #5
 800713a:	d105      	bne.n	8007148 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	220c      	movs	r2, #12
 8007140:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007142:	2303      	movs	r3, #3
 8007144:	73fb      	strb	r3, [r7, #15]
      break;
 8007146:	e0a3      	b.n	8007290 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d103      	bne.n	8007156 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2205      	movs	r2, #5
 8007152:	761a      	strb	r2, [r3, #24]
      break;
 8007154:	e09c      	b.n	8007290 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b04      	cmp	r3, #4
 800715a:	f040 8099 	bne.w	8007290 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	220b      	movs	r2, #11
 8007162:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007164:	2302      	movs	r3, #2
 8007166:	73fb      	strb	r3, [r7, #15]
      break;
 8007168:	e092      	b.n	8007290 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	2100      	movs	r1, #0
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f8d5 	bl	8007322 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800717e:	b29a      	uxth	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2208      	movs	r2, #8
 8007188:	761a      	strb	r2, [r3, #24]

      break;
 800718a:	e086      	b.n	800729a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	791b      	ldrb	r3, [r3, #4]
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fc12 	bl	80079bc <USBH_LL_GetURBState>
 8007198:	4603      	mov	r3, r0
 800719a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d105      	bne.n	80071ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	220d      	movs	r2, #13
 80071a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071ac:	e072      	b.n	8007294 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d103      	bne.n	80071bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	220b      	movs	r2, #11
 80071b8:	761a      	strb	r2, [r3, #24]
      break;
 80071ba:	e06b      	b.n	8007294 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b05      	cmp	r3, #5
 80071c0:	d168      	bne.n	8007294 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80071c2:	2303      	movs	r3, #3
 80071c4:	73fb      	strb	r3, [r7, #15]
      break;
 80071c6:	e065      	b.n	8007294 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	795b      	ldrb	r3, [r3, #5]
 80071cc:	2201      	movs	r2, #1
 80071ce:	9200      	str	r2, [sp, #0]
 80071d0:	2200      	movs	r2, #0
 80071d2:	2100      	movs	r1, #0
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f87f 	bl	80072d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	220a      	movs	r2, #10
 80071ea:	761a      	strb	r2, [r3, #24]
      break;
 80071ec:	e055      	b.n	800729a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	795b      	ldrb	r3, [r3, #5]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fbe1 	bl	80079bc <USBH_LL_GetURBState>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d105      	bne.n	8007210 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	220d      	movs	r2, #13
 800720c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800720e:	e043      	b.n	8007298 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d103      	bne.n	800721e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2209      	movs	r2, #9
 800721a:	761a      	strb	r2, [r3, #24]
      break;
 800721c:	e03c      	b.n	8007298 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d139      	bne.n	8007298 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	220b      	movs	r2, #11
 8007228:	761a      	strb	r2, [r3, #24]
      break;
 800722a:	e035      	b.n	8007298 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	7e5b      	ldrb	r3, [r3, #25]
 8007230:	3301      	adds	r3, #1
 8007232:	b2da      	uxtb	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	765a      	strb	r2, [r3, #25]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7e5b      	ldrb	r3, [r3, #25]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d806      	bhi.n	800724e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800724c:	e025      	b.n	800729a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007254:	2106      	movs	r1, #6
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	795b      	ldrb	r3, [r3, #5]
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f90c 	bl	8007484 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	791b      	ldrb	r3, [r3, #4]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f906 	bl	8007484 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	73fb      	strb	r3, [r7, #15]
      break;
 8007282:	e00a      	b.n	800729a <USBH_HandleControl+0x2de>

    default:
      break;
 8007284:	bf00      	nop
 8007286:	e008      	b.n	800729a <USBH_HandleControl+0x2de>
      break;
 8007288:	bf00      	nop
 800728a:	e006      	b.n	800729a <USBH_HandleControl+0x2de>
      break;
 800728c:	bf00      	nop
 800728e:	e004      	b.n	800729a <USBH_HandleControl+0x2de>
      break;
 8007290:	bf00      	nop
 8007292:	e002      	b.n	800729a <USBH_HandleControl+0x2de>
      break;
 8007294:	bf00      	nop
 8007296:	e000      	b.n	800729a <USBH_HandleControl+0x2de>
      break;
 8007298:	bf00      	nop
  }

  return status;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af04      	add	r7, sp, #16
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072b2:	79f9      	ldrb	r1, [r7, #7]
 80072b4:	2300      	movs	r3, #0
 80072b6:	9303      	str	r3, [sp, #12]
 80072b8:	2308      	movs	r3, #8
 80072ba:	9302      	str	r3, [sp, #8]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	2300      	movs	r3, #0
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	2300      	movs	r3, #0
 80072c6:	2200      	movs	r2, #0
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 fb46 	bl	800795a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af04      	add	r7, sp, #16
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4611      	mov	r1, r2
 80072e4:	461a      	mov	r2, r3
 80072e6:	460b      	mov	r3, r1
 80072e8:	80fb      	strh	r3, [r7, #6]
 80072ea:	4613      	mov	r3, r2
 80072ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072fc:	7979      	ldrb	r1, [r7, #5]
 80072fe:	7e3b      	ldrb	r3, [r7, #24]
 8007300:	9303      	str	r3, [sp, #12]
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	9302      	str	r3, [sp, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	2301      	movs	r3, #1
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	2300      	movs	r3, #0
 8007310:	2200      	movs	r2, #0
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fb21 	bl	800795a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b088      	sub	sp, #32
 8007326:	af04      	add	r7, sp, #16
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	4611      	mov	r1, r2
 800732e:	461a      	mov	r2, r3
 8007330:	460b      	mov	r3, r1
 8007332:	80fb      	strh	r3, [r7, #6]
 8007334:	4613      	mov	r3, r2
 8007336:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007338:	7979      	ldrb	r1, [r7, #5]
 800733a:	2300      	movs	r3, #0
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	2301      	movs	r3, #1
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	2300      	movs	r3, #0
 800734c:	2201      	movs	r2, #1
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fb03 	bl	800795a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007354:	2300      	movs	r3, #0

}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b088      	sub	sp, #32
 8007362:	af04      	add	r7, sp, #16
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	4611      	mov	r1, r2
 800736a:	461a      	mov	r2, r3
 800736c:	460b      	mov	r3, r1
 800736e:	80fb      	strh	r3, [r7, #6]
 8007370:	4613      	mov	r3, r2
 8007372:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007382:	7979      	ldrb	r1, [r7, #5]
 8007384:	7e3b      	ldrb	r3, [r7, #24]
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	9302      	str	r3, [sp, #8]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	2301      	movs	r3, #1
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	2302      	movs	r3, #2
 8007396:	2200      	movs	r2, #0
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fade 	bl	800795a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b088      	sub	sp, #32
 80073ac:	af04      	add	r7, sp, #16
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4611      	mov	r1, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	460b      	mov	r3, r1
 80073b8:	80fb      	strh	r3, [r7, #6]
 80073ba:	4613      	mov	r3, r2
 80073bc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80073be:	7979      	ldrb	r1, [r7, #5]
 80073c0:	2300      	movs	r3, #0
 80073c2:	9303      	str	r3, [sp, #12]
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	9302      	str	r3, [sp, #8]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	2301      	movs	r3, #1
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	2302      	movs	r3, #2
 80073d2:	2201      	movs	r2, #1
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 fac0 	bl	800795a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af04      	add	r7, sp, #16
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	4608      	mov	r0, r1
 80073ee:	4611      	mov	r1, r2
 80073f0:	461a      	mov	r2, r3
 80073f2:	4603      	mov	r3, r0
 80073f4:	70fb      	strb	r3, [r7, #3]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70bb      	strb	r3, [r7, #2]
 80073fa:	4613      	mov	r3, r2
 80073fc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80073fe:	7878      	ldrb	r0, [r7, #1]
 8007400:	78ba      	ldrb	r2, [r7, #2]
 8007402:	78f9      	ldrb	r1, [r7, #3]
 8007404:	8b3b      	ldrh	r3, [r7, #24]
 8007406:	9302      	str	r3, [sp, #8]
 8007408:	7d3b      	ldrb	r3, [r7, #20]
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	7c3b      	ldrb	r3, [r7, #16]
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	4603      	mov	r3, r0
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa53 	bl	80078be <USBH_LL_OpenPipe>

  return USBH_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	460b      	mov	r3, r1
 800742c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fa72 	bl	800791c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f836 	bl	80074c0 <USBH_GetFreePipe>
 8007454:	4603      	mov	r3, r0
 8007456:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007458:	89fb      	ldrh	r3, [r7, #14]
 800745a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800745e:	4293      	cmp	r3, r2
 8007460:	d00a      	beq.n	8007478 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007462:	78fa      	ldrb	r2, [r7, #3]
 8007464:	89fb      	ldrh	r3, [r7, #14]
 8007466:	f003 030f 	and.w	r3, r3, #15
 800746a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	33e0      	adds	r3, #224	; 0xe0
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	440b      	add	r3, r1
 8007476:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007478:	89fb      	ldrh	r3, [r7, #14]
 800747a:	b2db      	uxtb	r3, r3
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	2b0a      	cmp	r3, #10
 8007494:	d80d      	bhi.n	80074b2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	33e0      	adds	r3, #224	; 0xe0
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	33e0      	adds	r3, #224	; 0xe0
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	440b      	add	r3, r1
 80074b0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
 80074d0:	e00f      	b.n	80074f2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	33e0      	adds	r3, #224	; 0xe0
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	e007      	b.n	80074fc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	3301      	adds	r3, #1
 80074f0:	73fb      	strb	r3, [r7, #15]
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b0a      	cmp	r3, #10
 80074f6:	d9ec      	bls.n	80074d2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80074f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800750c:	2201      	movs	r2, #1
 800750e:	490e      	ldr	r1, [pc, #56]	; (8007548 <MX_USB_HOST_Init+0x40>)
 8007510:	480e      	ldr	r0, [pc, #56]	; (800754c <MX_USB_HOST_Init+0x44>)
 8007512:	f7fe fca1 	bl	8005e58 <USBH_Init>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800751c:	f7f9 fa2a 	bl	8000974 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007520:	490b      	ldr	r1, [pc, #44]	; (8007550 <MX_USB_HOST_Init+0x48>)
 8007522:	480a      	ldr	r0, [pc, #40]	; (800754c <MX_USB_HOST_Init+0x44>)
 8007524:	f7fe fd26 	bl	8005f74 <USBH_RegisterClass>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800752e:	f7f9 fa21 	bl	8000974 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007532:	4806      	ldr	r0, [pc, #24]	; (800754c <MX_USB_HOST_Init+0x44>)
 8007534:	f7fe fdaa 	bl	800608c <USBH_Start>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800753e:	f7f9 fa19 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007542:	bf00      	nop
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	08007569 	.word	0x08007569
 800754c:	200001bc 	.word	0x200001bc
 8007550:	2000000c 	.word	0x2000000c

08007554 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007558:	4802      	ldr	r0, [pc, #8]	; (8007564 <MX_USB_HOST_Process+0x10>)
 800755a:	f7fe fda7 	bl	80060ac <USBH_Process>
}
 800755e:	bf00      	nop
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	200001bc 	.word	0x200001bc

08007568 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	3b01      	subs	r3, #1
 8007578:	2b04      	cmp	r3, #4
 800757a:	d819      	bhi.n	80075b0 <USBH_UserProcess+0x48>
 800757c:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <USBH_UserProcess+0x1c>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	080075b1 	.word	0x080075b1
 8007588:	080075a1 	.word	0x080075a1
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075a9 	.word	0x080075a9
 8007594:	08007599 	.word	0x08007599
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007598:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <USBH_UserProcess+0x58>)
 800759a:	2203      	movs	r2, #3
 800759c:	701a      	strb	r2, [r3, #0]
  break;
 800759e:	e008      	b.n	80075b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <USBH_UserProcess+0x58>)
 80075a2:	2202      	movs	r2, #2
 80075a4:	701a      	strb	r2, [r3, #0]
  break;
 80075a6:	e004      	b.n	80075b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80075a8:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <USBH_UserProcess+0x58>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
  break;
 80075ae:	e000      	b.n	80075b2 <USBH_UserProcess+0x4a>

  default:
  break;
 80075b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80075b2:	bf00      	nop
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	200000b8 	.word	0x200000b8

080075c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	; 0x28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075cc:	f107 0314 	add.w	r3, r7, #20
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	605a      	str	r2, [r3, #4]
 80075d6:	609a      	str	r2, [r3, #8]
 80075d8:	60da      	str	r2, [r3, #12]
 80075da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075e4:	d147      	bne.n	8007676 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075e6:	2300      	movs	r3, #0
 80075e8:	613b      	str	r3, [r7, #16]
 80075ea:	4b25      	ldr	r3, [pc, #148]	; (8007680 <HAL_HCD_MspInit+0xbc>)
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	4a24      	ldr	r2, [pc, #144]	; (8007680 <HAL_HCD_MspInit+0xbc>)
 80075f0:	f043 0301 	orr.w	r3, r3, #1
 80075f4:	6313      	str	r3, [r2, #48]	; 0x30
 80075f6:	4b22      	ldr	r3, [pc, #136]	; (8007680 <HAL_HCD_MspInit+0xbc>)
 80075f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007608:	2300      	movs	r3, #0
 800760a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760c:	2300      	movs	r3, #0
 800760e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	4619      	mov	r1, r3
 8007616:	481b      	ldr	r0, [pc, #108]	; (8007684 <HAL_HCD_MspInit+0xc0>)
 8007618:	f7f9 fd4e 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800761c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007622:	2302      	movs	r3, #2
 8007624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007626:	2300      	movs	r3, #0
 8007628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800762a:	2300      	movs	r3, #0
 800762c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800762e:	230a      	movs	r3, #10
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	4619      	mov	r1, r3
 8007638:	4812      	ldr	r0, [pc, #72]	; (8007684 <HAL_HCD_MspInit+0xc0>)
 800763a:	f7f9 fd3d 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800763e:	4b10      	ldr	r3, [pc, #64]	; (8007680 <HAL_HCD_MspInit+0xbc>)
 8007640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007642:	4a0f      	ldr	r2, [pc, #60]	; (8007680 <HAL_HCD_MspInit+0xbc>)
 8007644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007648:	6353      	str	r3, [r2, #52]	; 0x34
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <HAL_HCD_MspInit+0xbc>)
 8007650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007652:	4a0b      	ldr	r2, [pc, #44]	; (8007680 <HAL_HCD_MspInit+0xbc>)
 8007654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007658:	6453      	str	r3, [r2, #68]	; 0x44
 800765a:	4b09      	ldr	r3, [pc, #36]	; (8007680 <HAL_HCD_MspInit+0xbc>)
 800765c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007666:	2200      	movs	r2, #0
 8007668:	2100      	movs	r1, #0
 800766a:	2043      	movs	r0, #67	; 0x43
 800766c:	f7f9 fced 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007670:	2043      	movs	r0, #67	; 0x43
 8007672:	f7f9 fd06 	bl	8001082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007676:	bf00      	nop
 8007678:	3728      	adds	r7, #40	; 0x28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40023800 	.word	0x40023800
 8007684:	40020000 	.word	0x40020000

08007688 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff f8db 	bl	8006852 <USBH_LL_IncTimer>
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff f913 	bl	80068de <USBH_LL_Connect>
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff f91c 	bl	800690c <USBH_LL_Disconnect>
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
 80076e8:	4613      	mov	r3, r2
 80076ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff f8cd 	bl	80068a6 <USBH_LL_PortEnabled>
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff f8cd 	bl	80068c2 <USBH_LL_PortDisabled>
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800773e:	2b01      	cmp	r3, #1
 8007740:	d12a      	bne.n	8007798 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007742:	4a18      	ldr	r2, [pc, #96]	; (80077a4 <USBH_LL_Init+0x74>)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <USBH_LL_Init+0x74>)
 800774e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007752:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <USBH_LL_Init+0x74>)
 8007754:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007758:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <USBH_LL_Init+0x74>)
 800775c:	2208      	movs	r2, #8
 800775e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007760:	4b10      	ldr	r3, [pc, #64]	; (80077a4 <USBH_LL_Init+0x74>)
 8007762:	2201      	movs	r2, #1
 8007764:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007766:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <USBH_LL_Init+0x74>)
 8007768:	2200      	movs	r2, #0
 800776a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800776c:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <USBH_LL_Init+0x74>)
 800776e:	2202      	movs	r2, #2
 8007770:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007772:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <USBH_LL_Init+0x74>)
 8007774:	2200      	movs	r2, #0
 8007776:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007778:	480a      	ldr	r0, [pc, #40]	; (80077a4 <USBH_LL_Init+0x74>)
 800777a:	f7f9 fe9d 	bl	80014b8 <HAL_HCD_Init>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007784:	f7f9 f8f6 	bl	8000974 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007788:	4806      	ldr	r0, [pc, #24]	; (80077a4 <USBH_LL_Init+0x74>)
 800778a:	f7fa fa80 	bl	8001c8e <HAL_HCD_GetCurrentFrame>
 800778e:	4603      	mov	r3, r0
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff f84e 	bl	8006834 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20000594 	.word	0x20000594

080077a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fa f9ef 	bl	8001ba2 <HAL_HCD_Start>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 f95c 	bl	8007a88 <USBH_Get_USB_Status>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fa f9f7 	bl	8001be8 <HAL_HCD_Stop>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	4618      	mov	r0, r3
 8007802:	f000 f941 	bl	8007a88 <USBH_Get_USB_Status>
 8007806:	4603      	mov	r3, r0
 8007808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800780a:	7bbb      	ldrb	r3, [r7, #14]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007826:	4618      	mov	r0, r3
 8007828:	f7fa fa3f 	bl	8001caa <HAL_HCD_GetCurrentSpeed>
 800782c:	4603      	mov	r3, r0
 800782e:	2b02      	cmp	r3, #2
 8007830:	d00c      	beq.n	800784c <USBH_LL_GetSpeed+0x38>
 8007832:	2b02      	cmp	r3, #2
 8007834:	d80d      	bhi.n	8007852 <USBH_LL_GetSpeed+0x3e>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <USBH_LL_GetSpeed+0x2c>
 800783a:	2b01      	cmp	r3, #1
 800783c:	d003      	beq.n	8007846 <USBH_LL_GetSpeed+0x32>
 800783e:	e008      	b.n	8007852 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007840:	2300      	movs	r3, #0
 8007842:	73fb      	strb	r3, [r7, #15]
    break;
 8007844:	e008      	b.n	8007858 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007846:	2301      	movs	r3, #1
 8007848:	73fb      	strb	r3, [r7, #15]
    break;
 800784a:	e005      	b.n	8007858 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800784c:	2302      	movs	r3, #2
 800784e:	73fb      	strb	r3, [r7, #15]
    break;
 8007850:	e002      	b.n	8007858 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007852:	2301      	movs	r3, #1
 8007854:	73fb      	strb	r3, [r7, #15]
    break;
 8007856:	bf00      	nop
  }
  return  speed;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007878:	4618      	mov	r0, r3
 800787a:	f7fa f9d2 	bl	8001c22 <HAL_HCD_ResetPort>
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f8ff 	bl	8007a88 <USBH_Get_USB_Status>
 800788a:	4603      	mov	r3, r0
 800788c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800788e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	4611      	mov	r1, r2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fa f9d9 	bl	8001c66 <HAL_HCD_HC_GetXferCount>
 80078b4:	4603      	mov	r3, r0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80078be:	b590      	push	{r4, r7, lr}
 80078c0:	b089      	sub	sp, #36	; 0x24
 80078c2:	af04      	add	r7, sp, #16
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	461a      	mov	r2, r3
 80078cc:	4603      	mov	r3, r0
 80078ce:	70fb      	strb	r3, [r7, #3]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70bb      	strb	r3, [r7, #2]
 80078d4:	4613      	mov	r3, r2
 80078d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078e6:	787c      	ldrb	r4, [r7, #1]
 80078e8:	78ba      	ldrb	r2, [r7, #2]
 80078ea:	78f9      	ldrb	r1, [r7, #3]
 80078ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078ee:	9302      	str	r3, [sp, #8]
 80078f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	4623      	mov	r3, r4
 80078fe:	f7f9 fe3d 	bl	800157c <HAL_HCD_HC_Init>
 8007902:	4603      	mov	r3, r0
 8007904:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f8bd 	bl	8007a88 <USBH_Get_USB_Status>
 800790e:	4603      	mov	r3, r0
 8007910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007912:	7bbb      	ldrb	r3, [r7, #14]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	bd90      	pop	{r4, r7, pc}

0800791c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007936:	78fa      	ldrb	r2, [r7, #3]
 8007938:	4611      	mov	r1, r2
 800793a:	4618      	mov	r0, r3
 800793c:	f7f9 fead 	bl	800169a <HAL_HCD_HC_Halt>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f89e 	bl	8007a88 <USBH_Get_USB_Status>
 800794c:	4603      	mov	r3, r0
 800794e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007950:	7bbb      	ldrb	r3, [r7, #14]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800795a:	b590      	push	{r4, r7, lr}
 800795c:	b089      	sub	sp, #36	; 0x24
 800795e:	af04      	add	r7, sp, #16
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	4608      	mov	r0, r1
 8007964:	4611      	mov	r1, r2
 8007966:	461a      	mov	r2, r3
 8007968:	4603      	mov	r3, r0
 800796a:	70fb      	strb	r3, [r7, #3]
 800796c:	460b      	mov	r3, r1
 800796e:	70bb      	strb	r3, [r7, #2]
 8007970:	4613      	mov	r3, r2
 8007972:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007982:	787c      	ldrb	r4, [r7, #1]
 8007984:	78ba      	ldrb	r2, [r7, #2]
 8007986:	78f9      	ldrb	r1, [r7, #3]
 8007988:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800798c:	9303      	str	r3, [sp, #12]
 800798e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007990:	9302      	str	r3, [sp, #8]
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	4623      	mov	r3, r4
 800799e:	f7f9 fe9f 	bl	80016e0 <HAL_HCD_HC_SubmitRequest>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 f86d 	bl	8007a88 <USBH_Get_USB_Status>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd90      	pop	{r4, r7, pc}

080079bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	4611      	mov	r1, r2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fa f933 	bl	8001c3e <HAL_HCD_HC_GetURBState>
 80079d8:	4603      	mov	r3, r0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d103      	bne.n	8007a00 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f870 	bl	8007ae0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007a00:	20c8      	movs	r0, #200	; 0xc8
 8007a02:	f7f9 fa23 	bl	8000e4c <HAL_Delay>
  return USBH_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a26:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	212c      	movs	r1, #44	; 0x2c
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	333b      	adds	r3, #59	; 0x3b
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	212c      	movs	r1, #44	; 0x2c
 8007a42:	fb01 f303 	mul.w	r3, r1, r3
 8007a46:	4413      	add	r3, r2
 8007a48:	3354      	adds	r3, #84	; 0x54
 8007a4a:	78ba      	ldrb	r2, [r7, #2]
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	e008      	b.n	8007a62 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	212c      	movs	r1, #44	; 0x2c
 8007a56:	fb01 f303 	mul.w	r3, r1, r3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3355      	adds	r3, #85	; 0x55
 8007a5e:	78ba      	ldrb	r2, [r7, #2]
 8007a60:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7f9 f9e7 	bl	8000e4c <HAL_Delay>
}
 8007a7e:	bf00      	nop
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d817      	bhi.n	8007acc <USBH_Get_USB_Status+0x44>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <USBH_Get_USB_Status+0x1c>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007abb 	.word	0x08007abb
 8007aac:	08007ac1 	.word	0x08007ac1
 8007ab0:	08007ac7 	.word	0x08007ac7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab8:	e00b      	b.n	8007ad2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007aba:	2302      	movs	r3, #2
 8007abc:	73fb      	strb	r3, [r7, #15]
    break;
 8007abe:	e008      	b.n	8007ad2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac4:	e005      	b.n	8007ad2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aca:	e002      	b.n	8007ad2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007acc:	2302      	movs	r3, #2
 8007ace:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad0:	bf00      	nop
  }
  return usb_status;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]
 8007af8:	e001      	b.n	8007afe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007afa:	2301      	movs	r3, #1
 8007afc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	461a      	mov	r2, r3
 8007b02:	2101      	movs	r1, #1
 8007b04:	4803      	ldr	r0, [pc, #12]	; (8007b14 <MX_DriverVbusFS+0x34>)
 8007b06:	f7f9 fc8b 	bl	8001420 <HAL_GPIO_WritePin>
}
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40020800 	.word	0x40020800

08007b18 <__errno>:
 8007b18:	4b01      	ldr	r3, [pc, #4]	; (8007b20 <__errno+0x8>)
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	2000002c 	.word	0x2000002c

08007b24 <__libc_init_array>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4d0d      	ldr	r5, [pc, #52]	; (8007b5c <__libc_init_array+0x38>)
 8007b28:	4c0d      	ldr	r4, [pc, #52]	; (8007b60 <__libc_init_array+0x3c>)
 8007b2a:	1b64      	subs	r4, r4, r5
 8007b2c:	10a4      	asrs	r4, r4, #2
 8007b2e:	2600      	movs	r6, #0
 8007b30:	42a6      	cmp	r6, r4
 8007b32:	d109      	bne.n	8007b48 <__libc_init_array+0x24>
 8007b34:	4d0b      	ldr	r5, [pc, #44]	; (8007b64 <__libc_init_array+0x40>)
 8007b36:	4c0c      	ldr	r4, [pc, #48]	; (8007b68 <__libc_init_array+0x44>)
 8007b38:	f000 f8f8 	bl	8007d2c <_init>
 8007b3c:	1b64      	subs	r4, r4, r5
 8007b3e:	10a4      	asrs	r4, r4, #2
 8007b40:	2600      	movs	r6, #0
 8007b42:	42a6      	cmp	r6, r4
 8007b44:	d105      	bne.n	8007b52 <__libc_init_array+0x2e>
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4c:	4798      	blx	r3
 8007b4e:	3601      	adds	r6, #1
 8007b50:	e7ee      	b.n	8007b30 <__libc_init_array+0xc>
 8007b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b56:	4798      	blx	r3
 8007b58:	3601      	adds	r6, #1
 8007b5a:	e7f2      	b.n	8007b42 <__libc_init_array+0x1e>
 8007b5c:	08007d68 	.word	0x08007d68
 8007b60:	08007d68 	.word	0x08007d68
 8007b64:	08007d68 	.word	0x08007d68
 8007b68:	08007d6c 	.word	0x08007d6c

08007b6c <malloc>:
 8007b6c:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <malloc+0xc>)
 8007b6e:	4601      	mov	r1, r0
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	f000 b863 	b.w	8007c3c <_malloc_r>
 8007b76:	bf00      	nop
 8007b78:	2000002c 	.word	0x2000002c

08007b7c <free>:
 8007b7c:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <free+0xc>)
 8007b7e:	4601      	mov	r1, r0
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	f000 b80b 	b.w	8007b9c <_free_r>
 8007b86:	bf00      	nop
 8007b88:	2000002c 	.word	0x2000002c

08007b8c <memset>:
 8007b8c:	4402      	add	r2, r0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d100      	bne.n	8007b96 <memset+0xa>
 8007b94:	4770      	bx	lr
 8007b96:	f803 1b01 	strb.w	r1, [r3], #1
 8007b9a:	e7f9      	b.n	8007b90 <memset+0x4>

08007b9c <_free_r>:
 8007b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d048      	beq.n	8007c34 <_free_r+0x98>
 8007ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba6:	9001      	str	r0, [sp, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f1a1 0404 	sub.w	r4, r1, #4
 8007bae:	bfb8      	it	lt
 8007bb0:	18e4      	addlt	r4, r4, r3
 8007bb2:	f000 f8ad 	bl	8007d10 <__malloc_lock>
 8007bb6:	4a20      	ldr	r2, [pc, #128]	; (8007c38 <_free_r+0x9c>)
 8007bb8:	9801      	ldr	r0, [sp, #4]
 8007bba:	6813      	ldr	r3, [r2, #0]
 8007bbc:	4615      	mov	r5, r2
 8007bbe:	b933      	cbnz	r3, 8007bce <_free_r+0x32>
 8007bc0:	6063      	str	r3, [r4, #4]
 8007bc2:	6014      	str	r4, [r2, #0]
 8007bc4:	b003      	add	sp, #12
 8007bc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bca:	f000 b8a7 	b.w	8007d1c <__malloc_unlock>
 8007bce:	42a3      	cmp	r3, r4
 8007bd0:	d90b      	bls.n	8007bea <_free_r+0x4e>
 8007bd2:	6821      	ldr	r1, [r4, #0]
 8007bd4:	1862      	adds	r2, r4, r1
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	bf04      	itt	eq
 8007bda:	681a      	ldreq	r2, [r3, #0]
 8007bdc:	685b      	ldreq	r3, [r3, #4]
 8007bde:	6063      	str	r3, [r4, #4]
 8007be0:	bf04      	itt	eq
 8007be2:	1852      	addeq	r2, r2, r1
 8007be4:	6022      	streq	r2, [r4, #0]
 8007be6:	602c      	str	r4, [r5, #0]
 8007be8:	e7ec      	b.n	8007bc4 <_free_r+0x28>
 8007bea:	461a      	mov	r2, r3
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	b10b      	cbz	r3, 8007bf4 <_free_r+0x58>
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	d9fa      	bls.n	8007bea <_free_r+0x4e>
 8007bf4:	6811      	ldr	r1, [r2, #0]
 8007bf6:	1855      	adds	r5, r2, r1
 8007bf8:	42a5      	cmp	r5, r4
 8007bfa:	d10b      	bne.n	8007c14 <_free_r+0x78>
 8007bfc:	6824      	ldr	r4, [r4, #0]
 8007bfe:	4421      	add	r1, r4
 8007c00:	1854      	adds	r4, r2, r1
 8007c02:	42a3      	cmp	r3, r4
 8007c04:	6011      	str	r1, [r2, #0]
 8007c06:	d1dd      	bne.n	8007bc4 <_free_r+0x28>
 8007c08:	681c      	ldr	r4, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	6053      	str	r3, [r2, #4]
 8007c0e:	4421      	add	r1, r4
 8007c10:	6011      	str	r1, [r2, #0]
 8007c12:	e7d7      	b.n	8007bc4 <_free_r+0x28>
 8007c14:	d902      	bls.n	8007c1c <_free_r+0x80>
 8007c16:	230c      	movs	r3, #12
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	e7d3      	b.n	8007bc4 <_free_r+0x28>
 8007c1c:	6825      	ldr	r5, [r4, #0]
 8007c1e:	1961      	adds	r1, r4, r5
 8007c20:	428b      	cmp	r3, r1
 8007c22:	bf04      	itt	eq
 8007c24:	6819      	ldreq	r1, [r3, #0]
 8007c26:	685b      	ldreq	r3, [r3, #4]
 8007c28:	6063      	str	r3, [r4, #4]
 8007c2a:	bf04      	itt	eq
 8007c2c:	1949      	addeq	r1, r1, r5
 8007c2e:	6021      	streq	r1, [r4, #0]
 8007c30:	6054      	str	r4, [r2, #4]
 8007c32:	e7c7      	b.n	8007bc4 <_free_r+0x28>
 8007c34:	b003      	add	sp, #12
 8007c36:	bd30      	pop	{r4, r5, pc}
 8007c38:	200000bc 	.word	0x200000bc

08007c3c <_malloc_r>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	1ccd      	adds	r5, r1, #3
 8007c40:	f025 0503 	bic.w	r5, r5, #3
 8007c44:	3508      	adds	r5, #8
 8007c46:	2d0c      	cmp	r5, #12
 8007c48:	bf38      	it	cc
 8007c4a:	250c      	movcc	r5, #12
 8007c4c:	2d00      	cmp	r5, #0
 8007c4e:	4606      	mov	r6, r0
 8007c50:	db01      	blt.n	8007c56 <_malloc_r+0x1a>
 8007c52:	42a9      	cmp	r1, r5
 8007c54:	d903      	bls.n	8007c5e <_malloc_r+0x22>
 8007c56:	230c      	movs	r3, #12
 8007c58:	6033      	str	r3, [r6, #0]
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c5e:	f000 f857 	bl	8007d10 <__malloc_lock>
 8007c62:	4921      	ldr	r1, [pc, #132]	; (8007ce8 <_malloc_r+0xac>)
 8007c64:	680a      	ldr	r2, [r1, #0]
 8007c66:	4614      	mov	r4, r2
 8007c68:	b99c      	cbnz	r4, 8007c92 <_malloc_r+0x56>
 8007c6a:	4f20      	ldr	r7, [pc, #128]	; (8007cec <_malloc_r+0xb0>)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	b923      	cbnz	r3, 8007c7a <_malloc_r+0x3e>
 8007c70:	4621      	mov	r1, r4
 8007c72:	4630      	mov	r0, r6
 8007c74:	f000 f83c 	bl	8007cf0 <_sbrk_r>
 8007c78:	6038      	str	r0, [r7, #0]
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f000 f837 	bl	8007cf0 <_sbrk_r>
 8007c82:	1c43      	adds	r3, r0, #1
 8007c84:	d123      	bne.n	8007cce <_malloc_r+0x92>
 8007c86:	230c      	movs	r3, #12
 8007c88:	6033      	str	r3, [r6, #0]
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f000 f846 	bl	8007d1c <__malloc_unlock>
 8007c90:	e7e3      	b.n	8007c5a <_malloc_r+0x1e>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	1b5b      	subs	r3, r3, r5
 8007c96:	d417      	bmi.n	8007cc8 <_malloc_r+0x8c>
 8007c98:	2b0b      	cmp	r3, #11
 8007c9a:	d903      	bls.n	8007ca4 <_malloc_r+0x68>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	441c      	add	r4, r3
 8007ca0:	6025      	str	r5, [r4, #0]
 8007ca2:	e004      	b.n	8007cae <_malloc_r+0x72>
 8007ca4:	6863      	ldr	r3, [r4, #4]
 8007ca6:	42a2      	cmp	r2, r4
 8007ca8:	bf0c      	ite	eq
 8007caa:	600b      	streq	r3, [r1, #0]
 8007cac:	6053      	strne	r3, [r2, #4]
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f000 f834 	bl	8007d1c <__malloc_unlock>
 8007cb4:	f104 000b 	add.w	r0, r4, #11
 8007cb8:	1d23      	adds	r3, r4, #4
 8007cba:	f020 0007 	bic.w	r0, r0, #7
 8007cbe:	1ac2      	subs	r2, r0, r3
 8007cc0:	d0cc      	beq.n	8007c5c <_malloc_r+0x20>
 8007cc2:	1a1b      	subs	r3, r3, r0
 8007cc4:	50a3      	str	r3, [r4, r2]
 8007cc6:	e7c9      	b.n	8007c5c <_malloc_r+0x20>
 8007cc8:	4622      	mov	r2, r4
 8007cca:	6864      	ldr	r4, [r4, #4]
 8007ccc:	e7cc      	b.n	8007c68 <_malloc_r+0x2c>
 8007cce:	1cc4      	adds	r4, r0, #3
 8007cd0:	f024 0403 	bic.w	r4, r4, #3
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d0e3      	beq.n	8007ca0 <_malloc_r+0x64>
 8007cd8:	1a21      	subs	r1, r4, r0
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f000 f808 	bl	8007cf0 <_sbrk_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d1dd      	bne.n	8007ca0 <_malloc_r+0x64>
 8007ce4:	e7cf      	b.n	8007c86 <_malloc_r+0x4a>
 8007ce6:	bf00      	nop
 8007ce8:	200000bc 	.word	0x200000bc
 8007cec:	200000c0 	.word	0x200000c0

08007cf0 <_sbrk_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d06      	ldr	r5, [pc, #24]	; (8007d0c <_sbrk_r+0x1c>)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7f8 ffc2 	bl	8000c84 <_sbrk>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d102      	bne.n	8007d0a <_sbrk_r+0x1a>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	b103      	cbz	r3, 8007d0a <_sbrk_r+0x1a>
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20000898 	.word	0x20000898

08007d10 <__malloc_lock>:
 8007d10:	4801      	ldr	r0, [pc, #4]	; (8007d18 <__malloc_lock+0x8>)
 8007d12:	f000 b809 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 8007d16:	bf00      	nop
 8007d18:	200008a0 	.word	0x200008a0

08007d1c <__malloc_unlock>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	; (8007d24 <__malloc_unlock+0x8>)
 8007d1e:	f000 b804 	b.w	8007d2a <__retarget_lock_release_recursive>
 8007d22:	bf00      	nop
 8007d24:	200008a0 	.word	0x200008a0

08007d28 <__retarget_lock_acquire_recursive>:
 8007d28:	4770      	bx	lr

08007d2a <__retarget_lock_release_recursive>:
 8007d2a:	4770      	bx	lr

08007d2c <_init>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	bf00      	nop
 8007d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d32:	bc08      	pop	{r3}
 8007d34:	469e      	mov	lr, r3
 8007d36:	4770      	bx	lr

08007d38 <_fini>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	bf00      	nop
 8007d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3e:	bc08      	pop	{r3}
 8007d40:	469e      	mov	lr, r3
 8007d42:	4770      	bx	lr
